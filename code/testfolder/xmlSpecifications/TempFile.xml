<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<source>
	<classdefinition>
		<name>ParserJava</name>
		<extends>
			<entry>XmlHelperMethods</entry>
		</extends>
		<implements>
			<entry>ParserIf</entry>
		</implements>
		<compositions>
			<entry>LogMain</entry>
		</compositions>
		<aggregations />
		<instance>
			<name>logger</name>
			<class>LogMain</class>
			<methodcall>
				<method>getLog</method>
				<instance>logger</instance>
				<validity>class</validity>
			</methodcall>
			<methodcall>
				<method>info</method>
				<instance>)</instance>
			</methodcall>
		</instance>
		<classdefinition>
			<name>TokenResult</name>
			<compositions />
			<aggregations>
				<entry>int</entry>
				<entry>String</entry>
				<methodcall>
					<method>super</method>
				</methodcall>
			</aggregations>
			<methoddefinition>
				<name>getFoundToken</name>
				<result>int</result>
			</methoddefinition>
			<methoddefinition>
				<name>setFoundToken</name>
				<parameters>
					<entry>
						<type>int</type>
						<name>foundToken</name>
					</entry>
				</parameters>
				<result>void</result>
			</methoddefinition>
			<methoddefinition>
				<name>getData</name>
				<result>String</result>
			</methoddefinition>
			<methoddefinition>
				<name>setData</name>
				<parameters>
					<entry>
						<type>String</type>
						<name>data</name>
					</entry>
				</parameters>
				<result>void</result>
			</methoddefinition>
			<methoddefinition>
				<name>getSourceCode</name>
				<result>String</result>
			</methoddefinition>
			<methoddefinition>
				<name>setSourceCode</name>
				<parameters>
					<entry>
						<type>String</type>
						<name>sourceCode</name>
					</entry>
				</parameters>
				<result>void</result>
			</methoddefinition>
		</classdefinition>
		<methoddefinition>
			<name>rBraceContent</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>sourcec</name>
				</entry>
			</parameters>
			<result>TokenResult</result>
			<loop>
				<condition>do/while(rBrace != 0)</condition>
				<methodcall>
					<method>goToTokenWithName</method>
				</methodcall>
				<methodcall>
					<method>getData</method>
					<instance>res</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(res.getFoundToken() == 0)</condition>
					</case>
					<case>
						<condition>else</condition>
					</case>
				</alternative>
				<methodcall>
					<method>getSourceCode</method>
					<instance>res</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>)</instance>
				</methodcall>
			</loop>
			<methodcall>
				<method>TokenResult</method>
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>goToTokenWithName</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>source</name>
				</entry>
				<entry>
					<type>String[]</type>
					<name>name</name>
				</entry>
			</parameters>
			<result>TokenResult</result>
			<loop>
				<condition>for(int i = 0; i &lt; name.length; i++)</condition>
				<alternative>
					<case>
						<condition>if(source.substring(0,
							name[i].length()).equals(name[i]))</condition>
					</case>
				</alternative>
			</loop>
			<loop>
				<condition>while(!found &amp;&amp; !source.isEmpty())</condition>
				<methodcall>
					<method>substring</method>
					<instance>source</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>source</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(source.isEmpty())</condition>
					</case>
				</alternative>
				<loop>
					<condition>for(int i = 0; i &lt; name.length; i++)</condition>
					<alternative>
						<case>
							<condition>if(source.substring(0,
								name[i].length()).equals(name[i]))</condition>
						</case>
					</alternative>
				</loop>
			</loop>
			<methodcall>
				<method>trim</method>
				<instance>source</instance>
			</methodcall>
			<methodcall>
				<method>TokenResult</method>
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>buildTree</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>sourcec</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>newInstance</method>
				<instance>DocumentBuilderFactory</instance>
			</methodcall>
			<methodcall>
				<method>newDocumentBuilder</method>
				<instance>documentFactory</instance>
			</methodcall>
			<methodcall>
				<method>newDocument</method>
				<instance>documentBuilder</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>document</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; switchCaseCondition.length; i++)
				</condition>
			</loop>
			<loop>
				<condition>for(int i = 0; i &lt; switchCaseOn.length; i++)
				</condition>
			</loop>
			<methodcall>
				<method>appendChild</method>
				<instance>document</instance>
			</methodcall>
			<loop>
				<condition>while(!sourcec.isEmpty())</condition>
				<frame>
					<methodcall>
						<method>trim</method>
						<instance>sourcec</instance>
					</methodcall>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<loop>
								<condition>do</condition>
								<methodcall>
									<method>goToTokenWithName</method>
								</methodcall>
								<methodcall>
									<method>getSourceCode</method>
									<instance>res</instance>
								</methodcall>
								<alternative>
									<case>
										<condition>if(res.getFoundToken() != 2)</condition>
										<methodcall>
											<method>substring</method>
											<instance>sourcec</instance>
										</methodcall>
									</case>
								</alternative>
							</loop>
						</case>
						<loop>
							<condition>while(res.getFoundToken() != 2)</condition>
						</loop>
						<methodcall>
							<method>substring</method>
							<instance>sourcec</instance>
						</methodcall>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getSourceCode</method>
								<instance>res</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getSourceCode</method>
								<instance>res</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getSourceCode</method>
								<instance>res</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getSourceCode</method>
								<instance>res</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(res.getFoundToken() == 0)</condition>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
								</case>
							</alternative>
							<methodcall>
								<method>getData</method>
								<instance>res</instance>
							</methodcall>
							<methodcall>
								<method>strip</method>
								<instance>classNameStr</instance>
							</methodcall>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>classNameEl</instance>
							</methodcall>
							<methodcall>
								<method>createTextNode</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>classDefinition</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>curNode</instance>
							</methodcall>
							<methodcall>
								<method>=</method>
							</methodcall>
							<methodcall>
								<method>getLastChild</method>
								<instance>curNode</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(sourcec.substring(0,
										compString.length()).equals(compString))</condition>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>length</method>
										<instance>compString</instance>
									</methodcall>
									<methodcall>
										<method>trim</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>goToTokenWithName</method>
									</methodcall>
									<methodcall>
										<method>getSourceCode</method>
										<instance>res</instance>
									</methodcall>
									<methodcall>
										<method>getData</method>
										<instance>res</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>if(res.getFoundToken() == 0)</condition>
											<methodcall>
												<method>substring</method>
												<instance>sourcec</instance>
											</methodcall>
										</case>
									</alternative>
									<methodcall>
										<method>strip</method>
										<instance>classExtendsStr</instance>
									</methodcall>
									<methodcall>
										<method>out</method>
										<instance>System</instance>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>classExtendsEl</instance>
									</methodcall>
									<methodcall>
										<method>createTextNode</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>classExtends</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>classDefinition</instance>
									</methodcall>
								</case>
							</alternative>
							<alternative>
								<case>
									<condition>if(sourcec.substring(0,
										compString.length()).equals(compString))</condition>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>classDefinition</instance>
									</methodcall>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>length</method>
										<instance>compString</instance>
									</methodcall>
									<loop>
										<condition>do</condition>
										<methodcall>
											<method>trim</method>
											<instance>sourcec</instance>
										</methodcall>
										<methodcall>
											<method>goToTokenWithName</method>
										</methodcall>
										<methodcall>
											<method>getSourceCode</method>
											<instance>res</instance>
										</methodcall>
										<alternative>
											<case>
												<condition>if(res.getFoundToken() == 0)</condition>
											</case>
										</alternative>
										<methodcall>
											<method>substring</method>
											<instance>sourcec</instance>
										</methodcall>
										<methodcall>
											<method>getData</method>
											<instance>res</instance>
										</methodcall>
										<methodcall>
											<method>strip</method>
											<instance>classImplementsStr</instance>
										</methodcall>
										<methodcall>
											<method>out</method>
											<instance>System</instance>
										</methodcall>
										<methodcall>
											<method>createElement</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>classImplementsEl</instance>
										</methodcall>
										<methodcall>
											<method>createTextNode</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>classImplements</instance>
										</methodcall>
									</loop>
								</case>
								<loop>
									<condition>while(!(curlBraceBool))</condition>
								</loop>
							</alternative>
						</case>
						<methodcall>
							<method>createElement</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>curNode</instance>
						</methodcall>
						<methodcall>
							<method>createElement</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>curNode</instance>
						</methodcall>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getSourceCode</method>
								<instance>res</instance>
							</methodcall>
							<methodcall>
								<method>getData</method>
								<instance>res</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(res.getFoundToken() == 0)</condition>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
								</case>
							</alternative>
							<methodcall>
								<method>strip</method>
								<instance>interfaceName</instance>
							</methodcall>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>ifNameEl</instance>
							</methodcall>
							<methodcall>
								<method>createTextNode</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>ifDefinition</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>curNode</instance>
							</methodcall>
							<methodcall>
								<method>=</method>
							</methodcall>
							<methodcall>
								<method>getLastChild</method>
								<instance>curNode</instance>
							</methodcall>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
							<methodcall>
								<method>getFirstChild</method>
								<instance>curNode</instance>
							</methodcall>
							<methodcall>
								<method>getTextContent</method>
								<instance>)</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(sourcec.substring(0,
										compString.length()).equals(compString))</condition>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>length</method>
										<instance>compString</instance>
									</methodcall>
									<methodcall>
										<method>trim</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>goToTokenWithName</method>
									</methodcall>
									<methodcall>
										<method>getData</method>
										<instance>res</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>if(res.getFoundToken() == 0)</condition>
											<methodcall>
												<method>substring</method>
												<instance>sourcec</instance>
											</methodcall>
										</case>
									</alternative>
									<methodcall>
										<method>strip</method>
										<instance>extendsName</instance>
									</methodcall>
									<methodcall>
										<method>out</method>
										<instance>System</instance>
									</methodcall>
								</case>
							</alternative>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>curNode</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>curNode</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(!(curNode.getNodeName().equals("source")))
							</condition>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getData</method>
								<instance>res1</instance>
							</methodcall>
							<methodcall>
								<method>strip</method>
								<instance>)</instance>
							</methodcall>
							<methodcall>
								<method>replaceAll</method>
								<instance>functionData</instance>
							</methodcall>
							<methodcall>
								<method>replaceAll</method>
								<instance>functionData</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(!(functionData.contains("{") ||
										functionData.contains(";")))</condition>
									<alternative>
										<case>
											<condition>if(functionData.contains("="))</condition>
											<methodcall>
												<method>replaceAll</method>
												<instance>functionData</instance>
											</methodcall>
										</case>
									</alternative>
									<methodcall>
										<method>split</method>
										<instance>functionData</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>switch(prefixRBrace.length)/case 0</condition>
											<methodcall>
												<method>out</method>
												<instance>System</instance>
											</methodcall>
										</case>
										<case>
											<condition>switch(prefixRBrace.length)/case 1</condition>
											<alternative>
												<case>
													<condition>switch(prefixRBrace[0])/case "if"</condition>
													<methodcall>
														<method>createElement</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>createElement</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>createElement</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>curNode</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>ifAlternativeNode</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>ifCaseNode</instance>
													</methodcall>
													<methodcall>
														<method>getSourceCode</method>
														<instance>res1</instance>
													</methodcall>
													<methodcall>
														<method>rBraceContent</method>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>ifConditionNode</instance>
													</methodcall>
													<methodcall>
														<method>createTextNode</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>getData</method>
														<instance>ifRes</instance>
													</methodcall>
													<methodcall>
														<method>getSourceCode</method>
														<instance>ifRes</instance>
													</methodcall>
													<methodcall>
														<method>substring</method>
														<instance>sourcec</instance>
													</methodcall>
													<methodcall>
														<method>trim</method>
														<instance>sourcec</instance>
													</methodcall>
													<alternative>
														<case>
															<condition>if(sourcec.charAt(0) == '{')</condition>
															<methodcall>
																<method>substring</method>
																<instance>sourcec</instance>
															</methodcall>
															<methodcall>
																<method>=</method>
															</methodcall>
															<methodcall>
																<method>getLastChild</method>
																<instance>curNode</instance>
															</methodcall>
															<methodcall>
																<method>out</method>
																<instance>System</instance>
															</methodcall>
															<methodcall>
																<method>getNodeName</method>
																<instance>curNode</instance>
															</methodcall>
															<methodcall>
																<method>=</method>
															</methodcall>
															<methodcall>
																<method>getLastChild</method>
																<instance>curNode</instance>
															</methodcall>
															<methodcall>
																<method>out</method>
																<instance>System</instance>
															</methodcall>
															<methodcall>
																<method>getNodeName</method>
																<instance>curNode</instance>
															</methodcall>
														</case>
													</alternative>
												</case>
												<case>
													<condition>switch(prefixRBrace[0])/case "for"</condition>
													<methodcall>
														<method>createElement</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>createElement</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>forLoopNode</instance>
													</methodcall>
													<methodcall>
														<method>getSourceCode</method>
														<instance>res1</instance>
													</methodcall>
													<methodcall>
														<method>rBraceContent</method>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance />
													</methodcall>
													<methodcall>
														<method>createTextNode</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>getData</method>
														<instance>forRes</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>curNode</instance>
													</methodcall>
													<methodcall>
														<method>getSourceCode</method>
														<instance>forRes</instance>
													</methodcall>
													<methodcall>
														<method>substring</method>
														<instance>sourcec</instance>
													</methodcall>
													<methodcall>
														<method>trim</method>
														<instance>sourcec</instance>
													</methodcall>
													<alternative>
														<case>
															<condition>if(sourcec.charAt(0) == '{')</condition>
															<methodcall>
																<method>substring</method>
																<instance>sourcec</instance>
															</methodcall>
															<methodcall>
																<method>=</method>
															</methodcall>
															<methodcall>
																<method>getLastChild</method>
																<instance>curNode</instance>
															</methodcall>
														</case>
													</alternative>
												</case>
												<case>
													<condition>switch(prefixRBrace[0])/case "while"</condition>
													<frame>
														<alternative>
															<case>
																<condition>if(curNode.getLastChild().getFirstChild().getTextContent().equals("do"))
																</condition>
																<methodcall>
																	<method>getSourceCode</method>
																	<instance>res1</instance>
																</methodcall>
																<methodcall>
																	<method>rBraceContent</method>
																</methodcall>
																<methodcall>
																	<method>getLastChild</method>
																	<instance>curNode</instance>
																</methodcall>
																<methodcall>
																	<method>getFirstChild</method>
																	<instance>)</instance>
																</methodcall>
																<methodcall>
																	<method>setTextContent</method>
																	<instance />
																</methodcall>
																<methodcall>
																	<method>getData</method>
																	<instance>whileRes</instance>
																</methodcall>
																<methodcall>
																	<method>getSourceCode</method>
																	<instance>whileRes</instance>
																</methodcall>
																<methodcall>
																	<method>substring</method>
																	<instance>sourcec</instance>
																</methodcall>
																<methodcall>
																	<method>trim</method>
																	<instance>sourcec</instance>
																</methodcall>
															</case>
															<case>
																<condition>else</condition>
																<methodcall>
																	<method>createElement</method>
																	<instance>document</instance>
																</methodcall>
																<methodcall>
																	<method>createElement</method>
																	<instance>document</instance>
																</methodcall>
																<methodcall>
																	<method>appendChild</method>
																	<instance>whileLoopNode</instance>
																</methodcall>
																<methodcall>
																	<method>getSourceCode</method>
																	<instance>res1</instance>
																</methodcall>
																<methodcall>
																	<method>rBraceContent</method>
																</methodcall>
																<methodcall>
																	<method>appendChild</method>
																	<instance>whileConditionNode</instance>
																</methodcall>
																<methodcall>
																	<method>createTextNode</method>
																	<instance>document</instance>
																</methodcall>
																<methodcall>
																	<method>getData</method>
																	<instance>whileRes</instance>
																</methodcall>
																<methodcall>
																	<method>appendChild</method>
																	<instance>curNode</instance>
																</methodcall>
																<methodcall>
																	<method>getSourceCode</method>
																	<instance>whileRes</instance>
																</methodcall>
																<methodcall>
																	<method>substring</method>
																	<instance>sourcec</instance>
																</methodcall>
																<methodcall>
																	<method>trim</method>
																	<instance>sourcec</instance>
																</methodcall>
																<alternative>
																	<case>
																		<condition>if(sourcec.charAt(0) == '{')</condition>
																		<methodcall>
																			<method>substring</method>
																			<instance>sourcec</instance>
																		</methodcall>
																		<methodcall>
																			<method>=</method>
																		</methodcall>
																		<methodcall>
																			<method>getLastChild</method>
																			<instance>curNode</instance>
																		</methodcall>
																	</case>
																</alternative>
															</case>
														</alternative>
													</frame>
													<methodcall>
														<method>catch</method>
													</methodcall>
													<frame>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>whileLoopNode</instance>
														</methodcall>
														<methodcall>
															<method>getSourceCode</method>
															<instance>res1</instance>
														</methodcall>
														<methodcall>
															<method>rBraceContent</method>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance />
														</methodcall>
														<methodcall>
															<method>createTextNode</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>getData</method>
															<instance>whileRes</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>curNode</instance>
														</methodcall>
														<methodcall>
															<method>getSourceCode</method>
															<instance>whileRes</instance>
														</methodcall>
														<methodcall>
															<method>substring</method>
															<instance>sourcec</instance>
														</methodcall>
														<methodcall>
															<method>trim</method>
															<instance>sourcec</instance>
														</methodcall>
														<alternative>
															<case>
																<condition>if(sourcec.charAt(0) == '{')</condition>
																<methodcall>
																	<method>substring</method>
																	<instance>sourcec</instance>
																</methodcall>
																<methodcall>
																	<method>=</method>
																</methodcall>
																<methodcall>
																	<method>getLastChild</method>
																	<instance>curNode</instance>
																</methodcall>
															</case>
														</alternative>
													</frame>
												</case>
												<case>
													<condition>switch(prefixRBrace[0])/case "switch"
													</condition>
													<methodcall>
														<method>createElement</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>curNode</instance>
													</methodcall>
													<methodcall>
														<method>getSourceCode</method>
														<instance>res1</instance>
													</methodcall>
													<methodcall>
														<method>goToTokenWithName</method>
													</methodcall>
													<alternative>
														<case>
															<condition>if(switchCaseOn[curSwitch])</condition>
														</case>
													</alternative>
													<methodcall>
														<method>=</method>
													</methodcall>
													<methodcall>
														<method>getData</method>
														<instance>switchRes</instance>
													</methodcall>
													<methodcall>
														<method>getSourceCode</method>
														<instance>switchRes</instance>
													</methodcall>
													<methodcall>
														<method>substring</method>
														<instance>sourcec</instance>
													</methodcall>
													<methodcall>
														<method>trim</method>
														<instance>sourcec</instance>
													</methodcall>
													<alternative>
														<case>
															<condition>if(sourcec.charAt(0) == '{')</condition>
															<methodcall>
																<method>substring</method>
																<instance>sourcec</instance>
															</methodcall>
															<methodcall>
																<method>=</method>
															</methodcall>
															<methodcall>
																<method>getLastChild</method>
																<instance>curNode</instance>
															</methodcall>
														</case>
														<case>
															<condition>else</condition>
															<methodcall>
																<method>out</method>
																<instance>System</instance>
															</methodcall>
														</case>
													</alternative>
												</case>
												<case>
													<condition>switch(prefixRBrace[0])/default</condition>
													<methodcall>
														<method>out</method>
														<instance>System</instance>
													</methodcall>
													<alternative>
														<case>
															<condition>if(prefixRBrace[0].contains("."))</condition>
															<methodcall>
																<method>split</method>
																<instance>prefixRBrace[0]</instance>
															</methodcall>
															<methodcall>
																<method>createElement</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>createElement</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>createElement</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>curNode</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>methodCallNode</instance>
															</methodcall>
															<alternative>
																<case>
																	<condition>if(methodArray[0].equals("this"))
																	</condition>
																	<alternative>
																		<case>
																			<condition>if(prefixRBrace[0].split("\\.").length
																				&gt;= 3)</condition>
																			<methodcall>
																				<method>appendChild</method>
																				<instance>methodCallNode</instance>
																			</methodcall>
																			<methodcall>
																				<method>createElement</method>
																				<instance>document</instance>
																			</methodcall>
																			<methodcall>
																				<method>appendChild</method>
																				<instance>validNode</instance>
																			</methodcall>
																			<methodcall>
																				<method>createTextNode</method>
																				<instance>document</instance>
																			</methodcall>
																			<methodcall>
																				<method>appendChild</method>
																				<instance>methodCallNode</instance>
																			</methodcall>
																			<methodcall>
																				<method>appendChild</method>
																				<instance>methodNode</instance>
																			</methodcall>
																			<methodcall>
																				<method>createTextNode</method>
																				<instance>document</instance>
																			</methodcall>
																			<methodcall>
																				<method>appendChild</method>
																				<instance>methodInstanceNode</instance>
																			</methodcall>
																			<methodcall>
																				<method>createTextNode</method>
																				<instance>document</instance>
																			</methodcall>
																			<methodcall>
																				<method>getSourceCode</method>
																				<instance>res1</instance>
																			</methodcall>
																		</case>
																		<case>
																			<condition>else</condition>
																			<methodcall>
																				<method>substring</method>
																				<instance>prefixRBrace[0]</instance>
																			</methodcall>
																			<methodcall>
																				<method>appendChild</method>
																				<instance>methodNode</instance>
																			</methodcall>
																			<methodcall>
																				<method>createTextNode</method>
																				<instance>document</instance>
																			</methodcall>
																			<methodcall>
																				<method>getSourceCode</method>
																				<instance>res1</instance>
																			</methodcall>
																		</case>
																	</alternative>
																</case>
																<case>
																	<condition>else</condition>
																	<methodcall>
																		<method>appendChild</method>
																		<instance>methodCallNode</instance>
																	</methodcall>
																	<methodcall>
																		<method>appendChild</method>
																		<instance>methodNode</instance>
																	</methodcall>
																	<methodcall>
																		<method>createTextNode</method>
																		<instance>document</instance>
																	</methodcall>
																	<methodcall>
																		<method>appendChild</method>
																		<instance>methodInstanceNode</instance>
																	</methodcall>
																	<methodcall>
																		<method>createTextNode</method>
																		<instance>document</instance>
																	</methodcall>
																	<methodcall>
																		<method>getSourceCode</method>
																		<instance>res1</instance>
																	</methodcall>
																</case>
															</alternative>
														</case>
														<case>
															<condition>else</condition>
															<methodcall>
																<method>createElement</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>createElement</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>curNode</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>methodCallNode</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>methodNode</instance>
															</methodcall>
															<methodcall>
																<method>createTextNode</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>getSourceCode</method>
																<instance>res1</instance>
															</methodcall>
														</case>
													</alternative>
												</case>
											</alternative>
										</case>
										<case>
											<condition>switch(prefixRBrace.length)/case 2</condition>
											<alternative>
												<case>
													<condition>switch(prefixRBrace[0])/case "private"
													</condition>
												</case>
												<case>
													<condition>switch(prefixRBrace[0])/case "public"
													</condition>
													<alternative>
														<case>
															<condition>if(prefixRBrace[1]
																.equals(curNode.getElementsByTagName("name").item(0).getTextContent()))
															</condition>
															<methodcall>
																<method>out</method>
																<instance>System</instance>
															</methodcall>
															<methodcall>
																<method>getSourceCode</method>
																<instance>res1</instance>
															</methodcall>
															<methodcall>
																<method>substring</method>
																<instance>sourcec</instance>
															</methodcall>
															<methodcall>
																<method>=</method>
															</methodcall>
															<methodcall>
																<method>getChildwithName</method>
															</methodcall>
															<methodcall>
																<method>=</method>
															</methodcall>
															<methodcall>
																<method>getChildwithName</method>
															</methodcall>
															<loop>
																<condition>do</condition>
																<methodcall>
																	<method>goToTokenWithName</method>
																</methodcall>
																<methodcall>
																	<method>getData</method>
																	<instance>res2</instance>
																</methodcall>
																<methodcall>
																	<method>strip</method>
																	<instance>)</instance>
																</methodcall>
																<methodcall>
																	<method>split</method>
																	<instance>functionData2</instance>
																</methodcall>
																<alternative>
																	<case>
																		<condition>if(argumentConstructor.length == 2)
																		</condition>
																		<loop>
																			<condition>for(int i = 0; i &lt;
																				classComp.getElementsByTagName("entry")
																				.getLength(); i++)
																			</condition>
																			<alternative>
																				<case>
																					<condition>if(classComp.getElementsByTagName("entry").item(i).getTextContent()
																						.equals(argumentConstructor[0]))
																					</condition>
																				</case>
																			</alternative>
																		</loop>
																	</case>
																	<alternative>
																		<case>
																			<condition>if(inCompositions == false)</condition>
																			<loop>
																				<condition>for(int i = 0; i &lt;
																					classAggr.getElementsByTagName("entry")
																					.getLength(); i++)
																				</condition>
																				<alternative>
																					<case>
																						<condition>if(classAggr.getElementsByTagName("entry").item(i).getTextContent()
																							.equals(argumentConstructor[0]))
																						</condition>
																					</case>
																				</alternative>
																			</loop>
																		</case>
																		<alternative>
																			<case>
																				<condition>if(inAggregations == false)</condition>
																				<methodcall>
																					<method>createElement</method>
																					<instance>document</instance>
																				</methodcall>
																				<methodcall>
																					<method>appendChild</method>
																					<instance>classAggr</instance>
																				</methodcall>
																				<methodcall>
																					<method>appendChild</method>
																					<instance>classCompositionEl</instance>
																				</methodcall>
																				<methodcall>
																					<method>createTextNode</method>
																					<instance>document</instance>
																				</methodcall>
																			</case>
																		</alternative>
																	</alternative>
																</alternative>
															</loop>
														</case>
														<methodcall>
															<method>getSourceCode</method>
															<instance>res2</instance>
														</methodcall>
														<methodcall>
															<method>substring</method>
															<instance>sourcec</instance>
														</methodcall>
													</alternative>
													<loop>
														<condition>while(res2.getFoundToken() != 0)</condition>
													</loop>
													<methodcall>
														<method>trim</method>
														<instance>sourcec</instance>
													</methodcall>
													<alternative>
														<case>
															<condition>if(sourcec.charAt(0) == '{')</condition>
															<methodcall>
																<method>substring</method>
																<instance>sourcec</instance>
															</methodcall>
															<methodcall>
																<method>=</method>
															</methodcall>
															<methodcall>
																<method>getLastChild</method>
																<instance>curNode</instance>
															</methodcall>
														</case>
													</alternative>
												</case>
											</alternative>
										</case>
										<case>
											<condition>switch(prefixRBrace.length)/default</condition>
											<methodcall>
												<method>out</method>
												<instance>System</instance>
											</methodcall>
										</case>
									</alternative>
									<methodcall>
										<method>goToTokenWithName</method>
									</methodcall>
									<methodcall>
										<method>getData</method>
										<instance>resFD</instance>
									</methodcall>
									<methodcall>
										<method>strip</method>
										<instance>)</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>if((prefixRBrace[0].equals("public") ||
												prefixRBrace[0].equals("private"))
												&amp;&amp; !prefixRBrace[1].equals("class") &amp;&amp;
												!functionDataFD.contains(";"))</condition>
											<methodcall>
												<method>createElement</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>createElement</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>nameNode</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>methoddefinitionNode</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>curNode</instance>
											</methodcall>
											<methodcall>
												<method>getSourceCode</method>
												<instance>res1</instance>
											</methodcall>
											<methodcall>
												<method>substring</method>
												<instance>sourcec</instance>
											</methodcall>
											<methodcall>
												<method>createElement</method>
												<instance>document</instance>
											</methodcall>
											<loop>
												<condition>do</condition>
												<methodcall>
													<method>goToTokenWithName</method>
												</methodcall>
												<methodcall>
													<method>getData</method>
													<instance>res2</instance>
												</methodcall>
												<methodcall>
													<method>strip</method>
													<instance>)</instance>
												</methodcall>
												<methodcall>
													<method>split</method>
													<instance>functionData2</instance>
												</methodcall>
												<alternative>
													<case>
														<condition>if(parameterFunction.length == 2)</condition>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>typePNode</instance>
														</methodcall>
														<methodcall>
															<method>createTextNode</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>namePNode</instance>
														</methodcall>
														<methodcall>
															<method>createTextNode</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>entryPNode</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>entryPNode</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>parametersNode</instance>
														</methodcall>
													</case>
												</alternative>
												<methodcall>
													<method>getSourceCode</method>
													<instance>res2</instance>
												</methodcall>
												<methodcall>
													<method>substring</method>
													<instance>sourcec</instance>
												</methodcall>
											</loop>
										</case>
										<loop>
											<condition>while(res2.getFoundToken() != 0)</condition>
										</loop>
										<alternative>
											<case>
												<condition>if(parametersNode.hasChildNodes())</condition>
											</case>
										</alternative>
										<methodcall>
											<method>appendChild</method>
											<instance>methoddefinitionNode</instance>
										</methodcall>
										<methodcall>
											<method>createElement</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>resultNode</instance>
										</methodcall>
										<methodcall>
											<method>createTextNode</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>methoddefinitionNode</instance>
										</methodcall>
										<methodcall>
											<method>trim</method>
											<instance>sourcec</instance>
										</methodcall>
										<alternative>
											<case>
												<condition>if(sourcec.substring(0, 6).equals("throws"))
												</condition>
												<loop>
													<condition>while(!(sourcec.charAt(0) == '{'))</condition>
													<methodcall>
														<method>substring</method>
														<instance>sourcec</instance>
													</methodcall>
												</loop>
											</case>
										</alternative>
									</alternative>
									<alternative>
										<case>
											<condition>if(sourcec.charAt(0) == '{')</condition>
											<methodcall>
												<method>substring</method>
												<instance>sourcec</instance>
											</methodcall>
											<methodcall>
												<method>=</method>
											</methodcall>
											<methodcall>
												<method>getLastChild</method>
												<instance>curNode</instance>
											</methodcall>
										</case>
									</alternative>
								</case>
							</alternative>
							<alternative>
								<case>
									<condition>if((prefixRBrace[0].equals("public") ||
										prefixRBrace[0].equals("private"))
										&amp;&amp; prefixRBrace[1].equals("static"))</condition>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>nameNode</instance>
									</methodcall>
									<methodcall>
										<method>createTextNode</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>methoddefinitionNode</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>curNode</instance>
									</methodcall>
									<methodcall>
										<method>getSourceCode</method>
										<instance>res1</instance>
									</methodcall>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<loop>
										<condition>do</condition>
										<methodcall>
											<method>goToTokenWithName</method>
										</methodcall>
										<methodcall>
											<method>getData</method>
											<instance>res2</instance>
										</methodcall>
										<methodcall>
											<method>strip</method>
											<instance>)</instance>
										</methodcall>
										<methodcall>
											<method>split</method>
											<instance>functionData2</instance>
										</methodcall>
										<alternative>
											<case>
												<condition>if(parameterFunction.length == 2)</condition>
												<methodcall>
													<method>createElement</method>
													<instance>document</instance>
												</methodcall>
												<methodcall>
													<method>createElement</method>
													<instance>document</instance>
												</methodcall>
												<methodcall>
													<method>createElement</method>
													<instance>document</instance>
												</methodcall>
												<methodcall>
													<method>appendChild</method>
													<instance>typePNode</instance>
												</methodcall>
												<methodcall>
													<method>createTextNode</method>
													<instance>document</instance>
												</methodcall>
												<methodcall>
													<method>appendChild</method>
													<instance>namePNode</instance>
												</methodcall>
												<methodcall>
													<method>createTextNode</method>
													<instance>document</instance>
												</methodcall>
												<methodcall>
													<method>appendChild</method>
													<instance>entryPNode</instance>
												</methodcall>
												<methodcall>
													<method>appendChild</method>
													<instance>entryPNode</instance>
												</methodcall>
												<methodcall>
													<method>appendChild</method>
													<instance>parametersNode</instance>
												</methodcall>
											</case>
										</alternative>
										<methodcall>
											<method>getSourceCode</method>
											<instance>res2</instance>
										</methodcall>
										<methodcall>
											<method>substring</method>
											<instance>sourcec</instance>
										</methodcall>
									</loop>
								</case>
								<loop>
									<condition>while(res2.getFoundToken() != 0)</condition>
								</loop>
								<alternative>
									<case>
										<condition>if(parametersNode.hasChildNodes())</condition>
									</case>
								</alternative>
								<methodcall>
									<method>appendChild</method>
									<instance>methoddefinitionNode</instance>
								</methodcall>
								<alternative>
									<case>
										<condition>if(!prefixRBrace[2].equals("void"))</condition>
										<methodcall>
											<method>createElement</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>resultNode</instance>
										</methodcall>
										<methodcall>
											<method>createTextNode</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>methoddefinitionNode</instance>
										</methodcall>
									</case>
								</alternative>
								<methodcall>
									<method>trim</method>
									<instance>sourcec</instance>
								</methodcall>
								<alternative>
									<case>
										<condition>if(sourcec.charAt(0) == '{')</condition>
										<methodcall>
											<method>substring</method>
											<instance>sourcec</instance>
										</methodcall>
										<methodcall>
											<method>=</method>
										</methodcall>
										<methodcall>
											<method>getLastChild</method>
											<instance>curNode</instance>
										</methodcall>
									</case>
								</alternative>
							</alternative>
						</case>
						<alternative>
							<case>
								<condition>if((prefixRBrace[1].equals("=") ||
									prefixRBrace[2].equals("new")))</condition>
								<methodcall>
									<method>createElement</method>
									<instance>document</instance>
								</methodcall>
								<methodcall>
									<method>appendChild</method>
									<instance>curNode</instance>
								</methodcall>
								<methodcall>
									<method>createElement</method>
									<instance>document</instance>
								</methodcall>
								<methodcall>
									<method>appendChild</method>
									<instance>instanceNode</instance>
								</methodcall>
								<methodcall>
									<method>appendChild</method>
									<instance>instanceNNode</instance>
								</methodcall>
								<methodcall>
									<method>createTextNode</method>
									<instance>document</instance>
								</methodcall>
								<methodcall>
									<method>createElement</method>
									<instance>document</instance>
								</methodcall>
								<methodcall>
									<method>appendChild</method>
									<instance>instanceNode</instance>
								</methodcall>
								<methodcall>
									<method>appendChild</method>
									<instance>instanceCNode</instance>
								</methodcall>
								<methodcall>
									<method>createTextNode</method>
									<instance>document</instance>
								</methodcall>
								<loop>
									<condition>do</condition>
									<alternative>
										<case>
											<condition>if(goToClassNode.getNodeName().equals("classdefinition"))
											</condition>
											<methodcall>
												<method>=</method>
											</methodcall>
											<methodcall>
												<method>getChildwithName</method>
											</methodcall>
											<methodcall>
												<method>=</method>
											</methodcall>
											<methodcall>
												<method>getChildwithName</method>
											</methodcall>
											<loop>
												<condition>for(int i = 0; i &lt;
													classComp.getElementsByTagName("entry").getLength(); i++)
												</condition>
												<alternative>
													<case>
														<condition>if(classComp.getElementsByTagName("entry").item(i).getTextContent()
															.equals(prefixRBrace[3]))
														</condition>
													</case>
												</alternative>
											</loop>
										</case>
										<loop>
											<condition>for(int i = 0; i &lt;
												classAggr.getElementsByTagName("entry").getLength(); i++)
											</condition>
											<alternative>
												<case>
													<condition>if(classAggr.getElementsByTagName("entry").item(i).getTextContent()
														.equals(prefixRBrace[3]))
													</condition>
													<methodcall>
														<method>removeChild</method>
														<instance>classAggr</instance>
													</methodcall>
													<methodcall>
														<method>getElementsByTagName</method>
														<instance>classAggr</instance>
													</methodcall>
													<methodcall>
														<method>item</method>
														<instance>)</instance>
													</methodcall>
												</case>
											</alternative>
										</loop>
									</alternative>
									<alternative>
										<case>
											<condition>if(inCompositions == false)</condition>
											<methodcall>
												<method>createElement</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>classCompEntry</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>classComp</instance>
											</methodcall>
										</case>
									</alternative>
								</loop>
							</case>
							<methodcall>
								<method>=</method>
							</methodcall>
							<methodcall>
								<method>getParentNode</method>
								<instance>goToClassNode</instance>
							</methodcall>
						</alternative>
					</alternative>
					<loop>
						<condition>while(!doneClass)</condition>
					</loop>
					<methodcall>
						<method>goToTokenWithName</method>
					</methodcall>
					<methodcall>
						<method>getSourceCode</method>
						<instance>newRes</instance>
					</methodcall>
				</frame>
			</loop>
		</methoddefinition>
	</classdefinition>
	<frame>
		<alternative>
			<case>
				<condition>if(sourcec.substring(0,
					compString.length()).equals(compString))</condition>
				<loop>
					<condition>while(!(curNode.getNodeName().equals("alternative")
						|| curNode.getNodeName().equals("source")))
					</condition>
					<alternative>
						<case>
							<condition>if(curNode.getNodeName().equals("alternative"))
							</condition>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
						</case>
					</alternative>
					<methodcall>
						<method>=</method>
					</methodcall>
					<methodcall>
						<method>getParentNode</method>
						<instance>curNode</instance>
					</methodcall>
				</loop>
			</case>
			<methodcall>
				<method>substring</method>
				<instance>sourcec</instance>
			</methodcall>
			<methodcall>
				<method>length</method>
				<instance>compString</instance>
			</methodcall>
			<methodcall>
				<method>trim</method>
				<instance>sourcec</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>document</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>document</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>curNode</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>switchCaseNode</instance>
			</methodcall>
			<methodcall>
				<method>goToTokenWithName</method>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>switchConditionNode</instance>
			</methodcall>
			<methodcall>
				<method>createTextNode</method>
				<instance>document</instance>
			</methodcall>
			<methodcall>
				<method>getData</method>
				<instance>caseRes</instance>
			</methodcall>
			<methodcall>
				<method>getSourceCode</method>
				<instance>caseRes</instance>
			</methodcall>
			<methodcall>
				<method>=</method>
			</methodcall>
			<methodcall>
				<method>getLastChild</method>
				<instance>curNode</instance>
			</methodcall>
		</alternative>
	</frame>
	<frame>
		<alternative>
			<case>
				<condition>if(sourcec.substring(0,
					compString.length()).equals(compString))</condition>
				<loop>
					<condition>while(!(curNode.getNodeName().equals("alternative")
						|| curNode.getNodeName().equals("source")))
					</condition>
					<alternative>
						<case>
							<condition>if(curNode.getNodeName().equals("alternative"))
							</condition>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
						</case>
					</alternative>
					<methodcall>
						<method>=</method>
					</methodcall>
					<methodcall>
						<method>getParentNode</method>
						<instance>curNode</instance>
					</methodcall>
				</loop>
			</case>
			<methodcall>
				<method>substring</method>
				<instance>sourcec</instance>
			</methodcall>
			<methodcall>
				<method>length</method>
				<instance>compString</instance>
			</methodcall>
			<methodcall>
				<method>trim</method>
				<instance>sourcec</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>document</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>document</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>curNode</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>switchCaseNode</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance />
			</methodcall>
			<methodcall>
				<method>createTextNode</method>
				<instance>document</instance>
			</methodcall>
			<alternative>
				<case>
					<condition>if(sourcec.substring(0, 1).equals(":"))</condition>
					<methodcall>
						<method>substring</method>
						<instance>sourcec</instance>
					</methodcall>
				</case>
				<case>
					<condition>else</condition>
					<methodcall>
						<method>out</method>
						<instance>System</instance>
					</methodcall>
				</case>
			</alternative>
			<methodcall>
				<method>=</method>
			</methodcall>
			<methodcall>
				<method>getLastChild</method>
				<instance>curNode</instance>
			</methodcall>
		</alternative>
	</frame>
	<frame>
		<methodcall>
			<method>substring</method>
			<instance>sourcec</instance>
		</methodcall>
		<methodcall>
			<method>length</method>
			<instance>compString</instance>
		</methodcall>
		<methodcall>
			<method>trim</method>
			<instance>sourcec</instance>
		</methodcall>
		<alternative>
			<case>
				<condition>if(sourcec.substring(0, 2).equals("if"))</condition>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>curNode</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>ifCaseNode</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>sourcec</instance>
				</methodcall>
				<methodcall>
					<method>goToTokenWithName</method>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>ifConditionNode</instance>
				</methodcall>
				<methodcall>
					<method>createTextNode</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>getData</method>
					<instance>ifRes</instance>
				</methodcall>
				<methodcall>
					<method>getSourceCode</method>
					<instance>ifRes</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>sourcec</instance>
				</methodcall>
				<methodcall>
					<method>trim</method>
					<instance>sourcec</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(sourcec.charAt(0) == '{')</condition>
						<methodcall>
							<method>substring</method>
							<instance>sourcec</instance>
						</methodcall>
						<methodcall>
							<method>=</method>
						</methodcall>
						<methodcall>
							<method>getLastChild</method>
							<instance>curNode</instance>
						</methodcall>
					</case>
				</alternative>
			</case>
			<case>
				<condition>else</condition>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>curNode</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>ifCaseNode</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>ifConditionNode</instance>
				</methodcall>
				<methodcall>
					<method>createTextNode</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>trim</method>
					<instance>sourcec</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(sourcec.charAt(0) == '{')</condition>
						<methodcall>
							<method>substring</method>
							<instance>sourcec</instance>
						</methodcall>
						<methodcall>
							<method>=</method>
						</methodcall>
						<methodcall>
							<method>getLastChild</method>
							<instance>curNode</instance>
						</methodcall>
						<methodcall>
							<method>out</method>
							<instance>System</instance>
						</methodcall>
						<methodcall>
							<method>getNodeName</method>
							<instance>curNode</instance>
						</methodcall>
					</case>
				</alternative>
			</case>
		</alternative>
	</frame>
	<frame>
		<methodcall>
			<method>goToTokenWithName</method>
		</methodcall>
		<methodcall>
			<method>getData</method>
			<instance>res</instance>
		</methodcall>
		<methodcall>
			<method>substring</method>
			<instance>)</instance>
		</methodcall>
		<alternative>
			<case>
				<condition>if(afterDo.trim().length() == 0)</condition>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>doWhileLoopNode</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>sourcec</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>doWhileConditionNode</instance>
				</methodcall>
				<methodcall>
					<method>createTextNode</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>curNode</instance>
				</methodcall>
				<methodcall>
					<method>trim</method>
					<instance>sourcec</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(sourcec.charAt(0) == '{')</condition>
						<methodcall>
							<method>substring</method>
							<instance>sourcec</instance>
						</methodcall>
						<methodcall>
							<method>=</method>
						</methodcall>
						<methodcall>
							<method>getLastChild</method>
							<instance>curNode</instance>
						</methodcall>
					</case>
					<case>
						<condition>else</condition>
						<methodcall>
							<method>out</method>
							<instance>System</instance>
						</methodcall>
					</case>
				</alternative>
			</case>
		</alternative>
	</frame>
	<frame>
		<methodcall>
			<method>substring</method>
			<instance>sourcec</instance>
		</methodcall>
		<methodcall>
			<method>createElement</method>
			<instance>document</instance>
		</methodcall>
		<methodcall>
			<method>appendChild</method>
			<instance>curNode</instance>
		</methodcall>
		<methodcall>
			<method>=</method>
		</methodcall>
		<methodcall>
			<method>getLastChild</method>
			<instance>curNode</instance>
		</methodcall>
	</frame>
	<frame>
		<methodcall>
			<method>substring</method>
			<instance>sourcec</instance>
		</methodcall>
		<methodcall>
			<method>=</method>
		</methodcall>
		<methodcall>
			<method>getParentNode</method>
			<instance>curNode</instance>
		</methodcall>
		<methodcall>
			<method>trim</method>
			<instance>sourcec</instance>
		</methodcall>
		<alternative>
			<case>
				<condition>if(curNode.getFirstChild().getTextContent().equals("else"))
				</condition>
				<methodcall>
					<method>=</method>
				</methodcall>
				<methodcall>
					<method>getParentNode</method>
					<instance>curNode</instance>
				</methodcall>
			</case>
			<case>
				<condition>else</condition>
			</case>
			<alternative>
				<case>
					<condition>if(curNode.getNodeName().equals("alternative")
						&amp;&amp; curNode.getFirstChild().getFirstChild()
						.getTextContent().substring(0, 6).equals("switch"))
					</condition>
					<alternative>
						<case>
							<condition>if(curSwitch != 0)</condition>
						</case>
					</alternative>
					<methodcall>
						<method>=</method>
					</methodcall>
					<methodcall>
						<method>getParentNode</method>
						<instance>curNode</instance>
					</methodcall>
				</case>
				<case>
					<condition>else</condition>
				</case>
				<alternative>
					<case>
						<condition>if(!(sourcec.substring(0, 4).equals("else")))
						</condition>
						<alternative>
							<case>
								<condition>if(curNode.getFirstChild().getTextContent().substring(0,
									2).equals("if"))</condition>
								<methodcall>
									<method>=</method>
								</methodcall>
								<methodcall>
									<method>getParentNode</method>
									<instance>curNode</instance>
								</methodcall>
							</case>
						</alternative>
					</case>
				</alternative>
			</alternative>
		</alternative>
		<alternative>
			<case>
				<condition>if(!done)</condition>
				<methodcall>
					<method>substring</method>
					<instance>sourcec</instance>
				</methodcall>
			</case>
		</alternative>
	</frame>
	<frame>
		<methodcall>
			<method>out</method>
			<instance>System</instance>
		</methodcall>
		<methodcall>
			<method>getCause</method>
			<instance>e</instance>
		</methodcall>
		<alternative>
			<case>
				<condition>if(sourcec.length() &lt;= 10)</condition>
				<loop>
					<condition>for(int i = 0; i &lt; sourcec.length(); i++)</condition>
					<alternative>
						<case>
							<condition>if(sourcec.charAt(i) != ';')</condition>
						</case>
					</alternative>
				</loop>
			</case>
		</alternative>
		<alternative>
			<case>
				<condition>if(!sourceEnd)</condition>
			</case>
			<case>
				<condition>else</condition>
			</case>
		</alternative>
		<methodcall>
			<method>out</method>
			<instance>System</instance>
		</methodcall>
	</frame>
	<frame>
		<methodcall>
			<method>out</method>
			<instance>System</instance>
		</methodcall>
		<methodcall>
			<method>toString</method>
			<instance>e</instance>
		</methodcall>
		<methodcall>
			<method>out</method>
			<instance>System</instance>
		</methodcall>
		<methodcall>
			<method>substring</method>
			<instance>sourcec</instance>
		</methodcall>
		<methodcall>
			<method>goToTokenWithName</method>
		</methodcall>
		<methodcall>
			<method>getSourceCode</method>
			<instance>excRes</instance>
		</methodcall>
		<methodcall>
			<method>}catch</method>
		</methodcall>
		<frame>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>toString</method>
				<instance>e</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>substring</method>
				<instance>sourcec</instance>
			</methodcall>
		</frame>
	</frame>
	<frame>
		<methodcall>
			<method>newTransformer</method>
			<instance>tf</instance>
		</methodcall>
		<instance>
			<name>writer</name>
			<class>StringWriter</class>
		</instance>
		<methodcall>
			<method>transform</method>
			<instance>transformer</instance>
		</methodcall>
		<methodcall>
			<method>DOMSource</method>
		</methodcall>
		<methodcall>
			<method>StreamResult</method>
		</methodcall>
		<methodcall>
			<method>getBuffer</method>
			<instance>writer</instance>
		</methodcall>
		<methodcall>
			<method>toString</method>
			<instance>)</instance>
		</methodcall>
		<methodcall>
			<method>out</method>
			<instance>System</instance>
		</methodcall>
		<methodcall>
			<method>getProperty</method>
			<instance>home=System</instance>
		</methodcall>
		<instance>
			<name>pumlDir</name>
			<class>File</class>
		</instance>
		<alternative>
			<case>
				<condition>if(!pumlDir.exists())</condition>
				<frame>
					<methodcall>
						<method>mkdir</method>
						<instance>pumlDir</instance>
					</methodcall>
				</frame>
			</case>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame />
		</alternative>
	</frame>
	<frame>
		<instance>
			<name>fileWriter</name>
			<class>FileWriter</class>
		</instance>
		<instance>
			<name>printWriter</name>
			<class>PrintWriter</class>
		</instance>
		<methodcall>
			<method>print</method>
			<instance>printWriter</instance>
		</methodcall>
		<methodcall>
			<method>close</method>
			<instance>printWriter</instance>
		</methodcall>
	</frame>
	<frame>
		<methodcall>
			<method>printStackTrace</method>
			<instance>e</instance>
		</methodcall>
	</frame>
	<frame>
		<methodcall>
			<method>buildTree</method>
		</methodcall>
		<methodcall>
			<method>get</method>
			<instance>sourceCode</instance>
		</methodcall>
	</frame>
	<frame>
		<methodcall>
			<method>printStackTrace</method>
			<instance>e</instance>
		</methodcall>
	</frame>
	<interfacedefinition>
		<name>ParserIf</name>
		<compositions />
		<aggregations />
		<methodcall>
			<method>parse</method>
		</methodcall>
		<methodcall>
			<method>getParsingResult</method>
		</methodcall>
	</interfacedefinition>
	<classdefinition>
		<name>SequenceDiagramGenerator</name>
		<compositions>
			<entry>XmlHelperMethods</entry>
			<entry>ArrayList&lt;ArrayList&lt;String&gt;&gt;</entry>
			<entry>String</entry>
			<entry>ArrayList&lt;String&gt;</entry>
		</compositions>
		<aggregations />
		<instance>
			<name>xmlHM</name>
			<class>XmlHelperMethods</class>
		</instance>
		<instance>
			<name>calledMethodsList</name>
			<class>ArrayList&lt;ArrayList&lt;String&gt;&gt;</class>
		</instance>
		<instance>
			<name>classesWithMethodsList</name>
			<class>ArrayList&lt;ArrayList&lt;String&gt;&gt;</class>
		</instance>
		<methoddefinition>
			<name>createDiagram</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>parsedData</name>
				</entry>
				<entry>
					<type>String</type>
					<name>epClass</name>
				</entry>
				<entry>
					<type>String</type>
					<name>epMethod</name>
				</entry>
			</parameters>
			<result>Document</result>
			<methodcall>
				<method>newInstance</method>
				<instance>DocumentBuilderFactory</instance>
			</methodcall>
			<methodcall>
				<method>newDocumentBuilder</method>
				<instance>docFactory</instance>
			</methodcall>
			<methodcall>
				<method>newDocument</method>
				<instance>docBuilder</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>seqDiagram</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>seqDiagram</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>seqDiagram</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>root</instance>
			</methodcall>
			<methodcall>
				<method>createList</method>
			</methodcall>
			<methodcall>
				<method>listClasses</method>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>seqDiagram</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>seq</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>seqDiagram</instance>
			</methodcall>
			<methodcall>
				<method>setTextContent</method>
				<instance>epClass1</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>entrypoint</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>seqDiagram</instance>
			</methodcall>
			<methodcall>
				<method>setTextContent</method>
				<instance>epMethod1</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>entrypoint</instance>
			</methodcall>
			<methodcall>
				<method>listMethoddef</method>
			</methodcall>
			<methodcall>
				<method>deleteFrame</method>
			</methodcall>
			<methodcall>
				<method>addClassesToInstances</method>
			</methodcall>
			<methodcall>
				<method>deleteInstancesNotInMethodcalls</method>
			</methodcall>
			<methodcall>
				<method>addType</method>
			</methodcall>
			<methodcall>
				<method>deleteUnusedClassesAndMethods</method>
			</methodcall>
			<methodcall>
				<method>removeComments</method>
				<instance>xmlHM</instance>
			</methodcall>
			<methodcall>
				<method>removeWhitespace</method>
				<instance>xmlHM</instance>
			</methodcall>
			<methodcall>
				<method>writeToFile</method>
				<instance>xmlHM</instance>
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>listClasses</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>parsedData</name>
				</entry>
				<entry>
					<type>Document</type>
					<name>seqDiagram</name>
				</entry>
				<entry>
					<type>Element</type>
					<name>seq</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>createElement</method>
				<instance>seqDiagram</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>seq</instance>
			</methodcall>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; cList.getLength(); i++)</condition>
				<methodcall>
					<method>item</method>
					<instance>cList</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>i)</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>seqDiagram</instance>
				</methodcall>
				<methodcall>
					<method>setTextContent</method>
					<instance>entry</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classes</instance>
				</methodcall>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>listMethoddef</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>parsedData</name>
				</entry>
				<entry>
					<type>Document</type>
					<name>seqDiagram</name>
				</entry>
				<entry>
					<type>Element</type>
					<name>seq</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; mList.getLength(); i++)</condition>
				<methodcall>
					<method>appendChild</method>
					<instance>seq</instance>
				</methodcall>
				<methodcall>
					<method>importNode</method>
					<instance>seqDiagram</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>mList</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>seqDiagram</instance>
				</methodcall>
				<methodcall>
					<method>getList</method>
					<instance>xmlHM</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>list</instance>
				</methodcall>
				<methodcall>
					<method>getList</method>
					<instance>xmlHM</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>mList</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>)</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>0)</instance>
				</methodcall>
				<methodcall>
					<method>setTextContent</method>
					<instance>classTag</instance>
				</methodcall>
				<methodcall>
					<method>insertBefore</method>
					<instance>seqMethodNode</instance>
				</methodcall>
				<methodcall>
					<method>getFirstChild</method>
					<instance>seqMethodNode</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>list</instance>
				</methodcall>
				<methodcall>
					<method>getChildNodes</method>
					<instance>node</instance>
				</methodcall>
				<loop>
					<condition>for(int j = 0; j &lt; childs.getLength(); j++)
					</condition>
					<methodcall>
						<method>item</method>
						<instance>childs</instance>
					</methodcall>
					<alternative>
						<case>
							<condition>if((child.getNodeName().equals("parameters") ||
								child.getNodeName().equals("result")
								|| child.getNodeName().equals("access")))
							</condition>
							<methodcall>
								<method>removeChild</method>
								<instance>node</instance>
							</methodcall>
						</case>
					</alternative>
				</loop>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>deleteFrame</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>seqDiagram</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; list.getLength(); i++)</condition>
				<methodcall>
					<method>delNode</method>
					<instance>xmlHM</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>list</instance>
				</methodcall>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>addClassesToInstances</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>parsedData</name>
				</entry>
				<entry>
					<type>Document</type>
					<name>seqDiagram</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>handleLocalInstances</method>
			</methodcall>
			<methodcall>
				<method>createInstanceList</method>
			</methodcall>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; methodcalls.getLength(); i++)
				</condition>
				<methodcall>
					<method>item</method>
					<instance>methodcalls</instance>
				</methodcall>
				<methodcall>
					<method>getChildNodes</method>
					<instance>i)</instance>
				</methodcall>
				<loop>
					<condition>for(int j = 0; j &lt; mchildnodes.getLength(); j++)
					</condition>
					<alternative>
						<case>
							<condition>if(mchildnodes.item(j).getNodeName().equals("instance"))
							</condition>
							<alternative>
								<case>
									<condition>if(!xmlHM.hasChildwithName(mchildnodes.item(j).getParentNode(),
										"class"))</condition>
									<methodcall>
										<method>item</method>
										<instance>mchildnodes</instance>
									</methodcall>
									<methodcall>
										<method>getTextContent</method>
										<instance>j)</instance>
									</methodcall>
									<methodcall>
										<method>findClassofInstance</method>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>seqDiagram</instance>
									</methodcall>
									<methodcall>
										<method>setTextContent</method>
										<instance>classTag</instance>
									</methodcall>
									<methodcall>
										<method>item</method>
										<instance>methodcalls</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>i)</instance>
									</methodcall>
								</case>
							</alternative>
						</case>
					</alternative>
				</loop>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>createInstanceList</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>parsedData</name>
				</entry>
			</parameters>
			<result>ArrayList&lt;ArrayList&lt;String&gt;&gt;</result>
			<instance>
				<name>instanceList</name>
				<class>ArrayList&lt;ArrayList&lt;String&gt;&gt;</class>
			</instance>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; cList.getLength(); i++)</condition>
				<methodcall>
					<method>add</method>
					<instance>instanceList</instance>
				</methodcall>
				<methodcall>
					<method>ArrayList&lt;String&gt;</method>
				</methodcall>
				<methodcall>
					<method>getChildwithName</method>
					<instance>xmlHM</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>cList</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>)</instance>
				</methodcall>
				<methodcall>
					<method>get</method>
					<instance>instanceList</instance>
				</methodcall>
				<methodcall>
					<method>add</method>
					<instance>i)</instance>
				</methodcall>
			</loop>
			<loop>
				<condition>for(int i = 0; i &lt; cList.getLength(); i++)</condition>
				<methodcall>
					<method>item</method>
					<instance>cList</instance>
				</methodcall>
				<methodcall>
					<method>getChildNodes</method>
					<instance>i)</instance>
				</methodcall>
				<loop>
					<condition>for(int j = 0; j &lt; cuList.getLength(); j++)
					</condition>
					<alternative>
						<case>
							<condition>if(cuList.item(j).getNodeName().equals("instance"))
							</condition>
							<instance>
								<name>iname</name>
								<class>String</class>
							</instance>
							<instance>
								<name>cname</name>
								<class>String</class>
							</instance>
							<methodcall>
								<method>getChildwithName</method>
								<instance>xmlHM</instance>
							</methodcall>
							<methodcall>
								<method>item</method>
								<instance>cuList</instance>
							</methodcall>
							<methodcall>
								<method>getTextContent</method>
								<instance>)</instance>
							</methodcall>
							<methodcall>
								<method>getChildwithName</method>
								<instance>xmlHM</instance>
							</methodcall>
							<methodcall>
								<method>item</method>
								<instance>cuList</instance>
							</methodcall>
							<methodcall>
								<method>getTextContent</method>
								<instance>)</instance>
							</methodcall>
							<methodcall>
								<method>addToInstanceList</method>
							</methodcall>
						</case>
					</alternative>
				</loop>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>addToInstanceList</name>
			<parameters>
				<entry>
					<type>ArrayList&lt;ArrayList&lt;String&gt;&gt;</type>
					<name>instanceList</name>
				</entry>
				<entry>
					<type>String</type>
					<name>iname</name>
				</entry>
				<entry>
					<type>String</type>
					<name>cname</name>
				</entry>
			</parameters>
			<result>ArrayList&lt;ArrayList&lt;String&gt;&gt;</result>
			<loop>
				<condition>for(int i = 0; i &lt; instanceList.size(); i++)
				</condition>
				<methodcall>
					<method>get</method>
					<instance>instanceList</instance>
				</methodcall>
				<methodcall>
					<method>get</method>
					<instance>i)</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(cname.equals(classname))</condition>
						<methodcall>
							<method>get</method>
							<instance>instanceList</instance>
						</methodcall>
						<methodcall>
							<method>add</method>
							<instance>i)</instance>
						</methodcall>
					</case>
				</alternative>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>findClassofInstance</name>
			<parameters>
				<entry>
					<type>ArrayList&lt;ArrayList&lt;String&gt;&gt;</type>
					<name>instanceList</name>
				</entry>
				<entry>
					<type>String</type>
					<name>iname</name>
				</entry>
			</parameters>
			<result>String</result>
			<loop>
				<condition>for(int i = 0; i &lt; instanceList.size(); i++)
				</condition>
				<alternative>
					<case>
						<condition>if(!(instanceList.get(i).size() == 1))</condition>
						<loop>
							<condition>for(int j = 0; j &lt; instanceList.get(i).size(); j++)
							</condition>
							<alternative>
								<case>
									<condition>if(instanceList.get(i).get(j).equals(iname))
									</condition>
									<methodcall>
										<method>get</method>
										<instance>instanceList</instance>
									</methodcall>
									<methodcall>
										<method>get</method>
										<instance>i)</instance>
									</methodcall>
								</case>
							</alternative>
						</loop>
					</case>
				</alternative>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>deleteInstancesNotInMethodcalls</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>doc</name>
				</entry>
			</parameters>
			<result>Document</result>
			<frame>
				<methodcall>
					<method>getList</method>
					<instance>xmlHM</instance>
				</methodcall>
				<loop>
					<condition>for(int i = 0; i &lt; iList.getLength(); i++)
					</condition>
					<alternative>
						<case>
							<condition>if(!(iList.item(i).getParentNode().getNodeName().equals("methodcall")
								||
								iList.item(i).getParentNode().getNodeName().equals("classdefinition")))
							</condition>
							<methodcall>
								<method>item</method>
								<instance>iList</instance>
							</methodcall>
							<methodcall>
								<method>getParentNode</method>
								<instance>i)</instance>
							</methodcall>
							<methodcall>
								<method>removeChild</method>
								<instance>)</instance>
							</methodcall>
							<methodcall>
								<method>item</method>
								<instance>iList</instance>
							</methodcall>
						</case>
					</alternative>
				</loop>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
		</methoddefinition>
		<methoddefinition>
			<name>handleLocalInstances</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>doc</name>
				</entry>
			</parameters>
			<result>Document</result>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; iList.getLength(); i++)</condition>
				<alternative>
					<case>
						<condition>if(!(iList.item(i).getParentNode().getNodeName().equals("methodcall")
							||
							iList.item(i).getParentNode().getNodeName().equals("classdefinition")))
						</condition>
						<methodcall>
							<method>item</method>
							<instance>iList</instance>
						</methodcall>
						<methodcall>
							<method>getChildwithName</method>
							<instance>xmlHM</instance>
						</methodcall>
						<methodcall>
							<method>getTextContent</method>
							<instance>)</instance>
						</methodcall>
						<methodcall>
							<method>getChildwithName</method>
							<instance>xmlHM</instance>
						</methodcall>
						<methodcall>
							<method>getTextContent</method>
							<instance>)</instance>
						</methodcall>
						<methodcall>
							<method>recursiveHandlelocalInstances</method>
						</methodcall>
					</case>
				</alternative>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>recursiveHandlelocalInstances</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>doc</name>
				</entry>
				<entry>
					<type>Node</type>
					<name>currentNode</name>
				</entry>
				<entry>
					<type>String</type>
					<name>instanceName</name>
				</entry>
				<entry>
					<type>String</type>
					<name>instanceClass</name>
				</entry>
			</parameters>
			<result>void</result>
			<loop>
				<condition>while(!(current.getNextSibling() == null))</condition>
				<loop>
					<condition>while(current.getNodeType() != Node.ELEMENT_NODE ||
						current.getNodeName().equals("instance"))</condition>
					<methodcall>
						<method>getNextSibling</method>
						<instance>current</instance>
					</methodcall>
				</loop>
				<alternative>
					<case>
						<condition>if(current.getNodeName().equals("methodcall"))
						</condition>
						<methodcall>
							<method>getChildwithName</method>
							<instance>xmlHM</instance>
						</methodcall>
						<alternative>
							<case>
								<condition>if(instanceNode.getTextContent().equals(instanceName)
									&amp;&amp;
									!xmlHM.hasChildwithName(instanceNode.getParentNode(),
									"validity"))</condition>
								<methodcall>
									<method>createElement</method>
									<instance>doc</instance>
								</methodcall>
								<methodcall>
									<method>setTextContent</method>
									<instance>classTag</instance>
								</methodcall>
								<methodcall>
									<method>getParentNode</method>
									<instance>instanceNode</instance>
								</methodcall>
								<methodcall>
									<method>appendChild</method>
									<instance>)</instance>
								</methodcall>
							</case>
						</alternative>
					</case>
				</alternative>
				<alternative>
					<case>
						<condition>if(current.hasChildNodes() &amp;&amp;
							!current.getNodeName().equals("methodcall"))</condition>
						<methodcall>
							<method>getChildNodes</method>
							<instance>current</instance>
						</methodcall>
						<loop>
							<condition>for(int k = 0; k &lt; cnodes.getLength(); k++)
							</condition>
							<methodcall>
								<method>recursiveHandlelocalInstances</method>
							</methodcall>
						</loop>
					</case>
				</alternative>
				<methodcall>
					<method>getNextSibling</method>
					<instance>current</instance>
				</methodcall>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>addType</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>parsedData</name>
				</entry>
				<entry>
					<type>Document</type>
					<name>seqDiagram</name>
				</entry>
				<entry>
					<type>Element</type>
					<name>seq</name>
				</entry>
				<entry>
					<type>String</type>
					<name>epClass</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<loop>
				<condition>for(int m = 0; m &lt; seqMethodDefList.getLength(); m++)
				</condition>
				<methodcall>
					<method>item</method>
					<instance>seqMethodDefList</instance>
				</methodcall>
				<methodcall>
					<method>getList</method>
					<instance>xmlHM</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>)</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>0)</instance>
				</methodcall>
				<methodcall>
					<method>getList</method>
					<instance>xmlHM</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>)</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>0)</instance>
				</methodcall>
				<methodcall>
					<method>getList</method>
					<instance>xmlHM</instance>
				</methodcall>
				<loop>
					<condition>for(int n = 0; n &lt; seqMethodCallList.getLength();
						n++)</condition>
					<methodcall>
						<method>item</method>
						<instance>seqMethodCallList</instance>
					</methodcall>
					<methodcall>
						<method>getList</method>
						<instance>xmlHM</instance>
					</methodcall>
					<methodcall>
						<method>item</method>
						<instance>)</instance>
					</methodcall>
					<methodcall>
						<method>getList</method>
						<instance>xmlHM</instance>
					</methodcall>
					<methodcall>
						<method>item</method>
						<instance>)</instance>
					</methodcall>
					<methodcall>
						<method>getList</method>
						<instance>xmlHM</instance>
					</methodcall>
					<methodcall>
						<method>item</method>
						<instance>)</instance>
					</methodcall>
					<methodcall>
						<method>getList</method>
						<instance>xmlHM</instance>
					</methodcall>
					<methodcall>
						<method>item</method>
						<instance>)</instance>
					</methodcall>
					<methodcall>
						<method>getTextContent</method>
						<instance>0)</instance>
					</methodcall>
					<alternative>
						<case>
							<condition>if(classNode == null)</condition>
						</case>
						<case>
							<condition>else</condition>
							<alternative>
								<case>
									<condition>if(classNode.getTextContent().equals(" "))
									</condition>
								</case>
								<case>
									<condition>else</condition>
									<methodcall>
										<method>getTextContent</method>
										<instance>classNode</instance>
									</methodcall>
								</case>
							</alternative>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(instanceNode != null)</condition>
							<methodcall>
								<method>getTextContent</method>
								<instance>instanceNode</instance>
							</methodcall>
						</case>
					</alternative>
					<methodcall>
						<method>createElement</method>
						<instance>seqDiagram</instance>
					</methodcall>
					<loop>
						<condition>for(int i = 0; i &lt; calledMethodsList.size(); i++)
						</condition>
						<methodcall>
							<method>get</method>
							<instance>calledMethodsList</instance>
						</methodcall>
						<methodcall>
							<method>get</method>
							<instance>i)</instance>
						</methodcall>
						<methodcall>
							<method>get</method>
							<instance>calledMethodsList</instance>
						</methodcall>
						<methodcall>
							<method>get</method>
							<instance>i)</instance>
						</methodcall>
						<methodcall>
							<method>get</method>
							<instance>calledMethodsList</instance>
						</methodcall>
						<methodcall>
							<method>get</method>
							<instance>i)</instance>
						</methodcall>
						<alternative>
							<case>
								<condition>if(calledMethod.equals(calledEl) &amp;&amp;
									calledClass.equals(calledCl) &amp;&amp;
									calledInstance.equals(calledIn)
									&amp;&amp; a == 0 &amp;&amp; (typeNode == null))</condition>
								<methodcall>
									<method>setTextContent</method>
									<instance>type</instance>
								</methodcall>
								<methodcall>
									<method>appendChild</method>
									<instance>seqMethodCallNode</instance>
								</methodcall>
							</case>
						</alternative>
					</loop>
					<methodcall>
						<method>add</method>
						<instance>calledMethodsList</instance>
					</methodcall>
					<methodcall>
						<method>ArrayList&lt;String&gt;</method>
					</methodcall>
					<methodcall>
						<method>get</method>
						<instance>calledMethodsList</instance>
					</methodcall>
					<methodcall>
						<method>add</method>
						<instance>e)</instance>
					</methodcall>
					<methodcall>
						<method>get</method>
						<instance>calledMethodsList</instance>
					</methodcall>
					<methodcall>
						<method>add</method>
						<instance>e)</instance>
					</methodcall>
					<methodcall>
						<method>get</method>
						<instance>calledMethodsList</instance>
					</methodcall>
					<methodcall>
						<method>add</method>
						<instance>e)</instance>
					</methodcall>
					<alternative>
						<case>
							<condition>if(classNode == null ||
								!(classNode.getTextContent().equals(" ")))</condition>
							<loop>
								<condition>for(int i = 0; i &lt; classesWithMethodsList.size();
									i++)</condition>
								<methodcall>
									<method>get</method>
									<instance>classesWithMethodsList</instance>
								</methodcall>
								<methodcall>
									<method>size</method>
									<instance>i)</instance>
								</methodcall>
								<loop>
									<condition>for(int j = 0; j &lt;
										classesWithMethodsList.get(i).size(); j++)</condition>
									<alternative>
										<case>
											<condition>if(!calledMethod.equals(classesWithMethodsList.get(i).get(j)))
											</condition>
										</case>
									</alternative>
								</loop>
							</loop>
						</case>
						<alternative>
							<case>
								<condition>if(b == c)</condition>
								<methodcall>
									<method>setTextContent</method>
									<instance>type</instance>
								</methodcall>
								<methodcall>
									<method>appendChild</method>
									<instance>seqMethodCallNode</instance>
								</methodcall>
							</case>
						</alternative>
					</alternative>
					<case>
						<condition>else</condition>
					</case>
					<alternative>
						<case>
							<condition>if(typeNode == null)</condition>
							<methodcall>
								<method>setTextContent</method>
								<instance>type</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>seqMethodCallNode</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(calledMethod.equals(currentMethod) &amp;&amp;
								calledClass.equals(currentClass))</condition>
							<alternative>
								<case>
									<condition>if((instanceNode == null) &amp;&amp; (classNode ==
										null))</condition>
									<loop>
										<condition>for(int i = 0; i &lt;
											classesWithMethodsList.size(); i++)</condition>
										<alternative>
											<case>
												<condition>if(classesWithMethodsList.get(i).get(0).equals(epClass))
												</condition>
												<loop>
													<condition>for(int j = 0; j &lt;
														classesWithMethodsList.get(i).size(); j++)</condition>
													<alternative>
														<case>
															<condition>if(calledMethod.equals(classesWithMethodsList.get(i).get(j))
																&amp;&amp; (d == 0))</condition>
															<methodcall>
																<method>setTextContent</method>
																<instance>type</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>seqMethodCallNode</instance>
															</methodcall>
														</case>
													</alternative>
												</loop>
											</case>
										</alternative>
									</loop>
								</case>
							</alternative>
						</case>
					</alternative>
					<case>
						<condition>else</condition>
						<methodcall>
							<method>recursiveLoop</method>
						</methodcall>
					</case>
				</loop>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>recursiveLoop</name>
			<parameters>
				<entry>
					<type>Element</type>
					<name>type</name>
				</entry>
				<entry>
					<type>String</type>
					<name>currentMethod</name>
				</entry>
				<entry>
					<type>NodeList</type>
					<name>seqMethodDefList</name>
				</entry>
				<entry>
					<type>int</type>
					<name>m</name>
				</entry>
				<entry>
					<type>Node</type>
					<name>typeNode</name>
				</entry>
			</parameters>
			<result>void</result>
			<alternative>
				<case>
					<condition>if(m &lt; seqMethodDefList.getLength())</condition>
					<methodcall>
						<method>item</method>
						<instance>seqMethodDefList</instance>
					</methodcall>
					<methodcall>
						<method>getList</method>
						<instance>xmlHM</instance>
					</methodcall>
					<loop>
						<condition>for(int j = 0; j &lt; callList.getLength(); j++)
						</condition>
						<methodcall>
							<method>item</method>
							<instance>callList</instance>
						</methodcall>
						<methodcall>
							<method>getList</method>
							<instance>xmlHM</instance>
						</methodcall>
						<methodcall>
							<method>item</method>
							<instance>)</instance>
						</methodcall>
						<methodcall>
							<method>getTextContent</method>
							<instance>0)</instance>
						</methodcall>
						<alternative>
							<case>
								<condition>if(called.equals(currentMethod))</condition>
								<alternative>
									<case>
										<condition>if(typeNode == null ||
											typeNode.getNodeName().equals("type"))</condition>
										<methodcall>
											<method>setTextContent</method>
											<instance>type</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>callNode</instance>
										</methodcall>
									</case>
								</alternative>
							</case>
							<case>
								<condition>else</condition>
								<methodcall>
									<method>getList</method>
									<instance>xmlHM</instance>
								</methodcall>
								<methodcall>
									<method>item</method>
									<instance>)</instance>
								</methodcall>
								<methodcall>
									<method>recursiveLoop</method>
								</methodcall>
							</case>
						</alternative>
					</loop>
				</case>
			</alternative>
		</methoddefinition>
		<methoddefinition>
			<name>createList</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>parsedData</name>
				</entry>
				<entry>
					<type>ArrayList&lt;ArrayList&lt;String&gt;&gt;</type>
					<name>classesWithMethodsList</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; cList.getLength(); i++)</condition>
				<methodcall>
					<method>add</method>
					<instance>classesWithMethodsList</instance>
				</methodcall>
				<methodcall>
					<method>ArrayList&lt;String&gt;</method>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>cList</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>i)</instance>
				</methodcall>
				<methodcall>
					<method>get</method>
					<instance>classesWithMethodsList</instance>
				</methodcall>
				<methodcall>
					<method>add</method>
					<instance>i)</instance>
				</methodcall>
				<loop>
					<condition>for(int j = 0; j &lt; mList.getLength(); j++)
					</condition>
					<methodcall>
						<method>item</method>
						<instance>mList</instance>
					</methodcall>
					<methodcall>
						<method>getList</method>
						<instance>xmlHM</instance>
					</methodcall>
					<methodcall>
						<method>item</method>
						<instance>)</instance>
					</methodcall>
					<methodcall>
						<method>getTextContent</method>
						<instance>0)</instance>
					</methodcall>
					<methodcall>
						<method>getTextContent</method>
						<instance>mNode</instance>
					</methodcall>
					<alternative>
						<case>
							<condition>if(tmpParent == tmpClass)</condition>
							<methodcall>
								<method>get</method>
								<instance>classesWithMethodsList</instance>
							</methodcall>
							<methodcall>
								<method>add</method>
								<instance>i)</instance>
							</methodcall>
						</case>
					</alternative>
				</loop>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>deleteUnusedClassesAndMethods</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>Doc</name>
				</entry>
				<entry>
					<type>String</type>
					<name>epClass</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>deleteUnusedClasses</method>
			</methodcall>
			<methodcall>
				<method>deleteUnusedMethods</method>
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>deleteUnusedClasses</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>Doc</name>
				</entry>
				<entry>
					<type>String</type>
					<name>epClass</name>
				</entry>
			</parameters>
			<result>void</result>
			<instance>
				<name>usedClasses</name>
				<class>ArrayList&lt;String&gt;</class>
			</instance>
			<methodcall>
				<method>add</method>
				<instance>usedClasses</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; calledMethodsList.size(); i++)
				</condition>
				<methodcall>
					<method>get</method>
					<instance>calledMethodsList</instance>
				</methodcall>
				<methodcall>
					<method>get</method>
					<instance>i)</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if((!usedClasses.contains(currentClassName)) &amp;&amp;
							!currentClassName.equals(" "))</condition>
						<methodcall>
							<method>add</method>
							<instance>usedClasses</instance>
						</methodcall>
					</case>
				</alternative>
			</loop>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<loop>
				<condition>for(int j = 0; j &lt; classesinDoc.getLength(); j++)
				</condition>
				<methodcall>
					<method>item</method>
					<instance>classesinDoc</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>currentClass</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(!usedClasses.contains(classname))</condition>
						<methodcall>
							<method>getParentNode</method>
							<instance>currentClass</instance>
						</methodcall>
						<methodcall>
							<method>removeChild</method>
							<instance>)</instance>
						</methodcall>
					</case>
				</alternative>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>deleteUnusedMethods</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>Doc</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>getList</method>
				<instance>xmlHM</instance>
			</methodcall>
			<loop>
				<condition>for(int k = 0; k &lt; methodsinDoc.getLength(); k++)
				</condition>
				<methodcall>
					<method>item</method>
					<instance>methodsinDoc</instance>
				</methodcall>
				<methodcall>
					<method>getChildwithName</method>
					<instance>xmlHM</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>)</instance>
				</methodcall>
				<methodcall>
					<method>getChildwithName</method>
					<instance>xmlHM</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>)</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(!methodWasUsed(methodName, methodClass))</condition>
						<methodcall>
							<method>getParentNode</method>
							<instance>currentMethod</instance>
						</methodcall>
						<methodcall>
							<method>removeChild</method>
							<instance>)</instance>
						</methodcall>
					</case>
				</alternative>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>methodWasUsed</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>methodName</name>
				</entry>
				<entry>
					<type>String</type>
					<name>methodClass</name>
				</entry>
			</parameters>
			<result>boolean</result>
			<loop>
				<condition>for(int i = 0; i &lt; calledMethodsList.size(); i++)
				</condition>
				<methodcall>
					<method>get</method>
					<instance>calledMethodsList</instance>
				</methodcall>
				<methodcall>
					<method>get</method>
					<instance>i)</instance>
				</methodcall>
				<methodcall>
					<method>get</method>
					<instance>calledMethodsList</instance>
				</methodcall>
				<methodcall>
					<method>get</method>
					<instance>i)</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(currentMethodName.equals(methodName) &amp;&amp;
							currentMethodClass.equals(methodClass))</condition>
					</case>
				</alternative>
			</loop>
		</methoddefinition>
	</classdefinition>
	<classdefinition>
		<name>ParserCPP</name>
		<implements>
			<entry>ParserIf</entry>
		</implements>
		<compositions>
			<entry>XmlHelperMethods</entry>
		</compositions>
		<aggregations />
		<instance>
			<name>xmlHelper</name>
			<class>XmlHelperMethods</class>
		</instance>
		<methoddefinition>
			<name>getDocument</name>
			<result>Document</result>
		</methoddefinition>
		<methoddefinition>
			<name>setDocument</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>document</name>
				</entry>
			</parameters>
			<result>void</result>
		</methoddefinition>
		<classdefinition>
			<name>TokenResult</name>
			<compositions />
			<aggregations>
				<entry>int</entry>
				<entry>String</entry>
				<methodcall>
					<method>super</method>
				</methodcall>
			</aggregations>
			<methoddefinition>
				<name>getFoundToken</name>
				<result>int</result>
			</methoddefinition>
			<methoddefinition>
				<name>setFoundToken</name>
				<parameters>
					<entry>
						<type>int</type>
						<name>foundToken</name>
					</entry>
				</parameters>
				<result>void</result>
			</methoddefinition>
			<methoddefinition>
				<name>getData</name>
				<result>String</result>
			</methoddefinition>
			<methoddefinition>
				<name>setData</name>
				<parameters>
					<entry>
						<type>String</type>
						<name>data</name>
					</entry>
				</parameters>
				<result>void</result>
			</methoddefinition>
			<methoddefinition>
				<name>getSourceCode</name>
				<result>String</result>
			</methoddefinition>
			<methoddefinition>
				<name>setSourceCode</name>
				<parameters>
					<entry>
						<type>String</type>
						<name>sourceCode</name>
					</entry>
				</parameters>
				<result>void</result>
			</methoddefinition>
		</classdefinition>
		<methoddefinition>
			<name>goToTokenWithName</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>source</name>
				</entry>
				<entry>
					<type>String[]</type>
					<name>name</name>
				</entry>
			</parameters>
			<result>TokenResult</result>
			<loop>
				<condition>for(int i = 0; i &lt; name.length; i++)</condition>
				<alternative>
					<case>
						<condition>if(source.substring(0,
							name[i].length()).equals(name[i]))</condition>
					</case>
				</alternative>
			</loop>
			<loop>
				<condition>while(!found &amp;&amp; !source.isEmpty())</condition>
				<methodcall>
					<method>substring</method>
					<instance>source</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>source</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(source.isEmpty())</condition>
					</case>
				</alternative>
				<loop>
					<condition>for(int i = 0; i &lt; name.length; i++)</condition>
					<alternative>
						<case>
							<condition>if(source.substring(0,
								name[i].length()).equals(name[i]))</condition>
						</case>
					</alternative>
				</loop>
			</loop>
			<methodcall>
				<method>trim</method>
				<instance>source</instance>
			</methodcall>
			<methodcall>
				<method>TokenResult</method>
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>buildTree</name>
			<parameters>
				<entry>
					<type>ArrayList&lt;String&gt;</type>
					<name>code</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>get</method>
				<instance>code</instance>
			</methodcall>
			<methodcall>
				<method>get</method>
				<instance>code</instance>
			</methodcall>
			<methodcall>
				<method>newInstance</method>
				<instance>DocumentBuilderFactory</instance>
			</methodcall>
			<methodcall>
				<method>newDocumentBuilder</method>
				<instance>documentFactory</instance>
			</methodcall>
			<methodcall>
				<method>newDocument</method>
				<instance>documentBuilder</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>document</instance>
			</methodcall>
			<methodcall>
				<method>appendChild</method>
				<instance>document</instance>
			</methodcall>
			<methodcall>
				<method>indexOf</method>
				<instance>sourceCodeHPP</instance>
			</methodcall>
			<loop>
				<condition>while(index &gt;=0)</condition>
				<methodcall>
					<method>min</method>
					<instance>Math</instance>
				</methodcall>
				<methodcall>
					<method>indexOf</method>
					<instance>sourceCodeHPP</instance>
				</methodcall>
				<methodcall>
					<method>length</method>
					<instance>keyword</instance>
				</methodcall>
				<methodcall>
					<method>indexOf</method>
					<instance>sourceCodeHPP</instance>
				</methodcall>
				<methodcall>
					<method>length</method>
					<instance>keyword</instance>
				</methodcall>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>sourceCodeHPP</instance>
				</methodcall>
				<methodcall>
					<method>length</method>
					<instance>keyword</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>root</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classdefinition</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>name</instance>
				</methodcall>
				<methodcall>
					<method>createTextNode</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>sourceCodeHPP</instance>
				</methodcall>
				<methodcall>
					<method>length</method>
					<instance>keyword</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classdefinition</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classdefinition</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classdefinition</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classdefinition</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classdefinition</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classdefinition</instance>
				</methodcall>
				<methodcall>
					<method>indexOf</method>
					<instance>sourceCodeHPP</instance>
				</methodcall>
				<methodcall>
					<method>length</method>
					<instance>keyword</instance>
				</methodcall>
			</loop>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>isInterface</method>
			</methodcall>
			<methodcall>
				<method>writeDocumentToConsole</method>
				<instance>xmlHelper</instance>
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>isInterface</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>name</name>
				</entry>
				<entry>
					<type>String</type>
					<name>sourceCodeHPP</name>
				</entry>
			</parameters>
			<result>boolean</result>
			<methodcall>
				<method>replaceAll</method>
				<instance>sourceCodeHPP</instance>
			</methodcall>
			<methodcall>
				<method>replaceAll</method>
				<instance>sourceCodeHPP</instance>
			</methodcall>
			<methodcall>
				<method>replaceAll</method>
				<instance>sourceCodeHPP</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>indexOf</method>
				<instance>sourceCodeHPP</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>indexOf</method>
				<instance>sourceCodeHPP</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>substring</method>
				<instance>sourceCodeHPP</instance>
			</methodcall>
			<loop>
				<condition>for( int i=0;
					index+i+1&lt;=sourceCodeHPP.length()&amp;&amp; index+i &gt;=0
					&amp;&amp; !(sourceCodeHPP.substring(index+i).equals("}")); i++)
				</condition>
				<methodcall>
					<method>substring</method>
					<instance>sourceCodeHPP</instance>
				</methodcall>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
			</loop>
			<methodcall>
				<method>replaceAll</method>
				<instance>tmp</instance>
			</methodcall>
			<methodcall>
				<method>replaceAll</method>
				<instance>tmp</instance>
			</methodcall>
			<methodcall>
				<method>replaceAll</method>
				<instance>tmp</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>substring</method>
				<instance />
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>SearchInCode</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>subject</name>
				</entry>
				<entry>
					<type>String</type>
					<name>sourceCodeCPP</name>
				</entry>
			</parameters>
			<result>void</result>
		</methoddefinition>
		<methoddefinition>
			<name>parse</name>
			<parameters>
				<entry>
					<type>ArrayList&lt;String&gt;</type>
					<name>sourceCode</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>set</method>
				<instance>sourceCode</instance>
			</methodcall>
			<methodcall>
				<method>get</method>
				<instance>0,sourceCode</instance>
			</methodcall>
			<methodcall>
				<method>set</method>
				<instance>sourceCode</instance>
			</methodcall>
			<methodcall>
				<method>get</method>
				<instance>1,sourceCode</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>get</method>
				<instance>sourceCode</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>get</method>
				<instance>sourceCode</instance>
			</methodcall>
			<frame>
				<methodcall>
					<method>buildTree</method>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
		</methoddefinition>
		<methoddefinition>
			<name>deleteComStr</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>sourceCode</name>
				</entry>
			</parameters>
			<result>String</result>
			<loop>
				<condition>for(int i = 0, n = sourceCode.length(); i &lt; n; i++)
				</condition>
				<alternative>
					<case>
						<condition>if(sourceCode.charAt(i) == '/' &amp;&amp;
							sourceCode.charAt(i + 1) == '/')</condition>
						<loop>
							<condition>while(sourceCode.charAt(i) != '\n' &amp;&amp; i &lt;
								n)</condition>
						</loop>
					</case>
				</alternative>
				<case>
					<condition>else</condition>
				</case>
				<alternative>
					<case>
						<condition>if(sourceCode.charAt(i) == '/' &amp;&amp;
							sourceCode.charAt(i + 1) == '*')</condition>
						<loop>
							<condition>while(!(sourceCode.charAt(i) == '*' &amp;&amp;
								sourceCode.charAt(i + 1) == '/') &amp;&amp; i &lt; n)
							</condition>
						</loop>
					</case>
				</alternative>
				<case>
					<condition>else</condition>
				</case>
				<alternative>
					<case>
						<condition>if(sourceCode.charAt(i) == '"')</condition>
						<loop>
							<condition>while(sourceCode.charAt(i) != '"' &amp;&amp; i &lt; n)
							</condition>
						</loop>
					</case>
				</alternative>
				<case>
					<condition>else</condition>
					<methodcall>
						<method>charAt</method>
						<instance>sourceCode</instance>
					</methodcall>
				</case>
			</loop>
		</methoddefinition>
		<methoddefinition>
			<name>getParsingResult</name>
			<result>Document</result>
		</methoddefinition>
	</classdefinition>
	<classdefinition>
		<name>ClassDiagramGenerator</name>
		<compositions>
			<entry>XmlHelperMethods</entry>
		</compositions>
		<aggregations />
		<instance>
			<name>xmlHelper</name>
			<class>XmlHelperMethods</class>
		</instance>
		<methoddefinition>
			<name>createDiagram</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>parsedData</name>
				</entry>
			</parameters>
			<result>Document</result>
			<methodcall>
				<method>newInstance</method>
				<instance>DocumentBuilderFactory</instance>
			</methodcall>
			<frame>
				<methodcall>
					<method>newDocumentBuilder</method>
					<instance>documentFactory</instance>
				</methodcall>
				<methodcall>
					<method>newDocument</method>
					<instance>documentBuilder</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>root</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classdiagramm</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classdiagramm</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classdiagramm</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classrelations</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classrelations</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classrelations</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>classrelations</instance>
				</methodcall>
				<methodcall>
					<method>getElementsByTagName</method>
					<instance>parsedData</instance>
				</methodcall>
				<loop>
					<condition>for(int i = 0; i &lt; classList.getLength(); i++)
					</condition>
					<methodcall>
						<method>item</method>
						<instance>classList</instance>
					</methodcall>
					<methodcall>
						<method>createElement</method>
						<instance>document</instance>
					</methodcall>
					<methodcall>
						<method>appendChild</method>
						<instance>classes</instance>
					</methodcall>
					<methodcall>
						<method>createElement</method>
						<instance>document</instance>
					</methodcall>
					<methodcall>
						<method>=</method>
					</methodcall>
					<methodcall>
						<method>appendChild</method>
						<instance>entry</instance>
					</methodcall>
					<methodcall>
						<method>appendChild</method>
						<instance>name</instance>
					</methodcall>
					<methodcall>
						<method>createTextNode</method>
						<instance>document</instance>
					</methodcall>
					<methodcall>
						<method>getElementsByTagName</method>
						<instance>elClassdef</instance>
					</methodcall>
					<methodcall>
						<method>item</method>
						<instance>)</instance>
					</methodcall>
					<methodcall>
						<method>getTextContent</method>
						<instance>0)</instance>
					</methodcall>
					<methodcall>
						<method>getList</method>
						<instance>xmlHelper</instance>
					</methodcall>
					<loop>
						<condition>for(int j = 0; instanceList.getLength() &gt; j; j++)
						</condition>
						<methodcall>
							<method>appendChild</method>
							<instance>entry</instance>
						</methodcall>
						<methodcall>
							<method>importNode</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>item</method>
							<instance>instanceList</instance>
						</methodcall>
					</loop>
					<methodcall>
						<method>getList</method>
						<instance>xmlHelper</instance>
					</methodcall>
					<loop>
						<condition>for(int j = 0; varList.getLength() &gt; j; j++)
						</condition>
						<methodcall>
							<method>appendChild</method>
							<instance>entry</instance>
						</methodcall>
						<methodcall>
							<method>importNode</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>item</method>
							<instance>varList</instance>
						</methodcall>
					</loop>
					<methodcall>
						<method>getList</method>
						<instance>xmlHelper</instance>
					</methodcall>
					<loop>
						<condition>for(int j = 0; methoddefList.getLength() &gt; j; j++)
						</condition>
						<methodcall>
							<method>item</method>
							<instance>methoddefList</instance>
						</methodcall>
						<methodcall>
							<method>getChildNodes</method>
							<instance>j)</instance>
						</methodcall>
						<methodcall>
							<method>getLength</method>
							<instance>children</instance>
						</methodcall>
						<loop>
							<condition>for(int k = 0; k &lt; count; k++)</condition>
							<methodcall>
								<method>item</method>
								<instance>children</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(current != null)</condition>
									<alternative>
										<case>
											<condition>if(current.getNodeType() == Node.ELEMENT_NODE)
											</condition>
											<methodcall>
												<method>getNodeName</method>
												<instance>current</instance>
											</methodcall>
											<alternative>
												<case>
													<condition>if(!(currentNode.equals("access") ||
														currentNode.equals("name") ||
														currentNode.equals("parameters") ||
														currentNode.equals("result")))
													</condition>
													<methodcall>
														<method>=</method>
													</methodcall>
													<methodcall>
														<method>getParentNode</method>
														<instance>elementremove</instance>
													</methodcall>
													<methodcall>
														<method>removeChild</method>
														<instance>)</instance>
													</methodcall>
													<methodcall>
														<method>out</method>
														<instance>System</instance>
													</methodcall>
												</case>
											</alternative>
										</case>
									</alternative>
								</case>
							</alternative>
						</loop>
						<methodcall>
							<method>importNode</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>item</method>
							<instance>methoddefList</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>entry</instance>
						</methodcall>
					</loop>
					<frame />
					<loop>
						<condition>for(int k = 0; k &lt; 4; k++)</condition>
						<alternative>
							<case>
								<condition>if(elClassdef.getElementsByTagName(excoagim[k]).getLength()
									&gt; 0)</condition>
								<methodcall>
									<method>getElementsByTagName</method>
									<instance>elClassdef</instance>
								</methodcall>
								<methodcall>
									<method>=</method>
								</methodcall>
								<methodcall>
									<method>item</method>
									<instance>nodeList</instance>
								</methodcall>
								<methodcall>
									<method>getElementsByTagName</method>
									<instance>element</instance>
								</methodcall>
								<loop>
									<condition>for(int j = 0; j &lt; entryList.getLength(); j++)
									</condition>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>nextEntry</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>nextEntry</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>switch(k)/case 0</condition>
											<methodcall>
												<method>appendChild</method>
												<instance>extensions</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>from</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>getElementsByTagName</method>
												<instance>elClassdef</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>)</instance>
											</methodcall>
											<methodcall>
												<method>getTextContent</method>
												<instance>0)</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>to</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>getElementsByTagName</method>
												<instance>element</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>)</instance>
											</methodcall>
											<methodcall>
												<method>getTextContent</method>
												<instance>j)</instance>
											</methodcall>
										</case>
										<case>
											<condition>switch(k)/case 1</condition>
											<methodcall>
												<method>appendChild</method>
												<instance>compositions</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>from</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>getElementsByTagName</method>
												<instance>element</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>)</instance>
											</methodcall>
											<methodcall>
												<method>getTextContent</method>
												<instance>j)</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>to</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>getElementsByTagName</method>
												<instance>elClassdef</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>)</instance>
											</methodcall>
											<methodcall>
												<method>getTextContent</method>
												<instance>0)</instance>
											</methodcall>
										</case>
										<case>
											<condition>switch(k)/case 2</condition>
											<methodcall>
												<method>appendChild</method>
												<instance>aggregations</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>from</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>getElementsByTagName</method>
												<instance>element</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>)</instance>
											</methodcall>
											<methodcall>
												<method>getTextContent</method>
												<instance>j)</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>to</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>getElementsByTagName</method>
												<instance>elClassdef</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>)</instance>
											</methodcall>
											<methodcall>
												<method>getTextContent</method>
												<instance>0)</instance>
											</methodcall>
										</case>
										<case>
											<condition>switch(k)/default</condition>
											<methodcall>
												<method>appendChild</method>
												<instance>implementations</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>from</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>getElementsByTagName</method>
												<instance>elClassdef</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>)</instance>
											</methodcall>
											<methodcall>
												<method>getTextContent</method>
												<instance>0)</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>to</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>getElementsByTagName</method>
												<instance>element</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>)</instance>
											</methodcall>
											<methodcall>
												<method>getTextContent</method>
												<instance>j)</instance>
											</methodcall>
											<methodcall>
												<method>createElement</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>interfaces</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>veryNextEntry</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>getElementsByTagName</method>
												<instance>element</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>)</instance>
											</methodcall>
											<methodcall>
												<method>getTextContent</method>
												<instance>j)</instance>
											</methodcall>
										</case>
									</alternative>
								</loop>
							</case>
						</alternative>
					</loop>
				</loop>
				<methodcall>
					<method>normalize</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>writeDocumentToConsole</method>
					<instance>xmlHelper</instance>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
		</methoddefinition>
	</classdefinition>
	<classdefinition>
		<name>XmlHelperMethods</name>
		<compositions>
			<entry>File</entry>
			<entry>DOMSource</entry>
			<entry>StreamResult</entry>
			<entry>StringWriter</entry>
			<entry>DefaultComparisonFormatter</entry>
			<entry>DefaultNodeMatcher</entry>
			<entry>DefaultMutableTreeNode</entry>
			<entry>FileInputStream</entry>
			<entry>FileOutputStream</entry>
		</compositions>
		<aggregations>
			<methodcall>
				<method>newInstance</method>
				<instance>XPathFactory</instance>
			</methodcall>
			<methodcall>
				<method>newXPath</method>
				<instance>xPathfactory</instance>
			</methodcall>
		</aggregations>
		<methoddefinition>
			<name>xmlDocToString</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>xmlDoc</name>
				</entry>
			</parameters>
			<result>String</result>
			<methodcall>
				<method>String</method>
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>delNode</name>
			<parameters>
				<entry>
					<type>Node</type>
					<name>nodeName</name>
				</entry>
				<entry>
					<type>boolean</type>
					<name>keepChildNodes</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>getParentNode</method>
				<instance>nodeName</instance>
			</methodcall>
			<alternative>
				<case>
					<condition>if(keepChildNodes)</condition>
					<methodcall>
						<method>getChildNodes</method>
						<instance>nodeName</instance>
					</methodcall>
					<loop>
						<condition>for(int i = 0; i &lt; childNodes.getLength(); i++)
						</condition>
						<methodcall>
							<method>appendChild</method>
							<instance>parent</instance>
						</methodcall>
						<methodcall>
							<method>item</method>
							<instance>childNodes</instance>
						</methodcall>
						<methodcall>
							<method>cloneNode</method>
							<instance>i)</instance>
						</methodcall>
					</loop>
				</case>
				<methodcall>
					<method>removeChild</method>
					<instance>parent</instance>
				</methodcall>
			</alternative>
			<case>
				<condition>else</condition>
				<methodcall>
					<method>removeChild</method>
					<instance>parent</instance>
				</methodcall>
			</case>
		</methoddefinition>
		<methoddefinition>
			<name>getDocumentFrom</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>filepath</name>
				</entry>
			</parameters>
			<result>Document</result>
			<instance>
				<name>file</name>
				<class>File</class>
			</instance>
			<frame>
				<methodcall>
					<method>newInstance</method>
					<instance>DocumentBuilderFactory</instance>
				</methodcall>
				<methodcall>
					<method>newDocumentBuilder</method>
					<instance>documentFactory</instance>
				</methodcall>
				<methodcall>
					<method>parse</method>
					<instance>documentBuilder</instance>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
		</methoddefinition>
		<methoddefinition>
			<name>writeDocumentToConsole</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>xmlDoc</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>newInstance</method>
				<instance>TransformerFactory</instance>
			</methodcall>
			<frame>
				<methodcall>
					<method>newTransformer</method>
					<instance>transformerFactory</instance>
				</methodcall>
				<methodcall>
					<method>setOutputProperty</method>
					<instance>transformer</instance>
				</methodcall>
				<instance>
					<name>domSource</name>
					<class>DOMSource</class>
				</instance>
				<instance>
					<name>console</name>
					<class>StreamResult</class>
				</instance>
				<methodcall>
					<method>transform</method>
					<instance>transformer</instance>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
		</methoddefinition>
		<methoddefinition>
			<name>writeToFile</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>doc</name>
				</entry>
			</parameters>
			<result>void</result>
			<instance>
				<name>file</name>
				<class>File</class>
			</instance>
			<methodcall>
				<method>createNewFile</method>
				<instance>file</instance>
			</methodcall>
			<methodcall>
				<method>newInstance</method>
				<instance>TransformerFactory</instance>
			</methodcall>
			<methodcall>
				<method>newTransformer</method>
				<instance>tFactory</instance>
			</methodcall>
			<methodcall>
				<method>setOutputProperty</method>
				<instance>transformer</instance>
			</methodcall>
			<instance>
				<name>source</name>
				<class>DOMSource</class>
			</instance>
			<instance>
				<name>result</name>
				<class>StreamResult</class>
			</instance>
			<methodcall>
				<method>transform</method>
				<instance>transformer</instance>
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>listAllNodes</name>
			<parameters>
				<entry>
					<type>Element</type>
					<name>root</name>
				</entry>
			</parameters>
			<result>void</result>
			<alternative>
				<case>
					<condition>if(root.hasChildNodes())</condition>
					<methodcall>
						<method>getChildNodes</method>
						<instance>root</instance>
					</methodcall>
					<loop>
						<condition>for(int i = 0; i &lt; list.getLength(); i++)
						</condition>
						<methodcall>
							<method>item</method>
							<instance>list</instance>
						</methodcall>
						<alternative>
							<case>
								<condition>if(node.getNodeType() == Node.ELEMENT_NODE)
								</condition>
								<methodcall>
									<method>=</method>
								</methodcall>
								<methodcall>
									<method>getTagName</method>
									<instance>e</instance>
								</methodcall>
								<methodcall>
									<method>out</method>
									<instance>System</instance>
								</methodcall>
								<methodcall>
									<method>listAllNodes</method>
								</methodcall>
								<methodcall>
									<method>out</method>
									<instance>System</instance>
								</methodcall>
								<methodcall>
									<method>getTagName</method>
									<instance>e</instance>
								</methodcall>
							</case>
						</alternative>
					</loop>
				</case>
			</alternative>
		</methoddefinition>
		<methoddefinition>
			<name>removeComments</name>
			<parameters>
				<entry>
					<type>Element</type>
					<name>root</name>
				</entry>
			</parameters>
			<result>void</result>
			<alternative>
				<case>
					<condition>if(root.hasChildNodes())</condition>
					<methodcall>
						<method>getChildNodes</method>
						<instance>root</instance>
					</methodcall>
					<loop>
						<condition>for(int i = 0; i &lt; list.getLength(); i++)
						</condition>
						<methodcall>
							<method>item</method>
							<instance>list</instance>
						</methodcall>
						<alternative>
							<case>
								<condition>if(node.getNodeType() == Node.ELEMENT_NODE)
								</condition>
								<methodcall>
									<method>=</method>
								</methodcall>
								<methodcall>
									<method>removeComments</method>
								</methodcall>
							</case>
							<case>
								<condition>else</condition>
							</case>
							<alternative>
								<case>
									<condition>if(node.getNodeType() == Node.COMMENT_NODE)
									</condition>
									<methodcall>
										<method>removeChild</method>
										<instance>root</instance>
									</methodcall>
								</case>
							</alternative>
						</alternative>
					</loop>
				</case>
			</alternative>
			<methoddefinition>
				<name>removeWhitespace</name>
				<parameters>
					<entry>
						<type>Document</type>
						<name>seq</name>
					</entry>
				</parameters>
				<result>Document</result>
				<instance>
					<name>sw</name>
					<class>StringWriter</class>
				</instance>
				<methodcall>
					<method>newInstance</method>
					<instance>TransformerFactory</instance>
				</methodcall>
				<methodcall>
					<method>newTransformer</method>
					<instance>tf</instance>
				</methodcall>
				<methodcall>
					<method>setOutputProperty</method>
					<instance>transformer</instance>
				</methodcall>
				<methodcall>
					<method>transform</method>
					<instance>transformer</instance>
				</methodcall>
				<methodcall>
					<method>DOMSource</method>
				</methodcall>
				<methodcall>
					<method>StreamResult</method>
				</methodcall>
				<methodcall>
					<method>toString</method>
					<instance>sw</instance>
				</methodcall>
				<methodcall>
					<method>replaceAll</method>
					<instance>s</instance>
				</methodcall>
				<methodcall>
					<method>newInstance</method>
					<instance>DocumentBuilderFactory</instance>
				</methodcall>
				<methodcall>
					<method>newDocumentBuilder</method>
					<instance>docBuilderFactory</instance>
				</methodcall>
				<methodcall>
					<method>parse</method>
					<instance>docBuilder</instance>
				</methodcall>
				<methodcall>
					<method>InputSource</method>
				</methodcall>
				<methodcall>
					<method>StringReader</method>
				</methodcall>
			</methoddefinition>
			<methoddefinition>
				<name>getList</name>
				<parameters>
					<entry>
						<type>Node</type>
						<name>doc</name>
					</entry>
					<entry>
						<type>String</type>
						<name>path</name>
					</entry>
				</parameters>
				<result>NodeList</result>
				<methodcall>
					<method>compile</method>
					<instance>xpath</instance>
					<validity>class</validity>
				</methodcall>
				<methodcall>
					<method>=</method>
				</methodcall>
				<methodcall>
					<method>evaluate</method>
					<instance>expr</instance>
				</methodcall>
			</methoddefinition>
			<methoddefinition>
				<name>getChildwithName</name>
				<parameters>
					<entry>
						<type>Node</type>
						<name>parent</name>
					</entry>
					<entry>
						<type>String</type>
						<name>name</name>
					</entry>
				</parameters>
				<result>Node</result>
				<methodcall>
					<method>getChildNodes</method>
					<instance>parent</instance>
				</methodcall>
				<loop>
					<condition>for(int i = 0; i &lt; cnodes.getLength(); i++)
					</condition>
					<alternative>
						<case>
							<condition>if(cnodes.item(i).getNodeName().equals(name))
							</condition>
							<methodcall>
								<method>item</method>
								<instance>cnodes</instance>
							</methodcall>
						</case>
					</alternative>
				</loop>
			</methoddefinition>
			<methoddefinition>
				<name>hasChildwithName</name>
				<parameters>
					<entry>
						<type>Node</type>
						<name>parent</name>
					</entry>
					<entry>
						<type>String</type>
						<name>name</name>
					</entry>
				</parameters>
				<result>boolean</result>
				<methodcall>
					<method>getChildNodes</method>
					<instance>parent</instance>
				</methodcall>
				<loop>
					<condition>for(int i = 0; i &lt; cnodes.getLength(); i++)
					</condition>
					<alternative>
						<case>
							<condition>if(cnodes.item(i).getNodeName().equals(name))
							</condition>
						</case>
					</alternative>
				</loop>
			</methoddefinition>
			<methoddefinition>
				<name>compareXML</name>
				<parameters>
					<entry>
						<type>Document</type>
						<name>doc1</name>
					</entry>
					<entry>
						<type>Document</type>
						<name>doc2</name>
					</entry>
				</parameters>
				<result>boolean</result>
				<instance>
					<name>formatter</name>
					<class>DefaultComparisonFormatter</class>
				</instance>
				<instance>
					<name>nodeMatcher</name>
					<class>DefaultNodeMatcher</class>
				</instance>
				<methodcall>
					<method>compare</method>
					<instance>DiffBuilder</instance>
				</methodcall>
				<methodcall>
					<method>withTest</method>
					<instance>doc1)</instance>
				</methodcall>
				<methodcall>
					<method>checkForSimilar</method>
					<instance>doc2)</instance>
				</methodcall>
				<methodcall>
					<method>withNodeMatcher</method>
					<instance />
				</methodcall>
				<methodcall>
					<method>ignoreWhitespace</method>
					<instance>nodeMatcher)</instance>
				</methodcall>
				<methodcall>
					<method>normalizeWhitespace</method>
					<instance>)</instance>
				</methodcall>
				<methodcall>
					<method>withComparisonFormatter</method>
					<instance />
				</methodcall>
				<methodcall>
					<method>ignoreComments</method>
					<instance>formatter)</instance>
				</methodcall>
				<methodcall>
					<method>ignoreElementContentWhitespace</method>
					<instance>)</instance>
				</methodcall>
				<methodcall>
					<method>build</method>
					<instance>)</instance>
				</methodcall>
				<methodcall>
					<method>getDifferences</method>
					<instance>d</instance>
				</methodcall>
				<methodcall>
					<method>iterator</method>
					<instance>diffList</instance>
				</methodcall>
				<loop>
					<condition>while(iterator.hasNext())</condition>
					<methodcall>
						<method>next</method>
						<instance>iterator</instance>
					</methodcall>
					<methodcall>
						<method>out</method>
						<instance>System</instance>
					</methodcall>
				</loop>
				<methodcall>
					<method>iterator</method>
					<instance>iterator=diffList</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(iterator.hasNext())</condition>
					</case>
					<case>
						<condition>else</condition>
					</case>
				</alternative>
			</methoddefinition>
		</methoddefinition>
		<classdefinition>
			<name>CompareXML</name>
			<compositions>
				<entry>XmlHelperMethods</entry>
				<entry>DefaultComparisonFormatter</entry>
				<entry>DefaultNodeMatcher</entry>
			</compositions>
			<aggregations />
			<instance>
				<name>helper</name>
				<class>XmlHelperMethods</class>
			</instance>
			<methoddefinition>
				<name>main</name>
				<parameters>
					<entry>
						<type>String</type>
						<name>args[]</name>
					</entry>
				</parameters>
				<result>boolean</result>
			</methoddefinition>
			<frame>
				<methodcall>
					<method>getDocumentFrom</method>
					<instance>doc1=helper</instance>
				</methodcall>
				<methodcall>
					<method>getDocumentFrom</method>
					<instance>doc2=helper</instance>
				</methodcall>
				<instance>
					<name>formatter</name>
					<class>DefaultComparisonFormatter</class>
				</instance>
				<instance>
					<name>nodeMatcher</name>
					<class>DefaultNodeMatcher</class>
				</instance>
				<methodcall>
					<method>compare</method>
					<instance>DiffBuilder</instance>
				</methodcall>
				<methodcall>
					<method>withTest</method>
					<instance>doc1)</instance>
				</methodcall>
				<methodcall>
					<method>checkForSimilar</method>
					<instance />
				</methodcall>
				<methodcall>
					<method>checkForIdentical</method>
					<instance>)//</instance>
				</methodcall>
				<methodcall>
					<method>withNodeMatcher</method>
					<instance />
				</methodcall>
				<methodcall>
					<method>ignoreWhitespace</method>
					<instance />
				</methodcall>
				<methodcall>
					<method>normalizeWhitespace</method>
					<instance />
				</methodcall>
				<methodcall>
					<method>withComparisonFormatter</method>
					<instance />
				</methodcall>
				<methodcall>
					<method>ignoreComments</method>
					<instance />
				</methodcall>
				<methodcall>
					<method>ignoreElementContentWhitespace</method>
					<instance />
				</methodcall>
				<methodcall>
					<method>build</method>
					<instance />
				</methodcall>
				<methodcall>
					<method>getDifferences</method>
					<instance>d</instance>
				</methodcall>
				<methodcall>
					<method>iterator</method>
					<instance>diffList</instance>
				</methodcall>
				<loop>
					<condition>while(iterator.hasNext())</condition>
					<methodcall>
						<method>next</method>
						<instance>iterator</instance>
					</methodcall>
					<methodcall>
						<method>out</method>
						<instance>System</instance>
					</methodcall>
				</loop>
				<alternative>
					<case>
						<condition>if(iterator.hasNext())</condition>
					</case>
					<case>
						<condition>else</condition>
					</case>
				</alternative>
			</frame>
		</classdefinition>
		<classdefinition>
			<name>GUI_Swing</name>
			<compositions>
				<entry>GUI_Swing</entry>
				<entry>ArrayList&lt;String&gt;</entry>
				<entry>File</entry>
				<entry>JFrame</entry>
				<entry>JFileChooser</entry>
				<entry>JMenuBar</entry>
				<entry>JMenu</entry>
				<entry>JMenuItem</entry>
				<entry>JSeparator</entry>
				<entry>JCheckBoxMenuItem</entry>
				<entry>JTabbedPane</entry>
				<entry>JPanel</entry>
				<entry>JButton</entry>
				<entry>JScrollPane</entry>
				<entry>JTextArea</entry>
				<entry>JLabel</entry>
				<entry>JSplitPane</entry>
				<entry>DefaultMutableTreeNode</entry>
				<entry>JTree</entry>
				<entry>JToolBar</entry>
			</compositions>
			<aggregations />
			<methoddefinition>
				<name>showGUI</name>
				<methodcall>
					<method>invokeLater</method>
					<instance>EventQueue</instance>
				</methodcall>
				<methodcall>
					<method>Runnable</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>run</name>
						<result>void</result>
						<frame>
							<instance>
								<name>window</name>
								<class>GUI_Swing</class>
							</instance>
							<methodcall>
								<method>frame</method>
								<instance>window</instance>
							</methodcall>
						</frame>
						<methodcall>
							<method>catch</method>
						</methodcall>
						<frame>
							<methodcall>
								<method>printStackTrace</method>
								<instance>e</instance>
							</methodcall>
						</frame>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>initialize</method>
				</methodcall>
			</methoddefinition>
			<methoddefinition>
				<name>initialize</name>
				<result>void</result>
				<instance>
					<name>paths</name>
					<class>ArrayList&lt;String&gt;</class>
				</instance>
				<instance>
					<name>tmpClassImage</name>
					<class>File</class>
				</instance>
				<instance>
					<name>tmpSeqImage</name>
					<class>File</class>
				</instance>
				<instance>
					<name>frame</name>
					<class>JFrame</class>
				</instance>
				<methodcall>
					<method>setBounds</method>
					<instance>frame</instance>
				</methodcall>
				<methodcall>
					<method>setDefaultCloseOperation</method>
					<instance>frame</instance>
				</methodcall>
				<methodcall>
					<method>setTitle</method>
					<instance>frame</instance>
				</methodcall>
				<methodcall>
					<method>setMinimumSize</method>
					<instance>frame</instance>
				</methodcall>
				<methodcall>
					<method>Dimension</method>
				</methodcall>
				<instance>
					<name>fDialog</name>
					<class>JFileChooser</class>
				</instance>
				<instance>
					<name>menuBar</name>
					<class>JMenuBar</class>
				</instance>
				<methodcall>
					<method>setJMenuBar</method>
					<instance>frame</instance>
				</methodcall>
				<instance>
					<name>mnDatei</name>
					<class>JMenu</class>
				</instance>
				<methodcall>
					<method>add</method>
					<instance>menuBar</instance>
				</methodcall>
				<instance>
					<name>mntmAddFile</name>
					<class>JMenuItem</class>
				</instance>
				<methodcall>
					<method>addActionListener</method>
					<instance>mntmAddFile</instance>
				</methodcall>
				<methodcall>
					<method>ActionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>actionPerformed</name>
						<parameters>
							<entry>
								<type>ActionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<methodcall>
							<method>openFile</method>
						</methodcall>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>add</method>
					<instance>mnDatei</instance>
				</methodcall>
				<instance>
					<name>mntmAddDir</name>
					<class>JMenuItem</class>
				</instance>
				<methodcall>
					<method>addActionListener</method>
					<instance>mntmAddDir</instance>
				</methodcall>
				<methodcall>
					<method>ActionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>actionPerformed</name>
						<parameters>
							<entry>
								<type>ActionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<methodcall>
							<method>openFile</method>
						</methodcall>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>add</method>
					<instance>mnDatei</instance>
				</methodcall>
				<instance>
					<name>separator</name>
					<class>JSeparator</class>
				</instance>
				<methodcall>
					<method>add</method>
					<instance>mnDatei</instance>
				</methodcall>
				<instance>
					<name>mntmPathEditor</name>
					<class>JMenuItem</class>
				</instance>
				<methodcall>
					<method>addActionListener</method>
					<instance>mntmPathEditor</instance>
				</methodcall>
				<methodcall>
					<method>ActionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>actionPerformed</name>
						<parameters>
							<entry>
								<type>ActionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<methodcall>
							<method>showMessageDialog</method>
							<instance>JOptionPane</instance>
						</methodcall>
						<methodcall>
							<method>PathEditorPanel</method>
						</methodcall>
						<alternative>
							<case>
								<condition>if(lastPathsLength != paths.size())</condition>
								<methodcall>
									<method>runPUML</method>
								</methodcall>
								<methodcall>
									<method>size</method>
									<instance>paths</instance>
								</methodcall>
								<alternative>
									<case>
										<condition>if(lastPathsLength == 0)</condition>
										<methodcall>
											<method>setTitle</method>
											<instance>frame</instance>
										</methodcall>
									</case>
								</alternative>
							</case>
						</alternative>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>add</method>
					<instance>mnDatei</instance>
				</methodcall>
				<instance>
					<name>mnOptionen</name>
					<class>JMenu</class>
				</instance>
				<methodcall>
					<method>add</method>
					<instance>menuBar</instance>
				</methodcall>
				<instance>
					<name>chckbxmntmUseJava</name>
					<class>JCheckBoxMenuItem</class>
				</instance>
				<methodcall>
					<method>setSelected</method>
					<instance>chckbxmntmUseJava</instance>
				</methodcall>
				<methodcall>
					<method>addActionListener</method>
					<instance>chckbxmntmUseJava</instance>
				</methodcall>
				<methodcall>
					<method>ActionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>actionPerformed</name>
						<parameters>
							<entry>
								<type>ActionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<alternative>
							<case>
								<condition>if(chckbxmntmUseJava.isSelected())</condition>
							</case>
							<case>
								<condition>else</condition>
							</case>
						</alternative>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>add</method>
					<instance>mnOptionen</instance>
				</methodcall>
				<instance>
					<name>chckbxmntmUseJar</name>
					<class>JCheckBoxMenuItem</class>
				</instance>
				<methodcall>
					<method>addActionListener</method>
					<instance>chckbxmntmUseJar</instance>
				</methodcall>
				<methodcall>
					<method>ActionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>actionPerformed</name>
						<parameters>
							<entry>
								<type>ActionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<alternative>
							<case>
								<condition>if(chckbxmntmUseJar.isSelected())</condition>
							</case>
							<case>
								<condition>else</condition>
							</case>
						</alternative>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>setSelected</method>
					<instance>chckbxmntmUseJar</instance>
				</methodcall>
				<methodcall>
					<method>add</method>
					<instance>mnOptionen</instance>
				</methodcall>
				<instance>
					<name>tabbedPane</name>
					<class>JTabbedPane</class>
				</instance>
				<methodcall>
					<method>getContentPane</method>
					<instance>frame</instance>
				</methodcall>
				<methodcall>
					<method>add</method>
					<instance>)</instance>
				</methodcall>
				<instance>
					<name>pnlClass</name>
					<class>JPanel</class>
				</instance>
				<methodcall>
					<method>addTab</method>
					<instance>tabbedPane</instance>
				</methodcall>
				<methodcall>
					<method>setLayout</method>
					<instance>pnlClass</instance>
				</methodcall>
				<methodcall>
					<method>BorderLayout</method>
				</methodcall>
				<instance>
					<name>pnlClassPrev</name>
					<class>JPanel</class>
				</instance>
				<methodcall>
					<method>add</method>
					<instance>pnlClass</instance>
				</methodcall>
				<instance>
					<name>btnClassPrev</name>
					<class>JButton</class>
				</instance>
				<methodcall>
					<method>addActionListener</method>
					<instance>btnClassPrev</instance>
				</methodcall>
				<methodcall>
					<method>ActionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>actionPerformed</name>
						<parameters>
							<entry>
								<type>ActionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<methodcall>
							<method>showPreview</method>
						</methodcall>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>setHorizontalAlignment</method>
					<instance>btnClassPrev</instance>
				</methodcall>
				<methodcall>
					<method>add</method>
					<instance>pnlClassPrev</instance>
				</methodcall>
				<instance>
					<name>scrollPaneClass</name>
					<class>JScrollPane</class>
				</instance>
				<methodcall>
					<method>add</method>
					<instance>pnlClass</instance>
				</methodcall>
				<instance>
					<name>textClass</name>
					<class>JTextArea</class>
				</instance>
				<methodcall>
					<method>setViewportView</method>
					<instance>scrollPaneClass</instance>
				</methodcall>
				<instance>
					<name>lblPlantumlCodeClass</name>
					<class>JLabel</class>
				</instance>
				<methodcall>
					<method>setColumnHeaderView</method>
					<instance>scrollPaneClass</instance>
				</methodcall>
				<instance>
					<name>pnlSequence</name>
					<class>JPanel</class>
				</instance>
				<methodcall>
					<method>addTab</method>
					<instance>tabbedPane</instance>
				</methodcall>
				<methodcall>
					<method>setLayout</method>
					<instance>pnlSequence</instance>
				</methodcall>
				<methodcall>
					<method>BorderLayout</method>
				</methodcall>
				<instance>
					<name>splitPane</name>
					<class>JSplitPane</class>
				</instance>
				<methodcall>
					<method>add</method>
					<instance>pnlSequence</instance>
				</methodcall>
				<instance>
					<name>panel</name>
					<class>JPanel</class>
				</instance>
				<methodcall>
					<method>setRightComponent</method>
					<instance>splitPane</instance>
				</methodcall>
				<methodcall>
					<method>setLayout</method>
					<instance>panel</instance>
				</methodcall>
				<methodcall>
					<method>BorderLayout</method>
				</methodcall>
				<instance>
					<name>scrollPaneSequence</name>
					<class>JScrollPane</class>
				</instance>
				<methodcall>
					<method>add</method>
					<instance>panel</instance>
				</methodcall>
				<instance>
					<name>textSequence</name>
					<class>JTextArea</class>
				</instance>
				<methodcall>
					<method>setViewportView</method>
					<instance>scrollPaneSequence</instance>
				</methodcall>
				<instance>
					<name>lblPlantumlCodeSequence</name>
					<class>JLabel</class>
				</instance>
				<methodcall>
					<method>setColumnHeaderView</method>
					<instance>scrollPaneSequence</instance>
				</methodcall>
				<instance>
					<name>pnlSeqPrev</name>
					<class>JPanel</class>
				</instance>
				<methodcall>
					<method>add</method>
					<instance>panel</instance>
				</methodcall>
				<methodcall>
					<method>setLayout</method>
					<instance>pnlSeqPrev</instance>
				</methodcall>
				<methodcall>
					<method>BorderLayout</method>
				</methodcall>
				<instance>
					<name>btnSeqPrev</name>
					<class>JButton</class>
				</instance>
				<methodcall>
					<method>addActionListener</method>
					<instance>btnSeqPrev</instance>
				</methodcall>
				<methodcall>
					<method>ActionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>actionPerformed</name>
						<parameters>
							<entry>
								<type>ActionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<alternative>
							<case>
								<condition>if(epClass=="nicht gesetzt")</condition>
								<methodcall>
									<method>showMessageDialog</method>
									<instance>JOptionPane</instance>
								</methodcall>
							</case>
							<case>
								<condition>else</condition>
								<methodcall>
									<method>showPreview</method>
								</methodcall>
							</case>
						</alternative>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>add</method>
					<instance>pnlSeqPrev</instance>
				</methodcall>
				<instance>
					<name>panel_1</name>
					<class>JPanel</class>
				</instance>
				<methodcall>
					<method>setBorder</method>
					<instance>panel_1</instance>
				</methodcall>
				<methodcall>
					<method>TitledBorder</method>
				</methodcall>
				<methodcall>
					<method>add</method>
					<instance>pnlSeqPrev</instance>
				</methodcall>
				<methodcall>
					<method>setLayout</method>
					<instance>panel_1</instance>
				</methodcall>
				<methodcall>
					<method>BorderLayout</method>
				</methodcall>
				<instance>
					<name>lblMethod</name>
					<class>JLabel</class>
				</instance>
				<methodcall>
					<method>add</method>
					<instance>panel_1</instance>
				</methodcall>
				<instance>
					<name>lblClass</name>
					<class>JLabel</class>
				</instance>
				<methodcall>
					<method>add</method>
					<instance>panel_1</instance>
				</methodcall>
				<instance>
					<name>dmtnRoot</name>
					<class>DefaultMutableTreeNode</class>
				</instance>
				<instance>
					<name>tree_1</name>
					<class>JTree</class>
				</instance>
				<methodcall>
					<method>setLeftComponent</method>
					<instance>splitPane</instance>
				</methodcall>
				<methodcall>
					<method>addTreeSelectionListener</method>
					<instance>tree_1</instance>
				</methodcall>
				<methodcall>
					<method>TreeSelectionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>valueChanged</name>
						<parameters>
							<entry>
								<type>TreeSelectionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<methodcall>
							<method>=</method>
						</methodcall>
						<methodcall>
							<method>getLastSelectedPathComponent</method>
							<instance>tree_1</instance>
						</methodcall>
						<alternative>
							<case>
								<condition>if(node == null)</condition>
							</case>
						</alternative>
						<alternative>
							<case>
								<condition>if(node.isLeaf())</condition>
								<methodcall>
									<method>getParent</method>
									<instance>node</instance>
								</methodcall>
								<methodcall>
									<method>toString</method>
									<instance>)</instance>
								</methodcall>
								<methodcall>
									<method>toString</method>
									<instance>node</instance>
								</methodcall>
								<methodcall>
									<method>setText</method>
									<instance>lblClass</instance>
								</methodcall>
								<methodcall>
									<method>setText</method>
									<instance>lblMethod</instance>
								</methodcall>
							</case>
						</alternative>
					</methoddefinition>
				</frame>
				<instance>
					<name>toolBar</name>
					<class>JToolBar</class>
				</instance>
				<methodcall>
					<method>setFloatable</method>
					<instance>toolBar</instance>
				</methodcall>
				<methodcall>
					<method>getContentPane</method>
					<instance>frame</instance>
				</methodcall>
				<methodcall>
					<method>add</method>
					<instance>)</instance>
				</methodcall>
				<instance>
					<name>btnOpenDir</name>
					<class>JButton</class>
				</instance>
				<methodcall>
					<method>setIcon</method>
					<instance>btnOpenDir</instance>
				</methodcall>
				<methodcall>
					<method>ImageIcon</method>
				</methodcall>
				<methodcall>
					<method>class</method>
					<instance>GUI_Swing</instance>
				</methodcall>
				<methodcall>
					<method>addActionListener</method>
					<instance>btnOpenDir</instance>
				</methodcall>
				<methodcall>
					<method>ActionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>actionPerformed</name>
						<parameters>
							<entry>
								<type>ActionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<methodcall>
							<method>openFile</method>
						</methodcall>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>setToolTipText</method>
					<instance>btnOpenDir</instance>
				</methodcall>
				<methodcall>
					<method>add</method>
					<instance>toolBar</instance>
				</methodcall>
				<instance>
					<name>btnOpenFile</name>
					<class>JButton</class>
				</instance>
				<methodcall>
					<method>setIcon</method>
					<instance>btnOpenFile</instance>
				</methodcall>
				<methodcall>
					<method>ImageIcon</method>
				</methodcall>
				<methodcall>
					<method>class</method>
					<instance>GUI_Swing</instance>
				</methodcall>
				<methodcall>
					<method>addActionListener</method>
					<instance>btnOpenFile</instance>
				</methodcall>
				<methodcall>
					<method>ActionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>actionPerformed</name>
						<parameters>
							<entry>
								<type>ActionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<methodcall>
							<method>openFile</method>
						</methodcall>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>setToolTipText</method>
					<instance>btnOpenFile</instance>
				</methodcall>
				<methodcall>
					<method>add</method>
					<instance>toolBar</instance>
				</methodcall>
				<instance>
					<name>btnSave</name>
					<class>JButton</class>
				</instance>
				<methodcall>
					<method>setIcon</method>
					<instance>btnSave</instance>
				</methodcall>
				<methodcall>
					<method>ImageIcon</method>
				</methodcall>
				<methodcall>
					<method>class</method>
					<instance>GUI_Swing</instance>
				</methodcall>
				<methodcall>
					<method>addActionListener</method>
					<instance>btnSave</instance>
				</methodcall>
				<methodcall>
					<method>ActionListener</method>
				</methodcall>
				<frame>
					<methoddefinition>
						<name>actionPerformed</name>
						<parameters>
							<entry>
								<type>ActionEvent</type>
								<name>e</name>
							</entry>
						</parameters>
						<result>void</result>
						<methodcall>
							<method>saveOutput</method>
						</methodcall>
					</methoddefinition>
				</frame>
				<methodcall>
					<method>setToolTipText</method>
					<instance>btnSave</instance>
				</methodcall>
				<methodcall>
					<method>add</method>
					<instance>toolBar</instance>
				</methodcall>
			</methoddefinition>
			<methoddefinition>
				<name>openFile</name>
				<parameters>
					<entry>
						<type>boolean</type>
						<name>useFiles</name>
					</entry>
				</parameters>
				<result>void</result>
				<frame />
				<alternative>
					<case>
						<condition>if(useFiles)</condition>
						<methodcall>
							<method>setDialogTitle</method>
							<instance>fDialog</instance>
						</methodcall>
						<methodcall>
							<method>setFileFilter</method>
							<instance>fDialog</instance>
						</methodcall>
						<methodcall>
							<method>FileNameExtensionFilter</method>
						</methodcall>
						<methodcall>
							<method>setFileSelectionMode</method>
							<instance>fDialog</instance>
						</methodcall>
						<methodcall>
							<method>setMultiSelectionEnabled</method>
							<instance>fDialog</instance>
						</methodcall>
						<methodcall>
							<method>showOpenDialog</method>
							<instance>fDialog</instance>
						</methodcall>
						<methodcall>
							<method>getSelectedFiles</method>
							<instance>fDialog</instance>
						</methodcall>
						<loop>
							<condition>for(int i = 0; i &lt; items.length; i++)</condition>
							<methodcall>
								<method>add</method>
								<instance>paths</instance>
							</methodcall>
							<methodcall>
								<method>getPath</method>
								<instance>items[i]</instance>
							</methodcall>
						</loop>
					</case>
				</alternative>
				<case>
					<condition>else</condition>
					<methodcall>
						<method>setDialogTitle</method>
						<instance>fDialog</instance>
					</methodcall>
					<methodcall>
						<method>setFileSelectionMode</method>
						<instance>fDialog</instance>
					</methodcall>
					<methodcall>
						<method>setMultiSelectionEnabled</method>
						<instance>fDialog</instance>
					</methodcall>
					<methodcall>
						<method>setAcceptAllFileFilterUsed</method>
						<instance>fDialog</instance>
					</methodcall>
					<alternative>
						<case>
							<condition>if(fDialog.showOpenDialog(frame) ==
								JFileChooser.APPROVE_OPTION)</condition>
							<methodcall>
								<method>getSelectedFiles</method>
								<instance>fDialog</instance>
							</methodcall>
							<loop>
								<condition>for(int i = 0; i &lt; items.length; i++)</condition>
								<methodcall>
									<method>add</method>
									<instance>paths</instance>
								</methodcall>
								<methodcall>
									<method>getPath</method>
									<instance>items[i]</instance>
								</methodcall>
							</loop>
						</case>
					</alternative>
				</case>
			</methoddefinition>
			<alternative>
				<case>
					<condition>if(items.length != 0)</condition>
					<methodcall>
						<method>runPUML</method>
					</methodcall>
				</case>
			</alternative>
		</classdefinition>
		<methoddefinition>
			<name>runPUML</name>
			<result>void</result>
			<frame>
				<methodcall>
					<method>setTitle</method>
					<instance>frame</instance>
				</methodcall>
				<methodcall>
					<method>newInstance</method>
					<instance>DocumentBuilderFactory</instance>
				</methodcall>
				<methodcall>
					<method>newDocumentBuilder</method>
					<instance>factory</instance>
				</methodcall>
				<methodcall>
					<method>parse</method>
					<instance>builder</instance>
				</methodcall>
				<methodcall>
					<method>File</method>
				</methodcall>
				<methodcall>
					<method>classDiagramGenerator</method>
					<instance>PUMLgenerator</instance>
				</methodcall>
				<methodcall>
					<method>outputPUML</method>
					<instance>PUMLgenerator</instance>
				</methodcall>
				<methodcall>
					<method>setText</method>
					<instance>textClass</instance>
				</methodcall>
				<methodcall>
					<method>outputPUML</method>
					<instance>PUMLgenerator</instance>
				</methodcall>
				<methodcall>
					<method>getAbsolutePath</method>
					<instance>tmpClassImage</instance>
				</methodcall>
				<methodcall>
					<method>seqDiagramGenerator</method>
					<instance>PUMLgenerator</instance>
				</methodcall>
				<methodcall>
					<method>outputPUML</method>
					<instance>PUMLgenerator</instance>
				</methodcall>
				<methodcall>
					<method>setText</method>
					<instance>textSequence</instance>
				</methodcall>
				<methodcall>
					<method>outputPUML</method>
					<instance>PUMLgenerator</instance>
				</methodcall>
				<methodcall>
					<method>getAbsolutePath</method>
					<instance>tmpSeqImage</instance>
				</methodcall>
				<loop>
					<condition>for(int nodeCnt = 0; nodeCnt &lt; 4; nodeCnt++)
					</condition>
					<instance>
						<name>dmtnTmp</name>
						<class>DefaultMutableTreeNode</class>
					</instance>
					<methodcall>
						<method>add</method>
						<instance>dmtnRoot</instance>
					</methodcall>
					<loop>
						<condition>for(int leafCnt = 1; leafCnt &lt; 4; leafCnt++)
						</condition>
					</loop>
					<methodcall>
						<method>add</method>
						<instance>dmtnTmp</instance>
					</methodcall>
					<methodcall>
						<method>DefaultMutableTreeNode</method>
					</methodcall>
					<methodcall>
						<method>+</method>
					</methodcall>
				</loop>
				<methodcall>
					<method>expandRow</method>
					<instance>tree_1</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(paths.size() == 1)</condition>
						<methodcall>
							<method>setTitle</method>
							<instance>frame</instance>
						</methodcall>
						<methodcall>
							<method>size</method>
							<instance>paths</instance>
						</methodcall>
					</case>
					<case>
						<condition>else</condition>
						<methodcall>
							<method>setTitle</method>
							<instance>frame</instance>
						</methodcall>
						<methodcall>
							<method>size</method>
							<instance>paths</instance>
						</methodcall>
					</case>
				</alternative>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>showMessageDialog</method>
					<instance>JOptionPane</instance>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
		</methoddefinition>
		<methoddefinition>
			<name>showPreview</name>
			<parameters>
				<entry>
					<type>File</type>
					<name>imageFile</name>
				</entry>
				<entry>
					<type>String</type>
					<name>title</name>
				</entry>
			</parameters>
			<result>void</result>
			<alternative>
				<case>
					<condition>if(paths.isEmpty())</condition>
					<methodcall>
						<method>showMessageDialog</method>
						<instance>JOptionPane</instance>
					</methodcall>
				</case>
				<case>
					<condition>else</condition>
					<methodcall>
						<method>showMessageDialog</method>
						<instance>JOptionPane</instance>
					</methodcall>
					<methodcall>
						<method>JLabel</method>
					</methodcall>
					<methodcall>
						<method>ImageIcon</method>
					</methodcall>
					<methodcall>
						<method>getAbsolutePath</method>
						<instance>imageFile</instance>
					</methodcall>
				</case>
			</alternative>
		</methoddefinition>
		<methoddefinition>
			<name>saveOutput</name>
			<result>void</result>
		</methoddefinition>
		<methoddefinition>
			<name>copyFile</name>
			<parameters>
				<entry>
					<type>File</type>
					<name>in</name>
				</entry>
				<entry>
					<type>File</type>
					<name>out</name>
				</entry>
			</parameters>
			<result>void</result>
			<frame>
				<instance>
					<name>inChannel</name>
					<class>FileInputStream</class>
				</instance>
				<methodcall>
					<method>getChannel</method>
					<instance>)</instance>
				</methodcall>
				<instance>
					<name>outChannel</name>
					<class>FileOutputStream</class>
				</instance>
				<methodcall>
					<method>getChannel</method>
					<instance>)</instance>
				</methodcall>
				<methodcall>
					<method>transferTo</method>
					<instance>inChannel</instance>
				</methodcall>
				<methodcall>
					<method>size</method>
					<instance>inChannel</instance>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame />
			<frame>
				<frame>
					<alternative>
						<case>
							<condition>if(inChannel != null)</condition>
							<methodcall>
								<method>close</method>
								<instance>inChannel</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(outChannel != null)</condition>
							<methodcall>
								<method>close</method>
								<instance>outChannel</instance>
							</methodcall>
						</case>
					</alternative>
				</frame>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame />
		</methoddefinition>
	</classdefinition>
	<classdefinition>
		<name>LogMain</name>
		<compositions>
			<entry>ConsoleHandler</entry>
			<entry>SimpleDateFormat</entry>
			<entry>Date</entry>
			<entry>File</entry>
			<entry>FileHandler</entry>
		</compositions>
		<aggregations>
			<instance>
				<name>con</name>
				<class>ConsoleHandler</class>
			</instance>
			<instance>
				<name>timelog</name>
				<class>SimpleDateFormat</class>
			</instance>
			<instance>
				<name>dlog</name>
				<class>Date</class>
			</instance>
			<methodcall>
				<method>getProperty</method>
				<instance>home=System</instance>
			</methodcall>
			<instance>
				<name>pumlDir</name>
				<class>File</class>
			</instance>
			<methodcall>
				<method>format</method>
				<instance>home+"/PUMLlog/"+timelog</instance>
			</methodcall>
			<alternative>
				<case>
					<condition>if(!pumlDir.exists())</condition>
					<frame>
						<methodcall>
							<method>mkdir</method>
							<instance>pumlDir</instance>
						</methodcall>
					</frame>
				</case>
				<methodcall>
					<method>catch</method>
				</methodcall>
				<frame />
			</alternative>
		</aggregations>
		<frame>
			<instance>
				<name>xml</name>
				<class>FileHandler</class>
			</instance>
		</frame>
		<methodcall>
			<method>catch</method>
		</methodcall>
		<frame>
			<methodcall>
				<method>printStackTrace</method>
				<instance>e</instance>
			</methodcall>
		</frame>
		<methodcall>
			<method>setLevel</method>
			<instance>log</instance>
		</methodcall>
		<methodcall>
			<method>setUseParentHandlers</method>
			<instance>log</instance>
		</methodcall>
		<methodcall>
			<method>setFormatter</method>
			<instance>xml</instance>
		</methodcall>
		<methodcall>
			<method>XMLFormatter</method>
		</methodcall>
		<methodcall>
			<method>setLevel</method>
			<instance>con</instance>
		</methodcall>
		<methodcall>
			<method>addHandler</method>
			<instance>log</instance>
		</methodcall>
		<methodcall>
			<method>addHandler</method>
			<instance>log</instance>
		</methodcall>
		<methodcall>
			<method>getRuntime</method>
			<instance>Runtime</instance>
		</methodcall>
		<methodcall>
			<method>addShutdownHook</method>
			<instance>)</instance>
		</methodcall>
		<methodcall>
			<method>Thread</method>
		</methodcall>
		<methodcall>
			<method>Runnable</method>
		</methodcall>
		<frame>
			<methoddefinition>
				<name>run</name>
				<result>void</result>
				<instance>
					<name>xmlf</name>
					<class>File</class>
				</instance>
				<frame>
					<methodcall>
						<method>deleteEmptyLog</method>
					</methodcall>
				</frame>
				<methodcall>
					<method>catch</method>
				</methodcall>
				<frame>
					<methodcall>
						<method>printStackTrace</method>
						<instance>e</instance>
					</methodcall>
				</frame>
			</methoddefinition>
		</frame>
	</classdefinition>
	<frame>
		<instance>
			<name>fr</name>
			<class>FileReader</class>
		</instance>
		<instance>
			<name>br</name>
			<class>BufferedReader</class>
		</instance>
		<methodcall>
			<method>readLine</method>
			<instance>br</instance>
		</methodcall>
		<methodcall>
			<method>close</method>
			<instance>br</instance>
		</methodcall>
		<methodcall>
			<method>close</method>
			<instance>fr</instance>
		</methodcall>
		<alternative>
			<case>
				<condition>if(xmlf.exists())</condition>
				<alternative>
					<case>
						<condition>if(empty==null)</condition>
						<methodcall>
							<method>deleteOnExit</method>
							<instance>xmlf</instance>
						</methodcall>
					</case>
				</alternative>
			</case>
		</alternative>
	</frame>
	<frame />
	<frame />
	<frame />
	<frame />
	<frame />
	<frame />
	<frame />
	<frame />
	<classdefinition>
		<name>CodeCollector</name>
		<compositions>
			<entry>ArrayList&lt;String&gt;</entry>
			<entry>String</entry>
			<entry>File</entry>
		</compositions>
		<aggregations>
			<instance>
				<name>paths</name>
				<class>ArrayList&lt;String&gt;</class>
			</instance>
			<instance>
				<name>paths2</name>
				<class>ArrayList&lt;String&gt;</class>
			</instance>
		</aggregations>
		<methodcall>
			<method>@SuppressWarnings</method>
		</methodcall>
		<methoddefinition>
			<name>getSourceCode</name>
			<result>ArrayList&lt;String&gt;</result>
			<instance>
				<name>sc</name>
				<class>String</class>
			</instance>
			<alternative>
				<case>
					<condition>if(!paths.isEmpty())</condition>
					<loop>
						<condition>while(contDir(paths))</condition>
						<loop>
							<condition>for(int j = 0; j &lt; paths.size(); j++)</condition>
							<instance>
								<name>file</name>
								<class>File</class>
							</instance>
							<alternative>
								<case>
									<condition>if(file.isDirectory())</condition>
									<methodcall>
										<method>listFiles</method>
										<instance>file</instance>
									</methodcall>
									<loop>
										<condition>for(int i = 0; i &lt; fArray.length; i++)
										</condition>
										<methodcall>
											<method>add</method>
											<instance>paths</instance>
										</methodcall>
										<methodcall>
											<method>getAbsolutePath</method>
											<instance>fArray[i]</instance>
										</methodcall>
									</loop>
								</case>
								<methodcall>
									<method>remove</method>
									<instance>paths</instance>
								</methodcall>
								<methodcall>
									<method>get</method>
									<instance>paths</instance>
								</methodcall>
							</alternative>
						</loop>
					</loop>
				</case>
				<methodcall>
					<method>=</method>
				</methodcall>
				<methodcall>
					<method>clone</method>
					<instance>paths</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(useCppAndHppFiles)</condition>
						<methodcall>
							<method>return</method>
						</methodcall>
						<methodcall>
							<method>collectCppAndHpp</method>
						</methodcall>
					</case>
				</alternative>
				<alternative>
					<case>
						<condition>if(useJavaFiles &amp;&amp; !useJarFiles)</condition>
						<instance>
							<name>result</name>
							<class>ArrayList&lt;String&gt;</class>
						</instance>
						<methodcall>
							<method>add</method>
							<instance>result</instance>
						</methodcall>
						<methodcall>
							<method>collectSimpleFiles</method>
						</methodcall>
						<methodcall>
							<method>return</method>
						</methodcall>
					</case>
					<case>
						<condition>else</condition>
						<alternative>
							<case>
								<condition>if(!useJavaFiles &amp;&amp; useJarFiles)</condition>
								<instance>
									<name>result</name>
									<class>ArrayList&lt;String&gt;</class>
								</instance>
								<methodcall>
									<method>add</method>
									<instance>result</instance>
								</methodcall>
								<methodcall>
									<method>collectJar</method>
								</methodcall>
								<methodcall>
									<method>return</method>
								</methodcall>
							</case>
						</alternative>
						<case>
							<condition>else</condition>
							<alternative>
								<case>
									<condition>if(useJavaFiles &amp;&amp; useJarFiles)</condition>
									<methodcall>
										<method>collectSimpleFiles</method>
									</methodcall>
									<methodcall>
										<method>collectJar</method>
									</methodcall>
									<instance>
										<name>result</name>
										<class>ArrayList&lt;String&gt;</class>
									</instance>
									<methodcall>
										<method>add</method>
										<instance>result</instance>
									</methodcall>
								</case>
								<case>
									<condition>else</condition>
									<methodcall>
										<method>IllegalArgumentException</method>
									</methodcall>
								</case>
							</alternative>
						</case>
					</case>
				</alternative>
			</alternative>
		</methoddefinition>
		<case>
			<condition>else</condition>
			<methodcall>
				<method>NullPointerException</method>
			</methodcall>
		</case>
	</classdefinition>
	<frame>
		<instance>
			<name>sc</name>
			<class>String</class>
		</instance>
		<frame>
			<loop>
				<condition>for(int i = 0; i &lt; paths2.size(); i++)</condition>
				<alternative>
					<case>
						<condition>if(paths2.get(i).endsWith(".jar"))</condition>
						<instance>
							<name>zFile</name>
							<class>ZipFile</class>
						</instance>
						<alternative>
							<case>
								<condition>if(zFile != null)</condition>
								<methodcall>
									<method>entries</method>
									<instance>zFile</instance>
								</methodcall>
								<loop>
									<condition>while(entries.hasMoreElements())</condition>
									<methodcall>
										<method>nextElement</method>
										<instance>entries</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>if(!entry.isDirectory() &amp;&amp;
												entry.getName().endsWith(".java"))</condition>
											<instance>
												<name>buffr</name>
												<class>BufferedReader</class>
											</instance>
											<loop>
												<condition>while((currLine = buffr.readLine()) != null)
												</condition>
											</loop>
										</case>
									</alternative>
									<case>
										<condition>else</condition>
									</case>
								</loop>
							</case>
							<alternative>
								<case>
									<condition>if(m == 0)</condition>
									<methodcall>
										<method>FileNotFoundException</method>
									</methodcall>
								</case>
							</alternative>
						</alternative>
					</case>
				</alternative>
			</loop>
		</frame>
		<methodcall>
			<method>catch</method>
		</methodcall>
		<frame>
			<methodcall>
				<method>printStackTrace</method>
				<instance>e</instance>
			</methodcall>
		</frame>
		<frame>
			<frame>
				<alternative>
					<case>
						<condition>if(buffr != null)</condition>
						<methodcall>
							<method>close</method>
							<instance>buffr</instance>
						</methodcall>
					</case>
				</alternative>
				<alternative>
					<case>
						<condition>if(zFile != null)</condition>
						<methodcall>
							<method>close</method>
							<instance>zFile</instance>
						</methodcall>
					</case>
				</alternative>
			</frame>
		</frame>
		<methodcall>
			<method>catch</method>
		</methodcall>
		<frame>
			<methodcall>
				<method>printStackTrace</method>
				<instance>ex</instance>
			</methodcall>
		</frame>
	</frame>
	<frame>
		<instance>
			<name>sc</name>
			<class>String</class>
		</instance>
		<loop>
			<condition>for(int i = 0; i &lt; paths.size(); i++)</condition>
			<frame>
				<alternative>
					<case>
						<condition>if(paths.get(i).endsWith(extension))</condition>
						<instance>
							<name>filer</name>
							<class>FileReader</class>
						</instance>
						<instance>
							<name>buffr</name>
							<class>BufferedReader</class>
						</instance>
						<loop>
							<condition>while((currLine = buffr.readLine()) != null)
							</condition>
						</loop>
					</case>
				</alternative>
			</frame>
		</loop>
		<methodcall>
			<method>catch</method>
		</methodcall>
		<frame>
			<methodcall>
				<method>printStackTrace</method>
				<instance>e</instance>
			</methodcall>
		</frame>
		<frame>
			<frame>
				<alternative>
					<case>
						<condition>if(filer != null)</condition>
						<methodcall>
							<method>close</method>
							<instance>filer</instance>
						</methodcall>
					</case>
				</alternative>
				<alternative>
					<case>
						<condition>if(buffr != null)</condition>
						<methodcall>
							<method>close</method>
							<instance>buffr</instance>
						</methodcall>
					</case>
				</alternative>
			</frame>
		</frame>
		<methodcall>
			<method>catch</method>
		</methodcall>
		<frame>
			<methodcall>
				<method>printStackTrace</method>
				<instance>ex</instance>
			</methodcall>
		</frame>
	</frame>
	<frame>
		<instance>
			<name>file</name>
			<class>File</class>
		</instance>
		<alternative>
			<case>
				<condition>if(file.isDirectory())</condition>
			</case>
		</alternative>
	</frame>
	<classdefinition>
		<name>Console</name>
		<extends>
			<entry>PUMLgenerator</entry>
		</extends>
		<compositions>
			<entry>String</entry>
			<entry>Scanner</entry>
			<entry>Options</entry>
			<entry>DefaultParser</entry>
			<entry>HelpFormatter</entry>
		</compositions>
		<aggregations />
		<instance>
			<name>entryClass</name>
			<class>String</class>
		</instance>
		<instance>
			<name>entryMethode</name>
			<class>String</class>
		</instance>
		<instance>
			<name>scanner</name>
			<class>Scanner</class>
		</instance>
		<methodcall>
			<method>showConsole</method>
		</methodcall>
		<frame>
			<instance>
				<name>options</name>
				<class>Options</class>
			</instance>
			<methodcall>
				<method>addOption</method>
				<instance>options</instance>
			</methodcall>
			<methodcall>
				<method>addOption</method>
				<instance>options</instance>
			</methodcall>
			<methodcall>
				<method>addOption</method>
				<instance>options</instance>
			</methodcall>
			<methodcall>
				<method>addOption</method>
				<instance>options</instance>
			</methodcall>
			<methodcall>
				<method>addOption</method>
				<instance>options</instance>
			</methodcall>
			<methodcall>
				<method>addOption</method>
				<instance>options</instance>
			</methodcall>
			<methodcall>
				<method>builder</method>
				<instance>Option</instance>
			</methodcall>
			<methodcall>
				<method>longOpt</method>
				<instance />
			</methodcall>
			<methodcall>
				<method>argName</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>hasArg</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>desc</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>build</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>addOption</method>
				<instance>options</instance>
			</methodcall>
			<methodcall>
				<method>builder</method>
				<instance>Option</instance>
			</methodcall>
			<methodcall>
				<method>longOpt</method>
				<instance />
			</methodcall>
			<methodcall>
				<method>argName</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>hasArg</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>valueSeparator</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>numberOfArgs</method>
				<instance>',')</instance>
			</methodcall>
			<methodcall>
				<method>desc</method>
				<instance>2)</instance>
			</methodcall>
			<methodcall>
				<method>build</method>
				<instance />
			</methodcall>
			<methodcall>
				<method>addOption</method>
				<instance>options</instance>
			</methodcall>
			<methodcall>
				<method>builder</method>
				<instance>Option</instance>
			</methodcall>
			<methodcall>
				<method>longOpt</method>
				<instance />
			</methodcall>
			<methodcall>
				<method>argName</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>hasArg</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>valueSeparator</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>numberOfArgs</method>
				<instance>')</instance>
			</methodcall>
			<methodcall>
				<method>desc</method>
				<instance />
			</methodcall>
			<methodcall>
				<method>build</method>
				<instance>)</instance>
			</methodcall>
			<methodcall>
				<method>addOption</method>
				<instance>options</instance>
			</methodcall>
			<instance>
				<name>commandParser</name>
				<class>DefaultParser</class>
			</instance>
			<frame>
				<methodcall>
					<method>parse</method>
					<instance>commandParser</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(cmd.hasOption("c"))</condition>
					</case>
				</alternative>
				<frame>
					<methodcall>
						<method>out</method>
						<instance>System</instance>
					</methodcall>
				</frame>
				<alternative>
					<case>
						<condition>if(cmd.hasOption("ijar"))</condition>
					</case>
				</alternative>
				<frame>
					<methodcall>
						<method>setUseJarFiles</method>
						<instance>codeCollector</instance>
					</methodcall>
				</frame>
				<alternative>
					<case>
						<condition>if(cmd.hasOption("ijava"))</condition>
					</case>
				</alternative>
				<frame>
					<methodcall>
						<method>setUseJavaFiles</method>
						<instance>codeCollector</instance>
					</methodcall>
				</frame>
				<alternative>
					<case>
						<condition>if(cmd.hasOption("i"))</condition>
					</case>
				</alternative>
				<frame>
					<alternative>
						<case>
							<condition>if(cmd.getOptionValue("o") != null)</condition>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
							<methodcall>
								<method>getOptionValue</method>
								<instance>cmd</instance>
							</methodcall>
						</case>
					</alternative>
					<loop>
						<condition>for(String k : cmd.getOptionValues("i"))</condition>
						<alternative>
							<case>
								<condition>if(!k.equals(""))</condition>
								<methodcall>
									<method>out</method>
									<instance>System</instance>
								</methodcall>
								<methodcall>
									<method>paths</method>
									<instance>+codeCollector</instance>
								</methodcall>
							</case>
						</alternative>
					</loop>
				</frame>
				<methodcall>
					<method>parser</method>
					<instance>PUMLgenerator</instance>
				</methodcall>
				<methodcall>
					<method>getSourceCode</method>
					<instance>codeCollector</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(cmd.hasOption("s"))</condition>
					</case>
				</alternative>
				<frame>
					<methodcall>
						<method>showAllClassesMethods</method>
					</methodcall>
				</frame>
				<alternative>
					<case>
						<condition>if(cmd.hasOption("o"))</condition>
					</case>
				</alternative>
				<frame>
					<methodcall>
						<method>getOptionValue</method>
						<instance>cmd</instance>
					</methodcall>
				</frame>
				<alternative>
					<case>
						<condition>if(cmd.hasOption("int"))</condition>
					</case>
				</alternative>
				<frame>
					<methodcall>
						<method>interactiveMode</method>
					</methodcall>
				</frame>
				<alternative>
					<case>
						<condition>if(cmd.hasOption("cc"))</condition>
					</case>
				</alternative>
				<frame>
					<methodcall>
						<method>createClassDiag</method>
					</methodcall>
				</frame>
				<alternative>
					<case>
						<condition>if(cmd.hasOption("cs"))</condition>
						<methodcall>
							<method>out</method>
							<instance>System</instance>
						</methodcall>
						<methodcall>
							<method>getOptionValues</method>
							<instance>cmd</instance>
						</methodcall>
						<methodcall>
							<method>getOptionValues</method>
							<instance>cmd</instance>
						</methodcall>
						<methodcall>
							<method>getOptionValues</method>
							<instance>cmd</instance>
						</methodcall>
						<methodcall>
							<method>getOptionValues</method>
							<instance>cmd</instance>
						</methodcall>
						<methodcall>
							<method>createSQDiagram</method>
						</methodcall>
					</case>
				</alternative>
			</frame>
			<case>
				<condition>else</condition>
			</case>
			<alternative>
				<case>
					<condition>if(!cmd.hasOption("i"))</condition>
					<methodcall>
						<method>out</method>
						<instance>System</instance>
					</methodcall>
				</case>
			</alternative>
		</frame>
		<methodcall>
			<method>catch</method>
		</methodcall>
		<frame>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>getOption</method>
				<instance>uoe</instance>
			</methodcall>
			<instance>
				<name>formatter</name>
				<class>HelpFormatter</class>
			</instance>
			<methodcall>
				<method>printHelp</method>
				<instance>formatter</instance>
			</methodcall>
		</frame>
	</classdefinition>
	<frame>
		<instance>
			<name>choice</name>
			<class>String</class>
		</instance>
		<methodcall>
			<method>out</method>
			<instance>System</instance>
		</methodcall>
		<loop>
			<condition>while((outputLocation.contentEquals("./")) &amp;&amp;
				(!(choice.contains("a") || choice.contains("p"))))</condition>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>nextLine</method>
				<instance>scanner</instance>
			</methodcall>
		</loop>
		<alternative>
			<case>
				<condition>if(choice.contains("p"))</condition>
			</case>
		</alternative>
		<frame>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>nextLine</method>
				<instance>scanner</instance>
			</methodcall>
		</frame>
		<loop>
			<condition>while(!(choice.contains("s") || choice.contains("k")))
			</condition>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>nextLine</method>
				<instance>scanner</instance>
			</methodcall>
		</loop>
		<methodcall>
			<method>out</method>
			<instance>System</instance>
		</methodcall>
		<methodcall>
			<method>setClassesI</method>
		</methodcall>
		<alternative>
			<case>
				<condition>if(choice.contains("s"))</condition>
			</case>
		</alternative>
		<frame>
			<loop>
				<condition>while((entryClass.isEmpty() || entryMethode.isEmpty()))
				</condition>
				<methodcall>
					<method>showAllClassesMethods</method>
				</methodcall>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
				<methodcall>
					<method>nextLine</method>
					<instance>scanner</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(Character.isLowerCase(entryClass.toCharArray()[0]))
						</condition>
						<methodcall>
							<method>out</method>
							<instance>System</instance>
						</methodcall>
					</case>
				</alternative>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
				<methodcall>
					<method>nextLine</method>
					<instance>scanner</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(Character.isUpperCase(entryMethode.toCharArray()[0]))
						</condition>
						<methodcall>
							<method>out</method>
							<instance>System</instance>
						</methodcall>
					</case>
				</alternative>
			</loop>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>createSQDiagram</method>
			</methodcall>
		</frame>
		<case>
			<condition>else</condition>
		</case>
		<frame>
			<methodcall>
				<method>createClassDiag</method>
			</methodcall>
		</frame>
		<methodcall>
			<method>out</method>
			<instance>System</instance>
		</methodcall>
	</frame>
	<frame>
		<frame>
			<methodcall>
				<method>savePUMLtoFile</method>
				<instance>outputPUML</instance>
			</methodcall>
			<methodcall>
				<method>getPUML</method>
				<instance>outputPUML</instance>
			</methodcall>
			<methodcall>
				<method>createDiagram</method>
				<instance>classDiagramGenerator</instance>
			</methodcall>
			<methodcall>
				<method>getParsingResult</method>
				<instance>parser</instance>
			</methodcall>
			<methodcall>
				<method>createPUMLfromString</method>
				<instance>outputPUML</instance>
			</methodcall>
			<methodcall>
				<method>getPUML</method>
				<instance>outputPUML</instance>
			</methodcall>
			<methodcall>
				<method>createDiagram</method>
				<instance>classDiagramGenerator</instance>
			</methodcall>
			<methodcall>
				<method>getParsingResult</method>
				<instance>parser</instance>
			</methodcall>
		</frame>
		<methodcall>
			<method>catch</method>
		</methodcall>
		<frame>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>printStackTrace</method>
				<instance>e</instance>
			</methodcall>
		</frame>
	</frame>
	<frame>
		<frame>
			<methodcall>
				<method>savePUMLtoFile</method>
				<instance>outputPUML</instance>
			</methodcall>
			<methodcall>
				<method>getPUML</method>
				<instance>outputPUML</instance>
			</methodcall>
			<methodcall>
				<method>createDiagram</method>
				<instance>seqDiagramGenerator</instance>
			</methodcall>
			<methodcall>
				<method>getParsingResult</method>
				<instance>parser</instance>
			</methodcall>
			<methodcall>
				<method>createPUMLfromString</method>
				<instance>outputPUML</instance>
			</methodcall>
			<methodcall>
				<method>getPUML</method>
				<instance>outputPUML</instance>
			</methodcall>
			<methodcall>
				<method>createDiagram</method>
				<instance>seqDiagramGenerator</instance>
			</methodcall>
			<methodcall>
				<method>getParsingResult</method>
				<instance>parser</instance>
			</methodcall>
		</frame>
		<methodcall>
			<method>catch</method>
		</methodcall>
		<frame>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>printStackTrace</method>
				<instance>e</instance>
			</methodcall>
		</frame>
	</frame>
	<frame>
		<frame>
			<methodcall>
				<method>parser</method>
				<instance>PUMLgenerator</instance>
			</methodcall>
			<methodcall>
				<method>getList</method>
				<instance>xmlHelper</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>getLength</method>
				<instance>classNodeList</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; classNodeList.getLength(); i++)
				</condition>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>classNodeList</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>i)</instance>
				</methodcall>
				<methodcall>
					<method>getList</method>
					<instance>xmlHelper</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>classNodeList</instance>
				</methodcall>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
				<methodcall>
					<method>getLength</method>
					<instance>methodeNodeList</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>classNodeList</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>i)</instance>
				</methodcall>
				<loop>
					<condition>for(int j = 0; j &lt;methodeNodeList.getLength(); j++)
					</condition>
					<methodcall>
						<method>out</method>
						<instance>System</instance>
					</methodcall>
					<methodcall>
						<method>item</method>
						<instance>methodeNodeList</instance>
					</methodcall>
					<methodcall>
						<method>getTextContent</method>
						<instance>j)</instance>
					</methodcall>
				</loop>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
			</loop>
		</frame>
		<methodcall>
			<method>catch</method>
		</methodcall>
		<frame>
			<methodcall>
				<method>printStackTrace</method>
				<instance>e</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
		</frame>
	</frame>
	<frame>
		<instance>
			<name>choice</name>
			<class>String</class>
		</instance>
		<frame>
			<methodcall>
				<method>parser</method>
				<instance>PUMLgenerator</instance>
			</methodcall>
			<methodcall>
				<method>getList</method>
				<instance>xmlHelper</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<methodcall>
				<method>getLength</method>
				<instance>classNodeList</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; classNodeList.getLength(); i++)
				</condition>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
				<methodcall>
					<method>item</method>
					<instance>classNodeList</instance>
				</methodcall>
				<methodcall>
					<method>getTextContent</method>
					<instance>i)</instance>
				</methodcall>
			</loop>
			<loop>
				<condition>for(int i = 0; i &lt; classNodeList.getLength(); i++)
				</condition>
				<loop>
					<condition>while(!(choice.contains("y") || choice.contains("n")))
					</condition>
					<methodcall>
						<method>out</method>
						<instance>System</instance>
					</methodcall>
					<methodcall>
						<method>item</method>
						<instance>classNodeList</instance>
					</methodcall>
					<methodcall>
						<method>getTextContent</method>
						<instance>i)</instance>
					</methodcall>
					<methodcall>
						<method>nextLine</method>
						<instance>scanner</instance>
					</methodcall>
				</loop>
				<alternative>
					<case>
						<condition>if(choice.contains("y"))</condition>
						<methodcall>
							<method>out</method>
							<instance>System</instance>
						</methodcall>
						<methodcall>
							<method>item</method>
							<instance>classNodeList</instance>
						</methodcall>
						<methodcall>
							<method>getTextContent</method>
							<instance>i)</instance>
						</methodcall>
					</case>
					<case>
						<condition>else</condition>
					</case>
					<alternative>
						<case>
							<condition>if(choice.contains("n"))</condition>
							<methodcall>
								<method>writeDocumentToConsole</method>
								<instance>xmlHelper</instance>
							</methodcall>
							<methodcall>
								<method>delNode</method>
								<instance>xmlHelper</instance>
							</methodcall>
							<methodcall>
								<method>item</method>
								<instance>classNodeList</instance>
							</methodcall>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
							<methodcall>
								<method>item</method>
								<instance>classNodeList</instance>
							</methodcall>
							<methodcall>
								<method>getTextContent</method>
								<instance>i)</instance>
							</methodcall>
							<methodcall>
								<method>writeDocumentToConsole</method>
								<instance>xmlHelper</instance>
							</methodcall>
						</case>
					</alternative>
				</alternative>
			</loop>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
			</frame>
		</frame>
		<methoddefinition>
			<name>getTestDoc</name>
			<result>Document</result>
			<frame>
				<methodcall>
					<method>newInstance</method>
					<instance>DocumentBuilderFactory</instance>
				</methodcall>
				<methodcall>
					<method>newDocumentBuilder</method>
					<instance>docBuildFact</instance>
				</methodcall>
				<methodcall>
					<method>parse</method>
					<instance>docBuild</instance>
				</methodcall>
				<methodcall>
					<method>File</method>
				</methodcall>
			</frame>
			<methodcall>
				<method>catch</method>
			</methodcall>
			<frame>
				<methodcall>
					<method>printStackTrace</method>
					<instance>e</instance>
				</methodcall>
			</frame>
		</methoddefinition>
	</frame>
	<classdefinition>
		<name>OutputPUML</name>
		<compositions>
			<entry>PUMLgenerator</entry>
			<entry>XmlHelperMethods</entry>
			<entry>BufferedWriter</entry>
			<entry>File</entry>
			<entry>SourceFileReader</entry>
			<entry>FileOutputStream</entry>
			<entry>SourceStringReader</entry>
		</compositions>
		<aggregations />
		<instance>
			<name>puml</name>
			<class>PUMLgenerator</class>
		</instance>
		<instance>
			<name>helper</name>
			<class>XmlHelperMethods</class>
		</instance>
		<methoddefinition>
			<name>getPUML</name>
			<parameters>
				<entry>
					<type>Document</type>
					<name>diagramData</name>
				</entry>
			</parameters>
			<result>String</result>
			<methodcall>
				<method>newInstance</method>
				<instance>XPathFactory</instance>
			</methodcall>
			<methodcall>
				<method>newXPath</method>
				<instance>xPathfactory</instance>
			</methodcall>
			<methodcall>
				<method>compile</method>
				<instance>xpath</instance>
			</methodcall>
			<methodcall>
				<method>=</method>
			</methodcall>
			<methodcall>
				<method>evaluate</method>
				<instance>expr</instance>
			</methodcall>
			<methodcall>
				<method>item</method>
				<instance>list</instance>
			</methodcall>
			<methodcall>
				<method>getNodeName</method>
				<instance>0)</instance>
			</methodcall>
			<alternative>
				<case>
					<condition>if(compare == "classdiagramm")</condition>
					<methodcall>
						<method>getList</method>
						<instance>helper</instance>
					</methodcall>
					<methodcall>
						<method>item</method>
						<instance>list</instance>
					</methodcall>
					<loop>
						<condition>for(int a = 0; a &lt; list.getLength(); a++)
						</condition>
						<methodcall>
							<method>item</method>
							<instance>list</instance>
						</methodcall>
						<methodcall>
							<method>getTextContent</method>
							<instance>a)</instance>
						</methodcall>
						<methodcall>
							<method>getList</method>
							<instance>helper</instance>
						</methodcall>
						<methodcall>
							<method>item</method>
							<instance>list</instance>
						</methodcall>
						<methodcall>
							<method>getParentNode</method>
							<instance>a)</instance>
						</methodcall>
						<methodcall>
							<method>getList</method>
							<instance>helper</instance>
						</methodcall>
						<methodcall>
							<method>item</method>
							<instance>list</instance>
						</methodcall>
						<methodcall>
							<method>getParentNode</method>
							<instance>a)</instance>
						</methodcall>
						<methodcall>
							<method>getList</method>
							<instance>helper</instance>
						</methodcall>
						<methodcall>
							<method>item</method>
							<instance>list</instance>
						</methodcall>
						<methodcall>
							<method>getParentNode</method>
							<instance>a)</instance>
						</methodcall>
						<alternative>
							<case>
								<condition>if((instanceList.getLength() &gt; 0) ||
									(varList.getLength()&gt;0) || (methodList.getLength()&gt;0))
								</condition>
							</case>
							<case>
								<condition>else</condition>
							</case>
						</alternative>
						<loop>
							<condition>for(int b=0; b&lt;instanceList.getLength(); b++)
							</condition>
							<methodcall>
								<method>getList</method>
								<instance>helper</instance>
							</methodcall>
							<methodcall>
								<method>item</method>
								<instance>instanceList</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(tempList.item(0).getTextContent().equals("private"))
									</condition>
								</case>
								<case>
									<condition>else</condition>
								</case>
								<alternative>
									<case>
										<condition>if(tempList.item(0).getTextContent().equals("public"))
										</condition>
									</case>
									<case>
										<condition>else</condition>
									</case>
									<alternative>
										<case>
											<condition>if(tempList.item(0).getTextContent().equals("protected"))
											</condition>
										</case>
										<case>
											<condition>else</condition>
										</case>
										<alternative>
											<case>
												<condition>if(tempList.item(0).getTextContent().equals("pprivate"))
												</condition>
											</case>
										</alternative>
										<methodcall>
											<method>getList</method>
											<instance>helper</instance>
										</methodcall>
										<methodcall>
											<method>item</method>
											<instance>instanceList</instance>
										</methodcall>
										<methodcall>
											<method>item</method>
											<instance>tempList</instance>
										</methodcall>
										<methodcall>
											<method>getTextContent</method>
											<instance>0)</instance>
										</methodcall>
										<methodcall>
											<method>getList</method>
											<instance>helper</instance>
										</methodcall>
										<methodcall>
											<method>item</method>
											<instance>instanceList</instance>
										</methodcall>
										<methodcall>
											<method>item</method>
											<instance>tempList</instance>
										</methodcall>
										<methodcall>
											<method>getTextContent</method>
											<instance>0)</instance>
										</methodcall>
									</alternative>
								</alternative>
								<loop>
									<condition>for(int b=0; b&lt;varList.getLength(); b++)
									</condition>
									<methodcall>
										<method>getList</method>
										<instance>helper</instance>
									</methodcall>
									<methodcall>
										<method>item</method>
										<instance>varList</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>if(tempList.item(0).getTextContent().equals("private"))
											</condition>
										</case>
										<case>
											<condition>else</condition>
										</case>
										<alternative>
											<case>
												<condition>if(tempList.item(0).getTextContent().equals("public"))
												</condition>
											</case>
											<case>
												<condition>else</condition>
											</case>
											<alternative>
												<case>
													<condition>if(tempList.item(0).getTextContent().equals("protected"))
													</condition>
												</case>
												<case>
													<condition>else</condition>
												</case>
												<alternative>
													<case>
														<condition>if(tempList.item(0).getTextContent().equals("pprivate"))
														</condition>
													</case>
												</alternative>
												<methodcall>
													<method>getList</method>
													<instance>helper</instance>
												</methodcall>
												<methodcall>
													<method>item</method>
													<instance>varList</instance>
												</methodcall>
												<methodcall>
													<method>item</method>
													<instance>tempList</instance>
												</methodcall>
												<methodcall>
													<method>getTextContent</method>
													<instance>0)</instance>
												</methodcall>
												<methodcall>
													<method>getList</method>
													<instance>helper</instance>
												</methodcall>
												<methodcall>
													<method>item</method>
													<instance>varList</instance>
												</methodcall>
												<methodcall>
													<method>item</method>
													<instance>tempList</instance>
												</methodcall>
												<methodcall>
													<method>getTextContent</method>
													<instance>0)</instance>
												</methodcall>
											</alternative>
										</alternative>
										<loop>
											<condition>for(int b=0; b&lt;methodList.getLength(); b++)
											</condition>
											<methodcall>
												<method>getList</method>
												<instance>helper</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>methodList</instance>
											</methodcall>
											<alternative>
												<case>
													<condition>if(tempList.item(0).getTextContent().equals("private"))
													</condition>
												</case>
												<case>
													<condition>else</condition>
												</case>
												<alternative>
													<case>
														<condition>if(tempList.item(0).getTextContent().equals("public"))
														</condition>
													</case>
													<case>
														<condition>else</condition>
													</case>
													<alternative>
														<case>
															<condition>if(tempList.item(0).getTextContent().equals("protected"))
															</condition>
														</case>
														<case>
															<condition>else</condition>
														</case>
														<alternative>
															<case>
																<condition>if(tempList.item(0).getTextContent().equals("pprivate"))
																</condition>
															</case>
														</alternative>
														<methodcall>
															<method>getList</method>
															<instance>helper</instance>
														</methodcall>
														<methodcall>
															<method>item</method>
															<instance>methodList</instance>
														</methodcall>
														<alternative>
															<case>
																<condition>if(tempList.getLength()&gt;=1)</condition>
																<methodcall>
																	<method>item</method>
																	<instance>+tempList</instance>
																</methodcall>
																<methodcall>
																	<method>getTextContent</method>
																	<instance>0)</instance>
																</methodcall>
															</case>
														</alternative>
														<methodcall>
															<method>getList</method>
															<instance>helper</instance>
														</methodcall>
														<methodcall>
															<method>item</method>
															<instance>methodList</instance>
														</methodcall>
														<alternative>
															<case>
																<condition>if(tempList.getLength()&gt;=1)</condition>
																<methodcall>
																	<method>item</method>
																	<instance>tempList</instance>
																</methodcall>
																<methodcall>
																	<method>getTextContent</method>
																	<instance>0)</instance>
																</methodcall>
															</case>
														</alternative>
														<methodcall>
															<method>getList</method>
															<instance>helper</instance>
														</methodcall>
														<methodcall>
															<method>item</method>
															<instance>methodList</instance>
														</methodcall>
														<methodcall>
															<method>item</method>
															<instance>tempList</instance>
														</methodcall>
														<methodcall>
															<method>getTextContent</method>
															<instance>0)</instance>
														</methodcall>
														<methodcall>
															<method>)+"</method>
														</methodcall>
													</alternative>
												</alternative>
												<interfacedefinition>
													<name>" + list.item(a).getTextContent() + "</name>
													<compositions />
													<aggregations />
													<frame />
													<methodcall>
														<method />
													</methodcall>
												</interfacedefinition>
											</alternative>
											<methodcall>
												<method>helperMethodCall</method>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>list</instance>
											</methodcall>
										</loop>
										<case>
											<condition>else</condition>
											<methodcall>
												<method>logger</method>
												<instance>PUMLgenerator</instance>
											</methodcall>
											<methodcall>
												<method>warning</method>
												<instance>)</instance>
											</methodcall>
										</case>
									</alternative>
								</loop>
							</alternative>
							<methoddefinition>
								<name>helperMethodCall</name>
								<parameters>
									<entry>
										<type>Node</type>
										<name>methodefNode</name>
									</entry>
									<entry>
										<type>String</type>
										<name>startClass</name>
									</entry>
								</parameters>
								<result>String</result>
								<methodcall>
									<method>getList</method>
									<instance>helper</instance>
								</methodcall>
								<methodcall>
									<method>item</method>
									<instance>methodNameList</instance>
								</methodcall>
								<methodcall>
									<method>getTextContent</method>
									<instance>0)</instance>
								</methodcall>
								<methodcall>
									<method>item</method>
									<instance>methodNameList</instance>
								</methodcall>
								<alternative>
									<case>
										<condition>if(!firstMethodCall)</condition>
									</case>
								</alternative>
								<frame>
									<loop>
										<condition>while(nextNode.getNodeName() != null)</condition>
									</loop>
									<frame>
										<alternative>
											<case>
												<condition>if(nextNode.getNodeName()=="name")</condition>
												<methodcall>
													<method>getList</method>
													<instance>helper</instance>
												</methodcall>
												<methodcall>
													<method>item</method>
													<instance>nextNode,"following-sibling::*")</instance>
												</methodcall>
											</case>
										</alternative>
										<alternative>
											<case>
												<condition>if(nextNode.getNodeName()=="alternative")
												</condition>
												<methodcall>
													<method>helperAlternativeCall</method>
												</methodcall>
											</case>
										</alternative>
										<alternative>
											<case>
												<condition>if(nextNode.getNodeName() == "methodcall")
												</condition>
												<methodcall>
													<method>getList</method>
													<instance>helper</instance>
												</methodcall>
												<methodcall>
													<method>item</method>
													<instance>)</instance>
												</methodcall>
												<methodcall>
													<method>helperMethodCallHandler</method>
												</methodcall>
											</case>
										</alternative>
										<methodcall>
											<method>getList</method>
											<instance>helper</instance>
										</methodcall>
										<methodcall>
											<method>item</method>
											<instance>nextNode,"following-sibling::*")</instance>
										</methodcall>
									</frame>
								</frame>
								<methodcall>
									<method>catch</method>
								</methodcall>
								<frame />
							</methoddefinition>
							<methoddefinition>
								<name>helperAlternativeCall</name>
								<parameters>
									<entry>
										<type>Node</type>
										<name>alternativeNode</name>
									</entry>
									<entry>
										<type>String</type>
										<name>startClass</name>
									</entry>
								</parameters>
								<result>String</result>
								<methodcall>
									<method>getList</method>
									<instance>helper</instance>
								</methodcall>
								<loop>
									<condition>for(int i=0; i&lt;cases.getLength(); i++)
									</condition>
									<methodcall>
										<method>getList</method>
										<instance>helper</instance>
									</methodcall>
									<methodcall>
										<method>item</method>
										<instance>cases</instance>
									</methodcall>
									<methodcall>
										<method>item</method>
										<instance>)</instance>
									</methodcall>
									<methodcall>
										<method>getTextContent</method>
										<instance>0)</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>if(first)</condition>
										</case>
										<case>
											<condition>else</condition>
										</case>
									</alternative>
									<methodcall>
										<method>getList</method>
										<instance>helper</instance>
									</methodcall>
									<methodcall>
										<method>item</method>
										<instance>cases</instance>
									</methodcall>
									<methodcall>
										<method>item</method>
										<instance>)</instance>
									</methodcall>
									<frame>
										<loop>
											<condition>while(nextNode.getNodeName() != null)</condition>
											<alternative>
												<case>
													<condition>if(nextNode.getNodeName()=="condition")
													</condition>
												</case>
											</alternative>
											<alternative>
												<case>
													<condition>if(nextNode.getNodeName() == "methodcall")
													</condition>
													<methodcall>
														<method>getList</method>
														<instance>helper</instance>
													</methodcall>
													<methodcall>
														<method>item</method>
														<instance>)</instance>
													</methodcall>
													<methodcall>
														<method>helperMethodCallHandler</method>
													</methodcall>
												</case>
											</alternative>
											<alternative>
												<case>
													<condition>if(nextNode.getNodeName()== "loop")</condition>
													<methodcall>
														<method>helperLoopCall</method>
													</methodcall>
												</case>
											</alternative>
											<methodcall>
												<method>getList</method>
												<instance>helper</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>nextNode,"following-sibling::*")</instance>
											</methodcall>
										</loop>
									</frame>
									<methodcall>
										<method>catch</method>
									</methodcall>
									<frame />
								</loop>
							</methoddefinition>
							<methoddefinition>
								<name>helperMethodCallHandler</name>
								<parameters>
									<entry>
										<type>String</type>
										<name>startClass</name>
									</entry>
									<entry>
										<type>Node</type>
										<name>methodCallNode</name>
									</entry>
								</parameters>
								<result>String</result>
								<frame>
									<loop>
										<condition>while(nextNode.getNodeName() != null)</condition>
										<alternative>
											<case>
												<condition>if(nextNode.getNodeName() == "instance")
												</condition>
												<methodcall>
													<method>getTextContent</method>
													<instance>nextNode</instance>
												</methodcall>
											</case>
											<case>
												<condition>else</condition>
											</case>
											<alternative>
												<case>
													<condition>if(nextNode.getNodeName() == "class")
													</condition>
													<methodcall>
														<method>getTextContent</method>
														<instance>nextNode</instance>
													</methodcall>
												</case>
												<case>
													<condition>else</condition>
												</case>
												<alternative>
													<case>
														<condition>if(nextNode.getNodeName() == "method")
														</condition>
														<methodcall>
															<method>getTextContent</method>
															<instance>nextNode</instance>
														</methodcall>
													</case>
													<case>
														<condition>else</condition>
													</case>
													<alternative>
														<case>
															<condition>if(nextNode.getNodeName() == "type")
															</condition>
															<methodcall>
																<method>getTextContent</method>
																<instance>nextNode</instance>
															</methodcall>
														</case>
													</alternative>
													<methodcall>
														<method>getList</method>
														<instance>helper</instance>
													</methodcall>
													<methodcall>
														<method>item</method>
														<instance>nextNode,"following-sibling::*")</instance>
													</methodcall>
												</alternative>
											</alternative>
										</alternative>
										<methodcall>
											<method>catch</method>
										</methodcall>
										<frame />
										<methodcall>
											<method>=</method>
										</methodcall>
										<alternative>
											<case>
												<condition>if(!toClass.equals("") &amp;&amp;
													!method.equals(""))</condition>
											</case>
											<case>
												<condition>else</condition>
											</case>
											<alternative>
												<case>
													<condition>if(toClass.equals("") &amp;&amp;
														!type.equals("unknown") &amp;&amp;
														!type.equals("recursive") &amp;&amp;
														!type.equals("handled"))</condition>
													<frame>
														<methodcall>
															<method>getList</method>
															<instance>helper</instance>
														</methodcall>
														<methodcall>
															<method>helperMethodCall</method>
														</methodcall>
														<methodcall>
															<method>item</method>
															<instance>callList</instance>
														</methodcall>
													</frame>
												</case>
												<methodcall>
													<method>catch</method>
												</methodcall>
												<frame />
											</alternative>
										</alternative>
										<case>
											<condition>else</condition>
										</case>
										<alternative>
											<case>
												<condition>if(type.equals("unknown"))</condition>
											</case>
											<case>
												<condition>else</condition>
											</case>
											<alternative>
												<case>
													<condition>if(type.equals("recursive"))</condition>
												</case>
												<case>
													<condition>else</condition>
												</case>
												<alternative>
													<case>
														<condition>if(type.equals("handled"))</condition>
													</case>
												</alternative>
											</alternative>
										</alternative>
										<methoddefinition>
											<name>helperLoopCall</name>
											<parameters>
												<entry>
													<type>Node</type>
													<name>loopNode</name>
												</entry>
												<entry>
													<type>String</type>
													<name>startClass</name>
												</entry>
											</parameters>
											<result>String</result>
											<methodcall>
												<method>getList</method>
												<instance>helper</instance>
											</methodcall>
											<methodcall>
												<method>item</method>
												<instance>loopList</instance>
											</methodcall>
											<frame>
												<loop>
													<condition>while(nextNode.getNodeName() != null)
													</condition>
													<alternative>
														<case>
															<condition>if(nextNode.getNodeName()=="condition")
															</condition>
															<methodcall>
																<method>getTextContent</method>
																<instance>nextNode</instance>
															</methodcall>
															<methodcall>
																<method>}if</method>
															</methodcall>
															<methodcall>
																<method>getNodeName</method>
																<instance>nextNode</instance>
															</methodcall>
															<frame>
																<methodcall>
																	<method>getList</method>
																	<instance>helper</instance>
																</methodcall>
																<methodcall>
																	<method>item</method>
																	<instance>)</instance>
																</methodcall>
																<methodcall>
																	<method>helperMethodCallHandler</method>
																</methodcall>
															</frame>
														</case>
														<methodcall>
															<method>getList</method>
															<instance>helper</instance>
														</methodcall>
														<methodcall>
															<method>item</method>
															<instance>nextNode,"following-sibling::*")</instance>
														</methodcall>
													</alternative>
												</loop>
												<methodcall>
													<method>catch</method>
												</methodcall>
												<frame />
											</frame>
											<methoddefinition>
												<name>savePUMLtoFile</name>
												<parameters>
													<entry>
														<type>String</type>
														<name>pumlCode</name>
													</entry>
													<entry>
														<type>String</type>
														<name>filePath</name>
													</entry>
												</parameters>
												<result>void</result>
												<instance>
													<name>bw</name>
													<class>BufferedWriter</class>
												</instance>
												<methodcall>
													<method>write</method>
													<instance>bw</instance>
												</methodcall>
												<methodcall>
													<method>flush</method>
													<instance>bw</instance>
												</methodcall>
												<methodcall>
													<method>close</method>
													<instance>bw</instance>
												</methodcall>
											</methoddefinition>
											<methoddefinition>
												<name>createPUMLfromFile</name>
												<parameters>
													<entry>
														<type>String</type>
														<name>sourcePath</name>
													</entry>
													<entry>
														<type>String</type>
														<name>destPath</name>
													</entry>
												</parameters>
												<result>void</result>
												<instance>
													<name>source</name>
													<class>File</class>
												</instance>
												<instance>
													<name>dest</name>
													<class>File</class>
												</instance>
												<instance>
													<name>reader</name>
													<class>SourceFileReader</class>
												</instance>
												<methodcall>
													<method>getGeneratedImages</method>
													<instance>reader</instance>
												</methodcall>
												<methodcall>
													<method>get</method>
													<instance>list</instance>
												</methodcall>
												<methodcall>
													<method>getPngFile</method>
													<instance>0)</instance>
												</methodcall>
											</methoddefinition>
											<methoddefinition>
												<name>createPUMLfromString</name>
												<parameters>
													<entry>
														<type>String</type>
														<name>filePath</name>
													</entry>
													<entry>
														<type>String</type>
														<name>pumlCode</name>
													</entry>
												</parameters>
												<result>void</result>
												<instance>
													<name>png</name>
													<class>FileOutputStream</class>
												</instance>
												<instance>
													<name>reader</name>
													<class>SourceStringReader</class>
												</instance>
												<methodcall>
													<method>outputImage</method>
													<instance>reader</instance>
												</methodcall>
												<methodcall>
													<method>getDescription</method>
													<instance>png)</instance>
												</methodcall>
											</methoddefinition>
										</methoddefinition>
										<classdefinition>
											<name>ParsingResult</name>
											<compositions />
											<aggregations>
												<entry>ArrayList&lt;String&gt;</entry>
												<entry>ArrayList&lt;ClassConnection&gt;</entry>
											</aggregations>
											<methoddefinition>
												<name>getClasses</name>
												<result>ArrayList&lt;String&gt;</result>
											</methoddefinition>
											<methoddefinition>
												<name>setClasses</name>
												<parameters>
													<entry>
														<type>ArrayList&lt;String&gt;</type>
														<name>classes</name>
													</entry>
												</parameters>
												<result>void</result>
											</methoddefinition>
											<methoddefinition>
												<name>getClassConnections</name>
												<result>ArrayList&lt;ClassConnection&gt;</result>
											</methoddefinition>
											<methoddefinition>
												<name>setClassConnections</name>
												<parameters>
													<entry>
														<type>ArrayList&lt;ClassConnection&gt;</type>
														<name>classConnections</name>
													</entry>
												</parameters>
												<result>void</result>
											</methoddefinition>
										</classdefinition>
										<classdefinition>
											<name>PathEditorPanel</name>
											<extends>
												<entry>JPanel</entry>
											</extends>
											<compositions>
												<entry>JPanel</entry>
												<entry>JButton</entry>
												<entry>DefaultListModel&lt;&gt;</entry>
												<entry>JList&lt;&gt;</entry>
											</compositions>
											<aggregations>
												<entry>ArrayList&lt;String&gt;</entry>
												<methodcall>
													<method>setLayout</method>
												</methodcall>
												<methodcall>
													<method>BorderLayout</method>
												</methodcall>
												<instance>
													<name>pnlDelete</name>
													<class>JPanel</class>
												</instance>
												<methodcall>
													<method>add</method>
												</methodcall>
												<instance>
													<name>btnDelete</name>
													<class>JButton</class>
												</instance>
												<methodcall>
													<method>addActionListener</method>
													<instance>btnDelete</instance>
												</methodcall>
												<methodcall>
													<method>ActionListener</method>
												</methodcall>
												<frame>
													<methoddefinition>
														<name>actionPerformed</name>
														<parameters>
															<entry>
																<type>ActionEvent</type>
																<name>e</name>
															</entry>
														</parameters>
														<result>void</result>
														<methodcall>
															<method>deleteItem</method>
														</methodcall>
													</methoddefinition>
												</frame>
												<methodcall>
													<method>add</method>
													<instance>pnlDelete</instance>
												</methodcall>
												<instance>
													<name>model</name>
													<class>DefaultListModel&lt;&gt;</class>
												</instance>
												<instance>
													<name>list</name>
													<class>JList&lt;&gt;</class>
												</instance>
												<methodcall>
													<method>add</method>
												</methodcall>
												<methodcall>
													<method>JScrollPane</method>
												</methodcall>
												<loop>
													<condition>for(int i = 0; i &lt; paths.size(); i++)
													</condition>
													<methodcall>
														<method>addElement</method>
														<instance>model</instance>
													</methodcall>
													<methodcall>
														<method>get</method>
														<instance>paths</instance>
													</methodcall>
												</loop>
											</aggregations>
											<methoddefinition>
												<name>deleteItem</name>
												<result>void</result>
												<methodcall>
													<method>getSelectedIndices</method>
													<instance>list</instance>
												</methodcall>
												<loop>
													<condition>for(int i = 0; i &lt; items.length; i++)
													</condition>
													<methodcall>
														<method>out</method>
														<instance>System</instance>
													</methodcall>
												</loop>
												<loop>
													<condition>for(int i = items.length - 1; i &gt;= 0; i--)
													</condition>
													<methodcall>
														<method>out</method>
														<instance>System</instance>
													</methodcall>
													<methodcall>
														<method>remove</method>
														<instance>model</instance>
													</methodcall>
													<methodcall>
														<method>remove</method>
														<instance>paths</instance>
													</methodcall>
												</loop>
											</methoddefinition>
										</classdefinition>
										<classdefinition>
											<name>PUMLgenerator</name>
											<compositions>
												<entry>CodeCollector</entry>
												<entry>ParserJava</entry>
												<entry>OutputPUML</entry>
												<entry>LogMain</entry>
												<entry>ClassDiagramGenerator</entry>
												<entry>SequenceDiagramGenerator</entry>
												<entry>XmlHelperMethods</entry>
												<entry>Console</entry>
												<entry>GUI_Swing</entry>
											</compositions>
											<aggregations />
											<instance>
												<name>codeCollector</name>
												<class>CodeCollector</class>
											</instance>
											<instance>
												<name>parser</name>
												<class>ParserJava</class>
											</instance>
											<instance>
												<name>outputPUML</name>
												<class>OutputPUML</class>
											</instance>
											<instance>
												<name>logger</name>
												<class>LogMain</class>
											</instance>
											<instance>
												<name>classDiagramGenerator</name>
												<class>ClassDiagramGenerator</class>
											</instance>
											<instance>
												<name>seqDiagramGenerator</name>
												<class>SequenceDiagramGenerator</class>
											</instance>
											<instance>
												<name>xmlHelper</name>
												<class>XmlHelperMethods</class>
											</instance>
											<methoddefinition>
												<name>main</name>
												<parameters>
													<entry>
														<type>String[]</type>
														<name>args</name>
													</entry>
												</parameters>
											</methoddefinition>
											<frame>
												<alternative>
													<case>
														<condition>if(args.length &gt; 0)</condition>
													</case>
												</alternative>
												<alternative>
													<case>
														<condition>if(!useGUI)</condition>
														<instance>
															<name>myConsole</name>
															<class>Console</class>
														</instance>
														<methodcall>
															<method>showConsole</method>
															<instance>myConsole</instance>
														</methodcall>
													</case>
													<case>
														<condition>else</condition>
														<instance>
															<name>myGUI_Swing</name>
															<class>GUI_Swing</class>
														</instance>
														<methodcall>
															<method>showGUI</method>
															<instance>myGUI_Swing</instance>
														</methodcall>
													</case>
												</alternative>
											</frame>
										</classdefinition>
									</loop>
								</frame>
							</methoddefinition>
						</loop>
					</loop>
				</case>
			</alternative>
		</methoddefinition>
	</classdefinition>
</source>