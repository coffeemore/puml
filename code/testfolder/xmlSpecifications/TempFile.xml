<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<source>
	<classdefinition>
		<name>ParserJava</name>
		<extends>
			<entry>XmlHelperMethods</entry>
		</extends>
		<implements>
			<entry>ParserIf</entry>
		</implements>
		<compositions />
		<aggregations />
		<classdefinition>
			<name>TokenResult</name>
			<compositions />
			<aggregations>
				<entry>int</entry>
				<entry>String</entry>
				<methodcall>
					<method>super</method>
				</methodcall>
			</aggregations>
			<methoddefinition>
				<name>getFoundToken</name>
				<result>int</result>
			</methoddefinition>
			<methoddefinition>
				<name>setFoundToken</name>
				<parameters>
					<entry>
						<type>int</type>
						<name>foundToken</name>
					</entry>
				</parameters>
				<result>void</result>
			</methoddefinition>
			<methoddefinition>
				<name>getData</name>
				<result>String</result>
			</methoddefinition>
			<methoddefinition>
				<name>setData</name>
				<parameters>
					<entry>
						<type>String</type>
						<name>data</name>
					</entry>
				</parameters>
				<result>void</result>
			</methoddefinition>
			<methoddefinition>
				<name>getSourceCode</name>
				<result>String</result>
			</methoddefinition>
			<methoddefinition>
				<name>setSourceCode</name>
				<parameters>
					<entry>
						<type>String</type>
						<name>sourceCode</name>
					</entry>
				</parameters>
				<result>void</result>
			</methoddefinition>
		</classdefinition>
		<methoddefinition>
			<name>rBraceContent</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>sourcec</name>
				</entry>
			</parameters>
			<result>TokenResult</result>
			<loop>
				<condition>do/while(rBrace != 0)</condition>
				<methodcall>
					<method>goToTokenWithName</method>
				</methodcall>
				<methodcall>
					<method>getData</method>
					<instance>res</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(res.getFoundToken() == 0)</condition>
					</case>
					<case>
						<condition>else</condition>
					</case>
				</alternative>
				<methodcall>
					<method>getSourceCode</method>
					<instance>res</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>)</instance>
				</methodcall>
			</loop>
			<methodcall>
				<method>TokenResult</method>
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>goToTokenWithName</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>source</name>
				</entry>
				<entry>
					<type>String[]</type>
					<name>name</name>
				</entry>
			</parameters>
			<result>TokenResult</result>
			<loop>
				<condition>for(int i = 0; i &lt; name.length; i++)</condition>
				<alternative>
					<case>
						<condition>if(source.substring(0,
							name[i].length()).equals(name[i]))</condition>
						<methodcall>
							<method>substring</method>
							<instance>source</instance>
						</methodcall>
						<methodcall>
							<method>length</method>
							<instance>name[i]</instance>
						</methodcall>
					</case>
				</alternative>
			</loop>
			<loop>
				<condition>while(!found &amp;&amp; !source.isEmpty())</condition>
				<methodcall>
					<method>substring</method>
					<instance>source</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>source</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(source.isEmpty())</condition>
					</case>
				</alternative>
				<loop>
					<condition>for(int i = 0; i &lt; name.length; i++)</condition>
					<alternative>
						<case>
							<condition>if(source.substring(0,
								name[i].length()).equals(name[i]))</condition>
						</case>
					</alternative>
				</loop>
			</loop>
			<methodcall>
				<method>trim</method>
				<instance>source</instance>
			</methodcall>
			<methodcall>
				<method>TokenResult</method>
			</methodcall>
			<methodcall>
				<method>Tokens</method>
			</methodcall>
		</methoddefinition>
		<methoddefinition>
			<name>buildTree</name>
			<parameters>
				<entry>
					<type>String</type>
					<name>sourcec</name>
				</entry>
			</parameters>
			<result>void</result>
			<methodcall>
				<method>newInstance</method>
				<instance>DocumentBuilderFactory</instance>
			</methodcall>
			<methodcall>
				<method>newDocumentBuilder</method>
				<instance>documentFactory</instance>
			</methodcall>
			<methodcall>
				<method>newDocument</method>
				<instance>documentBuilder</instance>
			</methodcall>
			<methodcall>
				<method>createElement</method>
				<instance>document</instance>
			</methodcall>
			<loop>
				<condition>for(int i = 0; i &lt; switchCaseCondition.length; i++)
				</condition>
			</loop>
			<loop>
				<condition>for(int i = 0; i &lt; switchCaseOn.length; i++)
				</condition>
			</loop>
			<methodcall>
				<method>appendChild</method>
				<instance>document</instance>
			</methodcall>
			<methodcall>
				<method>out</method>
				<instance>System</instance>
			</methodcall>
			<loop>
				<condition>while(!sourcec.isEmpty())</condition>
				<frame>
					<methodcall>
						<method>trim</method>
						<instance>sourcec</instance>
					</methodcall>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<loop>
								<condition>do</condition>
								<methodcall>
									<method>goToTokenWithName</method>
								</methodcall>
								<methodcall>
									<method>getSourceCode</method>
									<instance>res</instance>
								</methodcall>
								<methodcall>
									<method>out</method>
									<instance>System</instance>
								</methodcall>
								<methodcall>
									<method>getData</method>
									<instance>res</instance>
								</methodcall>
								<alternative>
									<case>
										<condition>if(res.getFoundToken() != 2)</condition>
										<methodcall>
											<method>substring</method>
											<instance>sourcec</instance>
										</methodcall>
									</case>
								</alternative>
							</loop>
						</case>
						<loop>
							<condition>while(res.getFoundToken() != 2)</condition>
						</loop>
						<methodcall>
							<method>substring</method>
							<instance>sourcec</instance>
						</methodcall>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getSourceCode</method>
								<instance>res</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getSourceCode</method>
								<instance>res</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getSourceCode</method>
								<instance>res</instance>
							</methodcall>
						</case>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getSourceCode</method>
								<instance>res</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(res.getFoundToken() == 0)</condition>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
								</case>
							</alternative>
							<methodcall>
								<method>getData</method>
								<instance>res</instance>
							</methodcall>
							<methodcall>
								<method>strip</method>
								<instance>classNameStr</instance>
							</methodcall>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>classNameEl</instance>
							</methodcall>
							<methodcall>
								<method>createTextNode</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>classDefinition</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>curNode</instance>
							</methodcall>
							<methodcall>
								<method>=</method>
							</methodcall>
							<methodcall>
								<method>getLastChild</method>
								<instance>curNode</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(sourcec.substring(0,
										compString.length()).equals(compString))</condition>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>length</method>
										<instance>compString</instance>
									</methodcall>
									<methodcall>
										<method>trim</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>goToTokenWithName</method>
									</methodcall>
									<methodcall>
										<method>getSourceCode</method>
										<instance>res</instance>
									</methodcall>
									<methodcall>
										<method>getData</method>
										<instance>res</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>if(res.getFoundToken() == 0)</condition>
											<methodcall>
												<method>substring</method>
												<instance>sourcec</instance>
											</methodcall>
										</case>
									</alternative>
									<methodcall>
										<method>strip</method>
										<instance>classExtendsStr</instance>
									</methodcall>
									<methodcall>
										<method>out</method>
										<instance>System</instance>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>classExtendsEl</instance>
									</methodcall>
									<methodcall>
										<method>createTextNode</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>classExtends</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>classDefinition</instance>
									</methodcall>
								</case>
							</alternative>
							<alternative>
								<case>
									<condition>if(sourcec.substring(0,
										compString.length()).equals(compString))</condition>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>classDefinition</instance>
									</methodcall>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>length</method>
										<instance>compString</instance>
									</methodcall>
									<loop>
										<condition>do</condition>
										<methodcall>
											<method>trim</method>
											<instance>sourcec</instance>
										</methodcall>
										<methodcall>
											<method>goToTokenWithName</method>
										</methodcall>
										<methodcall>
											<method>getSourceCode</method>
											<instance>res</instance>
										</methodcall>
										<alternative>
											<case>
												<condition>if(res.getFoundToken() == 0)</condition>
											</case>
										</alternative>
										<methodcall>
											<method>substring</method>
											<instance>sourcec</instance>
										</methodcall>
										<methodcall>
											<method>getData</method>
											<instance>res</instance>
										</methodcall>
										<methodcall>
											<method>strip</method>
											<instance>classImplementsStr</instance>
										</methodcall>
										<methodcall>
											<method>out</method>
											<instance>System</instance>
										</methodcall>
										<methodcall>
											<method>createElement</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>classImplementsEl</instance>
										</methodcall>
										<methodcall>
											<method>createTextNode</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>classImplements</instance>
										</methodcall>
									</loop>
								</case>
								<loop>
									<condition>while(!(curlBraceBool))</condition>
								</loop>
								<loop>
									<condition>while(!(sourcec.substring(0,
										// compString.length()).equals(compString)))
									</condition>
								</loop>
							</alternative>
						</case>
						<methodcall>
							<method>createElement</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>curNode</instance>
						</methodcall>
						<methodcall>
							<method>createElement</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>curNode</instance>
						</methodcall>
					</alternative>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0,
								compString.length()).equals(compString))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>length</method>
								<instance>compString</instance>
							</methodcall>
							<methodcall>
								<method>trim</method>
								<instance>sourcec</instance>
							</methodcall>
							<methodcall>
								<method>goToTokenWithName</method>
							</methodcall>
							<methodcall>
								<method>getSourceCode</method>
								<instance>res</instance>
							</methodcall>
							<methodcall>
								<method>getData</method>
								<instance>res</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(res.getFoundToken() == 0)</condition>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
								</case>
							</alternative>
							<methodcall>
								<method>strip</method>
								<instance>interfaceName</instance>
							</methodcall>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>ifNameEl</instance>
							</methodcall>
							<methodcall>
								<method>createTextNode</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>ifDefinition</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>curNode</instance>
							</methodcall>
							<methodcall>
								<method>=</method>
							</methodcall>
							<methodcall>
								<method>getLastChild</method>
								<instance>curNode</instance>
							</methodcall>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
							<methodcall>
								<method>getFirstChild</method>
								<instance>curNode</instance>
							</methodcall>
							<methodcall>
								<method>getTextContent</method>
								<instance>)</instance>
							</methodcall>
							<alternative>
								<case>
									<condition>if(sourcec.substring(0,
										compString.length()).equals(compString))</condition>
									<methodcall>
										<method>substring</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>length</method>
										<instance>compString</instance>
									</methodcall>
									<methodcall>
										<method>trim</method>
										<instance>sourcec</instance>
									</methodcall>
									<methodcall>
										<method>goToTokenWithName</method>
									</methodcall>
									<methodcall>
										<method>getData</method>
										<instance>res</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>if(res.getFoundToken() == 0)</condition>
											<methodcall>
												<method>substring</method>
												<instance>sourcec</instance>
											</methodcall>
										</case>
									</alternative>
									<methodcall>
										<method>strip</method>
										<instance>extendsName</instance>
									</methodcall>
									<methodcall>
										<method>out</method>
										<instance>System</instance>
									</methodcall>
								</case>
							</alternative>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>curNode</instance>
							</methodcall>
							<methodcall>
								<method>createElement</method>
								<instance>document</instance>
							</methodcall>
							<methodcall>
								<method>appendChild</method>
								<instance>curNode</instance>
							</methodcall>
						</case>
					</alternative>
					<methodcall>
						<method>// if</method>
					</methodcall>
					<methodcall>
						<method>getNodeName</method>
						<instance>curNode</instance>
					</methodcall>
					<methodcall>
						<method>equals</method>
						<instance>)</instance>
					</methodcall>
					<methodcall>
						<method>getNodeName</method>
						<instance>curNode</instance>
					</methodcall>
					<methodcall>
						<method>equals</method>
						<instance>)</instance>
					</methodcall>
					<methodcall>
						<method>getNodeName</method>
						<instance>curNode</instance>
					</methodcall>
					<methodcall>
						<method>equals</method>
						<instance>)</instance>
					</methodcall>
					<methodcall>
						<method>getNodeName</method>
						<instance>curNode</instance>
					</methodcall>
					<methodcall>
						<method>equals</method>
						<instance>)</instance>
					</methodcall>
					<methodcall>
						<method>//</method>
					</methodcall>
					<methodcall>
						<method>charAt</method>
						<instance>sourcec</instance>
					</methodcall>
					<methodcall>
						<method>charAt</method>
						<instance>'||sourcec</instance>
					</methodcall>
					<frame>
						<alternative>
							<case>
								<condition>if(!(curNode.getNodeName().equals("source")))
								</condition>
								<methodcall>
									<method>goToTokenWithName</method>
								</methodcall>
								<methodcall>
									<method>getData</method>
									<instance>res1</instance>
								</methodcall>
								<methodcall>
									<method>strip</method>
									<instance>)</instance>
								</methodcall>
								<methodcall>
									<method>replaceAll</method>
									<instance>functionData</instance>
								</methodcall>
								<methodcall>
									<method>replaceAll</method>
									<instance>functionData</instance>
								</methodcall>
								<alternative>
									<case>
										<condition>if(!(functionData.contains("{") ||
											functionData.contains(";")))</condition>
										<alternative>
											<case>
												<condition>if(functionData.contains("="))</condition>
												<methodcall>
													<method>replaceAll</method>
													<instance>functionData</instance>
												</methodcall>
											</case>
										</alternative>
										<methodcall>
											<method>split</method>
											<instance>functionData</instance>
										</methodcall>
										<alternative>
											<case>
												<condition>switch(prefixRBrace.length)/case 0</condition>
												<methodcall>
													<method>out</method>
													<instance>System</instance>
												</methodcall>
											</case>
											<case>
												<condition>switch(prefixRBrace.length)/case 1</condition>
												<alternative>
													<case>
														<condition>switch(prefixRBrace[0])/case "if"</condition>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>curNode</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>ifAlternativeNode</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>ifCaseNode</instance>
														</methodcall>
														<methodcall>
															<method>getSourceCode</method>
															<instance>res1</instance>
														</methodcall>
														<methodcall>
															<method>rBraceContent</method>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>ifConditionNode</instance>
														</methodcall>
														<methodcall>
															<method>createTextNode</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>getData</method>
															<instance>ifRes</instance>
														</methodcall>
														<methodcall>
															<method>getSourceCode</method>
															<instance>ifRes</instance>
														</methodcall>
														<methodcall>
															<method>substring</method>
															<instance>sourcec</instance>
														</methodcall>
														<methodcall>
															<method>trim</method>
															<instance>sourcec</instance>
														</methodcall>
														<alternative>
															<case>
																<condition>if(sourcec.charAt(0) == '{')</condition>
																<methodcall>
																	<method>substring</method>
																	<instance>sourcec</instance>
																</methodcall>
																<methodcall>
																	<method>=</method>
																</methodcall>
																<methodcall>
																	<method>getLastChild</method>
																	<instance>curNode</instance>
																</methodcall>
																<methodcall>
																	<method>out</method>
																	<instance>System</instance>
																</methodcall>
																<methodcall>
																	<method>getNodeName</method>
																	<instance>curNode</instance>
																</methodcall>
																<methodcall>
																	<method>=</method>
																</methodcall>
																<methodcall>
																	<method>getLastChild</method>
																	<instance>curNode</instance>
																</methodcall>
																<methodcall>
																	<method>out</method>
																	<instance>System</instance>
																</methodcall>
																<methodcall>
																	<method>getNodeName</method>
																	<instance>curNode</instance>
																</methodcall>
															</case>
														</alternative>
													</case>
													<case>
														<condition>switch(prefixRBrace[0])/case "for"</condition>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>forLoopNode</instance>
														</methodcall>
														<methodcall>
															<method>getSourceCode</method>
															<instance>res1</instance>
														</methodcall>
														<methodcall>
															<method>rBraceContent</method>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance />
														</methodcall>
														<methodcall>
															<method>createTextNode</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>getData</method>
															<instance>forRes</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>curNode</instance>
														</methodcall>
														<methodcall>
															<method>getSourceCode</method>
															<instance>forRes</instance>
														</methodcall>
														<methodcall>
															<method>substring</method>
															<instance>sourcec</instance>
														</methodcall>
														<methodcall>
															<method>trim</method>
															<instance>sourcec</instance>
														</methodcall>
														<alternative>
															<case>
																<condition>if(sourcec.charAt(0) == '{')</condition>
																<methodcall>
																	<method>substring</method>
																	<instance>sourcec</instance>
																</methodcall>
																<methodcall>
																	<method>=</method>
																</methodcall>
																<methodcall>
																	<method>getLastChild</method>
																	<instance>curNode</instance>
																</methodcall>
															</case>
														</alternative>
													</case>
													<case>
														<condition>switch(prefixRBrace[0])/case "while"
														</condition>
														<frame>
															<alternative>
																<case>
																	<condition>if(curNode.getLastChild().getFirstChild().getTextContent().equals("do"))
																	</condition>
																	<methodcall>
																		<method>getSourceCode</method>
																		<instance>res1</instance>
																	</methodcall>
																	<methodcall>
																		<method>rBraceContent</method>
																	</methodcall>
																	<methodcall>
																		<method>getLastChild</method>
																		<instance>curNode</instance>
																	</methodcall>
																	<methodcall>
																		<method>getFirstChild</method>
																		<instance>)</instance>
																	</methodcall>
																	<methodcall>
																		<method>setTextContent</method>
																		<instance />
																	</methodcall>
																	<methodcall>
																		<method>getData</method>
																		<instance>whileRes</instance>
																	</methodcall>
																	<methodcall>
																		<method>getSourceCode</method>
																		<instance>whileRes</instance>
																	</methodcall>
																	<methodcall>
																		<method>substring</method>
																		<instance>sourcec</instance>
																	</methodcall>
																	<methodcall>
																		<method>trim</method>
																		<instance>sourcec</instance>
																	</methodcall>
																</case>
																<case>
																	<condition>else</condition>
																	<methodcall>
																		<method>createElement</method>
																		<instance>document</instance>
																	</methodcall>
																	<methodcall>
																		<method>createElement</method>
																		<instance>document</instance>
																	</methodcall>
																	<methodcall>
																		<method>appendChild</method>
																		<instance>whileLoopNode</instance>
																	</methodcall>
																	<methodcall>
																		<method>getSourceCode</method>
																		<instance>res1</instance>
																	</methodcall>
																	<methodcall>
																		<method>rBraceContent</method>
																	</methodcall>
																	<methodcall>
																		<method>appendChild</method>
																		<instance>whileConditionNode</instance>
																	</methodcall>
																	<methodcall>
																		<method>createTextNode</method>
																		<instance>document</instance>
																	</methodcall>
																	<methodcall>
																		<method>getData</method>
																		<instance>whileRes</instance>
																	</methodcall>
																	<methodcall>
																		<method>appendChild</method>
																		<instance>curNode</instance>
																	</methodcall>
																	<methodcall>
																		<method>getSourceCode</method>
																		<instance>whileRes</instance>
																	</methodcall>
																	<methodcall>
																		<method>substring</method>
																		<instance>sourcec</instance>
																	</methodcall>
																	<methodcall>
																		<method>trim</method>
																		<instance>sourcec</instance>
																	</methodcall>
																	<alternative>
																		<case>
																			<condition>if(sourcec.charAt(0) == '{')</condition>
																			<methodcall>
																				<method>substring</method>
																				<instance>sourcec</instance>
																			</methodcall>
																			<methodcall>
																				<method>=</method>
																			</methodcall>
																			<methodcall>
																				<method>getLastChild</method>
																				<instance>curNode</instance>
																			</methodcall>
																		</case>
																	</alternative>
																</case>
															</alternative>
														</frame>
														<methodcall>
															<method>catch</method>
														</methodcall>
														<frame>
															<methodcall>
																<method>createElement</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>createElement</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>whileLoopNode</instance>
															</methodcall>
															<methodcall>
																<method>getSourceCode</method>
																<instance>res1</instance>
															</methodcall>
															<methodcall>
																<method>rBraceContent</method>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance />
															</methodcall>
															<methodcall>
																<method>createTextNode</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>getData</method>
																<instance>whileRes</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>curNode</instance>
															</methodcall>
															<methodcall>
																<method>getSourceCode</method>
																<instance>whileRes</instance>
															</methodcall>
															<methodcall>
																<method>substring</method>
																<instance>sourcec</instance>
															</methodcall>
															<methodcall>
																<method>trim</method>
																<instance>sourcec</instance>
															</methodcall>
															<alternative>
																<case>
																	<condition>if(sourcec.charAt(0) == '{')</condition>
																	<methodcall>
																		<method>substring</method>
																		<instance>sourcec</instance>
																	</methodcall>
																	<methodcall>
																		<method>=</method>
																	</methodcall>
																	<methodcall>
																		<method>getLastChild</method>
																		<instance>curNode</instance>
																	</methodcall>
																</case>
															</alternative>
														</frame>
													</case>
													<case>
														<condition>switch(prefixRBrace[0])/case wegen
															verschachtelten switch cases überarbeiten
															case "switch"
														</condition>
														<methodcall>
															<method>createElement</method>
															<instance>document</instance>
														</methodcall>
														<methodcall>
															<method>appendChild</method>
															<instance>curNode</instance>
														</methodcall>
														<methodcall>
															<method>getSourceCode</method>
															<instance>res1</instance>
														</methodcall>
														<methodcall>
															<method>goToTokenWithName</method>
														</methodcall>
														<alternative>
															<case>
																<condition>if(switchCaseOn[curSwitch])</condition>
															</case>
														</alternative>
														<methodcall>
															<method>=</method>
														</methodcall>
														<methodcall>
															<method>getData</method>
															<instance>switchRes</instance>
														</methodcall>
														<methodcall>
															<method>getSourceCode</method>
															<instance>switchRes</instance>
														</methodcall>
														<methodcall>
															<method>substring</method>
															<instance>sourcec</instance>
														</methodcall>
														<methodcall>
															<method>trim</method>
															<instance>sourcec</instance>
														</methodcall>
														<alternative>
															<case>
																<condition>if(sourcec.charAt(0) == '{')</condition>
																<methodcall>
																	<method>substring</method>
																	<instance>sourcec</instance>
																</methodcall>
																<methodcall>
																	<method>=</method>
																</methodcall>
																<methodcall>
																	<method>getLastChild</method>
																	<instance>curNode</instance>
																</methodcall>
															</case>
															<case>
																<condition>else</condition>
																<methodcall>
																	<method>out</method>
																	<instance>System</instance>
																</methodcall>
															</case>
														</alternative>
													</case>
													<case>
														<condition>switch(prefixRBrace[0])/default</condition>
														<methodcall>
															<method>method</method>
														</methodcall>
														<methodcall>
															<method>method</method>
														</methodcall>
														<methodcall>
															<method>method1</method>
															<instance>Object</instance>
														</methodcall>
														<methodcall>
															<method>method2</method>
															<instance>)</instance>
														</methodcall>
														<methodcall>
															<method>out</method>
															<instance>System</instance>
														</methodcall>
														<alternative>
															<case>
																<condition>if(prefixRBrace[0].contains("."))</condition>
																<methodcall>
																	<method>split</method>
																	<instance>prefixRBrace[0]</instance>
																</methodcall>
																<methodcall>
																	<method>createElement</method>
																	<instance>document</instance>
																</methodcall>
																<methodcall>
																	<method>createElement</method>
																	<instance>document</instance>
																</methodcall>
																<methodcall>
																	<method>createElement</method>
																	<instance>document</instance>
																</methodcall>
																<methodcall>
																	<method>appendChild</method>
																	<instance>curNode</instance>
																</methodcall>
																<methodcall>
																	<method>appendChild</method>
																	<instance>methodCallNode</instance>
																</methodcall>
																<alternative>
																	<case>
																		<condition>if(methodArray[0].equals("this"))
																		</condition>
																		<alternative>
																			<case>
																				<condition>if(prefixRBrace[0].split("\\.").length
																					&gt;= 3)</condition>
																				<methodcall>
																					<method>appendChild</method>
																					<instance>methodCallNode</instance>
																				</methodcall>
																				<methodcall>
																					<method>createElement</method>
																					<instance>document</instance>
																				</methodcall>
																				<methodcall>
																					<method>appendChild</method>
																					<instance>validNode</instance>
																				</methodcall>
																				<methodcall>
																					<method>createTextNode</method>
																					<instance>document</instance>
																				</methodcall>
																				<methodcall>
																					<method>appendChild</method>
																					<instance>methodCallNode</instance>
																				</methodcall>
																				<methodcall>
																					<method>appendChild</method>
																					<instance>methodNode</instance>
																				</methodcall>
																				<methodcall>
																					<method>createTextNode</method>
																					<instance>document</instance>
																				</methodcall>
																				<methodcall>
																					<method>appendChild</method>
																					<instance>methodInstanceNode</instance>
																				</methodcall>
																				<methodcall>
																					<method>createTextNode</method>
																					<instance>document</instance>
																				</methodcall>
																				<methodcall>
																					<method>getSourceCode</method>
																					<instance>res1</instance>
																				</methodcall>
																			</case>
																			<case>
																				<condition>else</condition>
																				<methodcall>
																					<method>substring</method>
																					<instance>prefixRBrace[0]</instance>
																				</methodcall>
																				<methodcall>
																					<method>appendChild</method>
																					<instance>methodNode</instance>
																				</methodcall>
																				<methodcall>
																					<method>createTextNode</method>
																					<instance>document</instance>
																				</methodcall>
																				<methodcall>
																					<method>getSourceCode</method>
																					<instance>res1</instance>
																				</methodcall>
																			</case>
																		</alternative>
																	</case>
																	<case>
																		<condition>else</condition>
																		<methodcall>
																			<method>appendChild</method>
																			<instance>methodCallNode</instance>
																		</methodcall>
																		<methodcall>
																			<method>appendChild</method>
																			<instance>methodNode</instance>
																		</methodcall>
																		<methodcall>
																			<method>createTextNode</method>
																			<instance>document</instance>
																		</methodcall>
																		<methodcall>
																			<method>appendChild</method>
																			<instance>methodInstanceNode</instance>
																		</methodcall>
																		<methodcall>
																			<method>createTextNode</method>
																			<instance>document</instance>
																		</methodcall>
																		<methodcall>
																			<method>getSourceCode</method>
																			<instance>res1</instance>
																		</methodcall>
																	</case>
																</alternative>
															</case>
															<case>
																<condition>else</condition>
																<methodcall>
																	<method>createElement</method>
																	<instance>document</instance>
																</methodcall>
																<methodcall>
																	<method>createElement</method>
																	<instance>document</instance>
																</methodcall>
																<methodcall>
																	<method>appendChild</method>
																	<instance>curNode</instance>
																</methodcall>
																<methodcall>
																	<method>appendChild</method>
																	<instance>methodCallNode</instance>
																</methodcall>
																<methodcall>
																	<method>appendChild</method>
																	<instance>methodNode</instance>
																</methodcall>
																<methodcall>
																	<method>createTextNode</method>
																	<instance>document</instance>
																</methodcall>
																<methodcall>
																	<method>getSourceCode</method>
																	<instance>res1</instance>
																</methodcall>
															</case>
														</alternative>
													</case>
												</alternative>
											</case>
											<case>
												<condition>switch(prefixRBrace.length)/case 2</condition>
												<case>
													<condition>else</condition>
												</case>
												<alternative>
													<case>
														<condition>switch(prefixRBrace[0])/case "else"</condition>
													</case>
													<case>
														<condition>switch(prefixRBrace[0])/case "new"</condition>
													</case>
													<case>
														<condition>switch(prefixRBrace[0])/case "private"
														</condition>
													</case>
													<case>
														<condition>switch(prefixRBrace[0])/case "public"
														</condition>
														<alternative>
															<case>
																<condition>if(prefixRBrace[1]
																	.equals(curNode.getElementsByTagName("name").item(0).getTextContent()))
																</condition>
																<methodcall>
																	<method>out</method>
																	<instance>System</instance>
																</methodcall>
																<methodcall>
																	<method>getSourceCode</method>
																	<instance>res1</instance>
																</methodcall>
																<methodcall>
																	<method>substring</method>
																	<instance>sourcec</instance>
																</methodcall>
																<methodcall>
																	<method>=</method>
																</methodcall>
																<methodcall>
																	<method>getChildwithName</method>
																</methodcall>
																<methodcall>
																	<method>=</method>
																</methodcall>
																<methodcall>
																	<method>getChildwithName</method>
																</methodcall>
																<loop>
																	<condition>do</condition>
																	<methodcall>
																		<method>goToTokenWithName</method>
																	</methodcall>
																	<methodcall>
																		<method>getData</method>
																		<instance>res2</instance>
																	</methodcall>
																	<methodcall>
																		<method>strip</method>
																		<instance>)</instance>
																	</methodcall>
																	<methodcall>
																		<method>split</method>
																		<instance>functionData2</instance>
																	</methodcall>
																	<alternative>
																		<case>
																			<condition>if(argumentConstructor.length == 2)
																			</condition>
																			<loop>
																				<condition>for(int i = 0; i &lt;
																					classComp.getElementsByTagName("entry")
																					.getLength(); i++)
																				</condition>
																				<alternative>
																					<case>
																						<condition>if(classComp.getElementsByTagName("entry").item(i).getTextContent()
																							.equals(argumentConstructor[0]))
																						</condition>
																					</case>
																				</alternative>
																			</loop>
																		</case>
																		<alternative>
																			<case>
																				<condition>if(inCompositions == false)</condition>
																				<loop>
																					<condition>for(int i = 0; i &lt;
																						classAggr.getElementsByTagName("entry")
																						.getLength(); i++)
																					</condition>
																					<alternative>
																						<case>
																							<condition>if(classAggr.getElementsByTagName("entry").item(i).getTextContent()
																								.equals(argumentConstructor[0]))
																							</condition>
																						</case>
																					</alternative>
																				</loop>
																			</case>
																			<alternative>
																				<case>
																					<condition>if(inAggregations == false)</condition>
																					<methodcall>
																						<method>createElement</method>
																						<instance>document</instance>
																					</methodcall>
																					<methodcall>
																						<method>appendChild</method>
																						<instance>classAggr</instance>
																					</methodcall>
																					<methodcall>
																						<method>appendChild</method>
																						<instance>classCompositionEl</instance>
																					</methodcall>
																					<methodcall>
																						<method>createTextNode</method>
																						<instance>document</instance>
																					</methodcall>
																				</case>
																			</alternative>
																		</alternative>
																	</alternative>
																</loop>
															</case>
															<methodcall>
																<method>getSourceCode</method>
																<instance>res2</instance>
															</methodcall>
															<methodcall>
																<method>substring</method>
																<instance>sourcec</instance>
															</methodcall>
														</alternative>
														<loop>
															<condition>while(res2.getFoundToken() != 0)</condition>
														</loop>
														<methodcall>
															<method>=</method>
														</methodcall>
														<methodcall>
															<method>getLastChild</method>
															<instance>curNode</instance>
														</methodcall>
														<methodcall>
															<method>trim</method>
															<instance>sourcec</instance>
														</methodcall>
														<alternative>
															<case>
																<condition>if(sourcec.charAt(0) == '{')</condition>
																<methodcall>
																	<method>substring</method>
																	<instance>sourcec</instance>
																</methodcall>
																<methodcall>
																	<method>createElement</method>
																	<instance>document</instance>
																</methodcall>
																<methodcall>
																	<method>appendChild</method>
																	<instance>curNode</instance>
																</methodcall>
																<methodcall>
																	<method>=</method>
																</methodcall>
																<methodcall>
																	<method>getLastChild</method>
																	<instance>curNode</instance>
																</methodcall>
															</case>
														</alternative>
													</case>
												</alternative>
											</case>
											<case>
												<condition>switch(prefixRBrace.length)/default</condition>
												<methodcall>
													<method>out</method>
													<instance>System</instance>
												</methodcall>
											</case>
										</alternative>
										<methodcall>
											<method>goToTokenWithName</method>
										</methodcall>
										<methodcall>
											<method>getData</method>
											<instance>resFD</instance>
										</methodcall>
										<methodcall>
											<method>strip</method>
											<instance>)</instance>
										</methodcall>
										<alternative>
											<case>
												<condition>if((prefixRBrace[0].equals("public") ||
													prefixRBrace[0].equals("private"))
													&amp;&amp; !prefixRBrace[1].equals("class") &amp;&amp;
													!functionDataFD.contains(";"))</condition>
												<methodcall>
													<method>createElement</method>
													<instance>document</instance>
												</methodcall>
												<methodcall>
													<method>createElement</method>
													<instance>document</instance>
												</methodcall>
												<methodcall>
													<method>appendChild</method>
													<instance>nameNode</instance>
												</methodcall>
												<methodcall>
													<method>createTextNode</method>
													<instance>document</instance>
												</methodcall>
												<methodcall>
													<method>appendChild</method>
													<instance>methoddefinitionNode</instance>
												</methodcall>
												<methodcall>
													<method>appendChild</method>
													<instance>curNode</instance>
												</methodcall>
												<methodcall>
													<method>=</method>
												</methodcall>
												<methodcall>
													<method>getLastChild</method>
													<instance>curNode</instance>
												</methodcall>
												<methodcall>
													<method>getSourceCode</method>
													<instance>res1</instance>
												</methodcall>
												<methodcall>
													<method>substring</method>
													<instance>sourcec</instance>
												</methodcall>
												<methodcall>
													<method>createElement</method>
													<instance>document</instance>
												</methodcall>
												<loop>
													<condition>do</condition>
													<methodcall>
														<method>goToTokenWithName</method>
													</methodcall>
													<methodcall>
														<method>getData</method>
														<instance>res2</instance>
													</methodcall>
													<methodcall>
														<method>strip</method>
														<instance>)</instance>
													</methodcall>
													<methodcall>
														<method>split</method>
														<instance>functionData2</instance>
													</methodcall>
													<alternative>
														<case>
															<condition>if(parameterFunction.length == 2)</condition>
															<methodcall>
																<method>createElement</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>createElement</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>createElement</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>typePNode</instance>
															</methodcall>
															<methodcall>
																<method>createTextNode</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>namePNode</instance>
															</methodcall>
															<methodcall>
																<method>createTextNode</method>
																<instance>document</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>entryPNode</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>entryPNode</instance>
															</methodcall>
															<methodcall>
																<method>appendChild</method>
																<instance>parametersNode</instance>
															</methodcall>
														</case>
													</alternative>
													<methodcall>
														<method>getSourceCode</method>
														<instance>res2</instance>
													</methodcall>
													<methodcall>
														<method>substring</method>
														<instance>sourcec</instance>
													</methodcall>
												</loop>
											</case>
											<loop>
												<condition>while(res2.getFoundToken() != 0)</condition>
											</loop>
											<alternative>
												<case>
													<condition>if(parametersNode.hasChildNodes())</condition>
												</case>
											</alternative>
											<methodcall>
												<method>appendChild</method>
												<instance>methoddefinitionNode</instance>
											</methodcall>
											<methodcall>
												<method>createElement</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>resultNode</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>methoddefinitionNode</instance>
											</methodcall>
											<methodcall>
												<method>trim</method>
												<instance>sourcec</instance>
											</methodcall>
											<alternative>
												<case>
													<condition>if(sourcec.substring(0, 6).equals("throws"))
													</condition>
													<loop>
														<condition>while(!(sourcec.charAt(0) == '{'))</condition>
														<methodcall>
															<method>substring</method>
															<instance>sourcec</instance>
														</methodcall>
													</loop>
												</case>
											</alternative>
										</alternative>
										<alternative>
											<case>
												<condition>if(sourcec.charAt(0) == '{')</condition>
												<methodcall>
													<method>substring</method>
													<instance>sourcec</instance>
												</methodcall>
												<methodcall>
													<method>=</method>
												</methodcall>
												<methodcall>
													<method>getLastChild</method>
													<instance>curNode</instance>
												</methodcall>
											</case>
										</alternative>
										<methodcall>
											<method>getSourceCode</method>
											<instance>res1</instance>
										</methodcall>
										<methodcall>
											<method>=</method>
										</methodcall>
										<methodcall>
											<method>getLastChild</method>
											<instance>curNode</instance>
										</methodcall>
									</case>
								</alternative>
								<alternative>
									<case>
										<condition>if((prefixRBrace[0].equals("public") ||
											prefixRBrace[0].equals("private"))
											&amp;&amp; prefixRBrace[1].equals("static"))</condition>
										<methodcall>
											<method>createElement</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>createElement</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>nameNode</instance>
										</methodcall>
										<methodcall>
											<method>createTextNode</method>
											<instance>document</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>methoddefinitionNode</instance>
										</methodcall>
										<methodcall>
											<method>appendChild</method>
											<instance>curNode</instance>
										</methodcall>
										<methodcall>
											<method>=</method>
										</methodcall>
										<methodcall>
											<method>getLastChild</method>
											<instance>curNode</instance>
										</methodcall>
										<methodcall>
											<method>getSourceCode</method>
											<instance>res1</instance>
										</methodcall>
										<methodcall>
											<method>substring</method>
											<instance>sourcec</instance>
										</methodcall>
										<methodcall>
											<method>createElement</method>
											<instance>document</instance>
										</methodcall>
										<loop>
											<condition>do</condition>
											<methodcall>
												<method>goToTokenWithName</method>
											</methodcall>
											<methodcall>
												<method>getData</method>
												<instance>res2</instance>
											</methodcall>
											<methodcall>
												<method>strip</method>
												<instance>)</instance>
											</methodcall>
											<methodcall>
												<method>split</method>
												<instance>functionData2</instance>
											</methodcall>
											<alternative>
												<case>
													<condition>if(parameterFunction.length == 2)</condition>
													<methodcall>
														<method>createElement</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>createElement</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>createElement</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>typePNode</instance>
													</methodcall>
													<methodcall>
														<method>createTextNode</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>namePNode</instance>
													</methodcall>
													<methodcall>
														<method>createTextNode</method>
														<instance>document</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>entryPNode</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>entryPNode</instance>
													</methodcall>
													<methodcall>
														<method>appendChild</method>
														<instance>parametersNode</instance>
													</methodcall>
												</case>
											</alternative>
											<methodcall>
												<method>getSourceCode</method>
												<instance>res2</instance>
											</methodcall>
											<methodcall>
												<method>substring</method>
												<instance>sourcec</instance>
											</methodcall>
										</loop>
									</case>
									<loop>
										<condition>while(res2.getFoundToken() != 0)</condition>
									</loop>
									<alternative>
										<case>
											<condition>if(parametersNode.hasChildNodes())</condition>
										</case>
									</alternative>
									<methodcall>
										<method>appendChild</method>
										<instance>methoddefinitionNode</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>if(!prefixRBrace[2].equals("void"))</condition>
											<methodcall>
												<method>createElement</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>resultNode</instance>
											</methodcall>
											<methodcall>
												<method>createTextNode</method>
												<instance>document</instance>
											</methodcall>
											<methodcall>
												<method>appendChild</method>
												<instance>methoddefinitionNode</instance>
											</methodcall>
										</case>
									</alternative>
									<methodcall>
										<method>trim</method>
										<instance>sourcec</instance>
									</methodcall>
									<alternative>
										<case>
											<condition>if(sourcec.charAt(0) == '{')</condition>
											<methodcall>
												<method>substring</method>
												<instance>sourcec</instance>
											</methodcall>
											<methodcall>
												<method>=</method>
											</methodcall>
											<methodcall>
												<method>getLastChild</method>
												<instance>curNode</instance>
											</methodcall>
										</case>
									</alternative>
									<methodcall>
										<method>getSourceCode</method>
										<instance>res1</instance>
									</methodcall>
									<methodcall>
										<method>=</method>
									</methodcall>
									<methodcall>
										<method>getLastChild</method>
										<instance>curNode</instance>
									</methodcall>
								</alternative>
							</case>
							<alternative>
								<case>
									<condition>if((prefixRBrace[1].equals("=") ||
										prefixRBrace[2].equals("new")))</condition>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>curNode</instance>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>instanceNode</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>instanceNNode</instance>
									</methodcall>
									<methodcall>
										<method>createTextNode</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>createElement</method>
										<instance>document</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>instanceNode</instance>
									</methodcall>
									<methodcall>
										<method>appendChild</method>
										<instance>instanceCNode</instance>
									</methodcall>
									<methodcall>
										<method>createTextNode</method>
										<instance>document</instance>
									</methodcall>
									<loop>
										<condition>do</condition>
										<alternative>
											<case>
												<condition>if(goToClassNode.getNodeName().equals("classdefinition"))
												</condition>
												<methodcall>
													<method>=</method>
												</methodcall>
												<methodcall>
													<method>getChildwithName</method>
												</methodcall>
												<methodcall>
													<method>=</method>
												</methodcall>
												<methodcall>
													<method>getChildwithName</method>
												</methodcall>
												<loop>
													<condition>for(int i = 0; i &lt;
														classComp.getElementsByTagName("entry").getLength(); i++)
													</condition>
													<alternative>
														<case>
															<condition>if(classComp.getElementsByTagName("entry").item(i).getTextContent()
																.equals(prefixRBrace[3]))
															</condition>
														</case>
													</alternative>
												</loop>
											</case>
											<loop>
												<condition>for(int i = 0; i &lt;
													classAggr.getElementsByTagName("entry").getLength(); i++)
												</condition>
												<alternative>
													<case>
														<condition>if(classAggr.getElementsByTagName("entry").item(i).getTextContent()
															.equals(prefixRBrace[3]))
														</condition>
														<methodcall>
															<method>removeChild</method>
															<instance>classAggr</instance>
														</methodcall>
														<methodcall>
															<method>getElementsByTagName</method>
															<instance>classAggr</instance>
														</methodcall>
														<methodcall>
															<method>item</method>
															<instance>)</instance>
														</methodcall>
													</case>
												</alternative>
											</loop>
										</alternative>
										<alternative>
											<case>
												<condition>if(inCompositions == false)</condition>
												<methodcall>
													<method>createElement</method>
													<instance>document</instance>
												</methodcall>
												<methodcall>
													<method>appendChild</method>
													<instance>classCompEntry</instance>
												</methodcall>
												<methodcall>
													<method>createTextNode</method>
													<instance>document</instance>
												</methodcall>
												<methodcall>
													<method>appendChild</method>
													<instance>classComp</instance>
												</methodcall>
												<methodcall>
													<method>=</method>
												</methodcall>
												<methodcall>
													<method>getLastChild</method>
													<instance>curNode</instance>
												</methodcall>
											</case>
										</alternative>
									</loop>
								</case>
								<methodcall>
									<method>=</method>
								</methodcall>
								<methodcall>
									<method>getParentNode</method>
									<instance>goToClassNode</instance>
								</methodcall>
							</alternative>
						</alternative>
						<loop>
							<condition>while(!doneClass)</condition>
						</loop>
						<methodcall>
							<method>goToTokenWithName</method>
						</methodcall>
						<methodcall>
							<method>getSourceCode</method>
							<instance>newRes</instance>
						</methodcall>
					</frame>
					<methodcall>
						<method>out</method>
						<instance>System</instance>
					</methodcall>
				</frame>
			</loop>
		</methoddefinition>
		<alternative>
			<case>
				<condition>if(switchCaseOn[curSwitch])</condition>
				<alternative>
					<case>
						<condition>if(sourcec.substring(0,
							compString.length()).equals(compString))</condition>
						<loop>
							<condition>while(!(curNode.getNodeName().equals("alternative")
								||
								curNode.getNodeName().equals("source")))
							</condition>
							<alternative>
								<case>
									<condition>if(curNode.getNodeName().equals("alternative"))
									</condition>
									<methodcall>
										<method>out</method>
										<instance>System</instance>
									</methodcall>
								</case>
							</alternative>
							<methodcall>
								<method>=</method>
							</methodcall>
							<methodcall>
								<method>getParentNode</method>
								<instance>curNode</instance>
							</methodcall>
						</loop>
					</case>
					<methodcall>
						<method>substring</method>
						<instance>sourcec</instance>
					</methodcall>
					<methodcall>
						<method>length</method>
						<instance>compString</instance>
					</methodcall>
					<methodcall>
						<method>trim</method>
						<instance>sourcec</instance>
					</methodcall>
					<methodcall>
						<method>createElement</method>
						<instance>document</instance>
					</methodcall>
					<methodcall>
						<method>createElement</method>
						<instance>document</instance>
					</methodcall>
					<methodcall>
						<method>appendChild</method>
						<instance>curNode</instance>
					</methodcall>
					<methodcall>
						<method>appendChild</method>
						<instance>switchCaseNode</instance>
					</methodcall>
					<methodcall>
						<method>goToTokenWithName</method>
					</methodcall>
					<methodcall>
						<method>appendChild</method>
						<instance>switchConditionNode</instance>
					</methodcall>
					<methodcall>
						<method>createTextNode</method>
						<instance>document</instance>
					</methodcall>
					<methodcall>
						<method>getData</method>
						<instance>caseRes</instance>
					</methodcall>
					<methodcall>
						<method>getSourceCode</method>
						<instance>caseRes</instance>
					</methodcall>
					<methodcall>
						<method>=</method>
					</methodcall>
					<methodcall>
						<method>getLastChild</method>
						<instance>curNode</instance>
					</methodcall>
				</alternative>
			</case>
		</alternative>
		<alternative>
			<case>
				<condition>if(switchCaseOn[curSwitch])</condition>
				<alternative>
					<case>
						<condition>if(sourcec.substring(0,
							compString.length()).equals(compString))</condition>
						<loop>
							<condition>while(!(curNode.getNodeName().equals("alternative")
								||
								curNode.getNodeName().equals("source")))
							</condition>
							<alternative>
								<case>
									<condition>if(curNode.getNodeName().equals("alternative"))
									</condition>
									<methodcall>
										<method>out</method>
										<instance>System</instance>
									</methodcall>
								</case>
							</alternative>
							<methodcall>
								<method>=</method>
							</methodcall>
							<methodcall>
								<method>getParentNode</method>
								<instance>curNode</instance>
							</methodcall>
						</loop>
					</case>
					<methodcall>
						<method>substring</method>
						<instance>sourcec</instance>
					</methodcall>
					<methodcall>
						<method>length</method>
						<instance>compString</instance>
					</methodcall>
					<methodcall>
						<method>trim</method>
						<instance>sourcec</instance>
					</methodcall>
					<methodcall>
						<method>createElement</method>
						<instance>document</instance>
					</methodcall>
					<methodcall>
						<method>createElement</method>
						<instance>document</instance>
					</methodcall>
					<methodcall>
						<method>appendChild</method>
						<instance>curNode</instance>
					</methodcall>
					<methodcall>
						<method>appendChild</method>
						<instance>switchCaseNode</instance>
					</methodcall>
					<methodcall>
						<method>appendChild</method>
						<instance />
					</methodcall>
					<methodcall>
						<method>createTextNode</method>
						<instance>document</instance>
					</methodcall>
					<alternative>
						<case>
							<condition>if(sourcec.substring(0, 1).equals(":"))</condition>
							<methodcall>
								<method>substring</method>
								<instance>sourcec</instance>
							</methodcall>
						</case>
						<case>
							<condition>else</condition>
							<methodcall>
								<method>out</method>
								<instance>System</instance>
							</methodcall>
						</case>
					</alternative>
					<methodcall>
						<method>=</method>
					</methodcall>
					<methodcall>
						<method>getLastChild</method>
						<instance>curNode</instance>
					</methodcall>
				</alternative>
			</case>
		</alternative>
		<alternative>
			<case>
				<condition>if(sourcec.substring(0, 5).equals("break"))</condition>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
			</case>
		</alternative>
		<alternative>
			<case>
				<condition>if(sourcec.substring(0,
					compString.length()).equals(compString))</condition>
				<methodcall>
					<method>substring</method>
					<instance>sourcec</instance>
				</methodcall>
				<methodcall>
					<method>length</method>
					<instance>compString</instance>
				</methodcall>
				<methodcall>
					<method>trim</method>
					<instance>sourcec</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(sourcec.substring(0, 2).equals("if"))</condition>
						<methodcall>
							<method>createElement</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>createElement</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>curNode</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>ifCaseNode</instance>
						</methodcall>
						<methodcall>
							<method>substring</method>
							<instance>sourcec</instance>
						</methodcall>
						<methodcall>
							<method>goToTokenWithName</method>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>ifConditionNode</instance>
						</methodcall>
						<methodcall>
							<method>createTextNode</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>getData</method>
							<instance>ifRes</instance>
						</methodcall>
						<methodcall>
							<method>getSourceCode</method>
							<instance>ifRes</instance>
						</methodcall>
						<methodcall>
							<method>substring</method>
							<instance>sourcec</instance>
						</methodcall>
						<methodcall>
							<method>trim</method>
							<instance>sourcec</instance>
						</methodcall>
						<alternative>
							<case>
								<condition>if(sourcec.charAt(0) == '{')</condition>
								<methodcall>
									<method>substring</method>
									<instance>sourcec</instance>
								</methodcall>
								<methodcall>
									<method>=</method>
								</methodcall>
								<methodcall>
									<method>getLastChild</method>
									<instance>curNode</instance>
								</methodcall>
							</case>
						</alternative>
					</case>
					<case>
						<condition>else</condition>
						<methodcall>
							<method>createElement</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>createElement</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>curNode</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>ifCaseNode</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>ifConditionNode</instance>
						</methodcall>
						<methodcall>
							<method>createTextNode</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>trim</method>
							<instance>sourcec</instance>
						</methodcall>
						<alternative>
							<case>
								<condition>if(sourcec.charAt(0) == '{')</condition>
								<methodcall>
									<method>substring</method>
									<instance>sourcec</instance>
								</methodcall>
								<methodcall>
									<method>=</method>
								</methodcall>
								<methodcall>
									<method>getLastChild</method>
									<instance>curNode</instance>
								</methodcall>
								<methodcall>
									<method>out</method>
									<instance>System</instance>
								</methodcall>
								<methodcall>
									<method>getNodeName</method>
									<instance>curNode</instance>
								</methodcall>
							</case>
						</alternative>
					</case>
				</alternative>
			</case>
		</alternative>
		<alternative>
			<case>
				<condition>if(sourcec.substring(0,
					compString.length()).equals(compString))</condition>
				<methodcall>
					<method>goToTokenWithName</method>
				</methodcall>
				<methodcall>
					<method>getData</method>
					<instance>res</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>)</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(afterDo.trim().length() == 0)</condition>
						<methodcall>
							<method>createElement</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>createElement</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>doWhileLoopNode</instance>
						</methodcall>
						<methodcall>
							<method>substring</method>
							<instance>sourcec</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>doWhileConditionNode</instance>
						</methodcall>
						<methodcall>
							<method>createTextNode</method>
							<instance>document</instance>
						</methodcall>
						<methodcall>
							<method>appendChild</method>
							<instance>curNode</instance>
						</methodcall>
						<methodcall>
							<method>trim</method>
							<instance>sourcec</instance>
						</methodcall>
						<alternative>
							<case>
								<condition>if(sourcec.charAt(0) == '{')</condition>
								<methodcall>
									<method>substring</method>
									<instance>sourcec</instance>
								</methodcall>
								<methodcall>
									<method>=</method>
								</methodcall>
								<methodcall>
									<method>getLastChild</method>
									<instance>curNode</instance>
								</methodcall>
							</case>
							<case>
								<condition>else</condition>
								<methodcall>
									<method>out</method>
									<instance>System</instance>
								</methodcall>
							</case>
						</alternative>
					</case>
				</alternative>
			</case>
		</alternative>
		<alternative>
			<case>
				<condition>if(sourcec.substring(0,
					compString.length()).equals(compString))</condition>
				<methodcall>
					<method>substring</method>
					<instance>sourcec</instance>
				</methodcall>
				<methodcall>
					<method>createElement</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>somethingWCB</instance>
				</methodcall>
				<methodcall>
					<method>createTextNode</method>
					<instance>document</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>sourcec</instance>
				</methodcall>
				<methodcall>
					<method>appendChild</method>
					<instance>curNode</instance>
				</methodcall>
				<methodcall>
					<method>=</method>
				</methodcall>
				<methodcall>
					<method>getLastChild</method>
					<instance>curNode</instance>
				</methodcall>
			</case>
		</alternative>
		<alternative>
			<case>
				<condition>if(sourcec.substring(0,
					compString.length()).equals(compString))</condition>
				<methodcall>
					<method>substring</method>
					<instance>sourcec</instance>
				</methodcall>
				<methodcall>
					<method>=</method>
				</methodcall>
				<methodcall>
					<method>getParentNode</method>
					<instance>curNode</instance>
				</methodcall>
				<methodcall>
					<method>trim</method>
					<instance>sourcec</instance>
				</methodcall>
				<alternative>
					<case>
						<condition>if(curNode.getFirstChild().getTextContent().equals("else"))
						</condition>
						<methodcall>
							<method>=</method>
						</methodcall>
						<methodcall>
							<method>getParentNode</method>
							<instance>curNode</instance>
						</methodcall>
					</case>
					<case>
						<condition>else</condition>
					</case>
					<alternative>
						<case>
							<condition>if(curNode.getNodeName().equals("alternative")
								&amp;&amp; curNode.getFirstChild().getFirstChild()
								.getTextContent().substring(0, 6).equals("switch"))
							</condition>
							<alternative>
								<case>
									<condition>if(curSwitch != 0)</condition>
								</case>
							</alternative>
							<methodcall>
								<method>=</method>
							</methodcall>
							<methodcall>
								<method>getParentNode</method>
								<instance>curNode</instance>
							</methodcall>
						</case>
						<case>
							<condition>else</condition>
						</case>
						<alternative>
							<case>
								<condition>if(!(sourcec.substring(0, 4).equals("else")))
								</condition>
								<alternative>
									<case>
										<condition>if(curNode.getFirstChild().getTextContent().substring(0,
											2).equals("if"))</condition>
										<methodcall>
											<method>=</method>
										</methodcall>
										<methodcall>
											<method>getParentNode</method>
											<instance>curNode</instance>
										</methodcall>
									</case>
								</alternative>
							</case>
						</alternative>
					</alternative>
				</alternative>
				<alternative>
					<case>
						<condition>if(!done)</condition>
						<methodcall>
							<method>substring</method>
							<instance>sourcec</instance>
						</methodcall>
					</case>
				</alternative>
			</case>
		</alternative>
		<methodcall>
			<method>catch</method>
		</methodcall>
		<frame>
			<alternative>
				<case>
					<condition>if(e.getCause() == StringIndexOutOfBoundsException)
					</condition>
					<alternative>
						<case>
							<condition>if(sourcec.length() &lt;= 10)</condition>
							<loop>
								<condition>for(int i = 0; i &lt; sourcec.length(); i++)
								</condition>
								<alternative>
									<case>
										<condition>if(sourcec.charAt(i) != ';')</condition>
									</case>
								</alternative>
							</loop>
						</case>
					</alternative>
				</case>
				<alternative>
					<case>
						<condition>if(!sourceEnd)</condition>
					</case>
					<case>
						<condition>else</condition>
					</case>
				</alternative>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
			</alternative>
			<case>
				<condition>else</condition>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
				<methodcall>
					<method>toString</method>
					<instance>e</instance>
				</methodcall>
				<methodcall>
					<method>out</method>
					<instance>System</instance>
				</methodcall>
				<methodcall>
					<method>substring</method>
					<instance>sourcec</instance>
				</methodcall>
			</case>
		</frame>
	</classdefinition>
</source>
